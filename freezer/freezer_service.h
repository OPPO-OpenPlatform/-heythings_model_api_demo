/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: freezer.proto */

#ifndef FREEZER_SERVICE_H
#define FREEZER_SERVICE_H

#include "hey/types.h"

enum freezer_freezer_level {
    FREEZER_FREEZER_LEVEL_NONE = 0,
    FREEZER_FREEZER_LEVEL_LEVELONE = 1,
    FREEZER_FREEZER_LEVEL_LEVELTWO = 2,
    FREEZER_FREEZER_LEVEL_LEVELTHREE = 3,
    FREEZER_FREEZER_LEVEL_LEVELFOUR = 4,
    FREEZER_FREEZER_LEVEL_LEVELFIVE = 5
};

enum FREEZER_PROPERTY {
    FREEZER_PROPERTY_POWER = 1,
    FREEZER_PROPERTY_DEVLABLE = 2,
    FREEZER_PROPERTY_CURRENTTEMPERATURE = 3,
    FREEZER_PROPERTY_TARGETTEMPERATURE = 4,
    FREEZER_PROPERTY_FREEZERLEVEL = 5,
    FREEZER_PROPERTY_QUICKFREEZINGMODE = 6,
    FREEZER_PROPERTY_EXTREMEFREEZINGMODE = 7,
    FREEZER_PROPERTY_TEMPERATURECONTROLSWITCH = 8,
    FREEZER_PROPERTY_FCOMPARTMENTPOWER = 9
};

struct freezer_properties {
    bool power;
    char *devlable;
    int32_t currenttemperature;
    int32_t targettemperature;
    enum freezer_freezer_level freezerlevel;
    bool quickfreezingmode;
    bool extremefreezingmode;
    bool temperaturecontrolswitch;
    bool fcompartmentpower;
};

/**
 * @brief freezer service initialization
 * @param properties [freezer service properties]
 * @return int32_t   [initialize result]
*/
int32_t freezer_service_init(const struct freezer_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of freezer service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t freezer_properties_write_cb(size_t count, uint32_t *enumerate, struct freezer_properties *properties);

/**
 * @brief update properties of freezer service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t freezer_properties_update(size_t count, uint32_t *enumerate, struct freezer_properties *properties);

#endif /* FREEZER_SERVICE_H */
