/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: devP2P.proto */

#ifndef DEV_P2P_SERVICE_H
#define DEV_P2P_SERVICE_H

#include "hey/types.h"

enum dev_p2p_vendor {
  /*
   *cs2-network尚云互联
   */
    DEV_P2P_VENDOR_CS2_NETWORK = 0
};

struct dev_p2p_set_stream_info_cs2_info_in {
    struct hey_binary_data p2pdid;
    struct hey_binary_data license;
    struct hey_binary_data initstring;
    struct hey_binary_data crckey;
};

enum dev_p2p_set_stream_info_vendor_info_in {
    DEV_P2P_SET_STREAM_INFO_VENDOR_INFO_IN_NOT_SET = 0,
    DEV_P2P_SET_STREAM_INFO_VENDOR_INFO_IN_CS2INFO = 1
};

struct dev_p2p_set_stream_info_in {
    enum dev_p2p_set_stream_info_vendor_info_in vendor_info_case;
    union {
        struct dev_p2p_set_stream_info_cs2_info_in *cs2info;
    };
};

struct dev_p2p_set_stream_info_out {
    uint32_t code;
};

enum DEV_P2P_ACTION {
    DEV_P2P_ACTION_SET_STREAM_INFO = 1
};

struct dev_p2p_properties {
    char __place_holder__; // make compiler happy
};

/**
 * @brief dev p2p service initialization
 * @param properties [dev p2p service properties]
 * @return int32_t   [initialize result]
*/
int32_t dev_p2p_service_init(const struct dev_p2p_properties *properties);

/**
 * @brief set stream info action start callback of dev p2p service
 * @param ctx          [action context]
 * @param action       [set stream info action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t dev_p2p_set_stream_info_start_cb(struct hey_action_ctx *ctx, struct dev_p2p_set_stream_info_in *action, void **user_context);

/**
 * @brief set stream info action send message of dev p2p service
 * @param ctx      [action context]
 * @param action   [set stream info action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t dev_p2p_set_stream_info_send(struct hey_action_ctx *ctx, struct dev_p2p_set_stream_info_out *action);

/**
 * @brief set stream info action stop of dev p2p service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t dev_p2p_set_stream_info_stop(struct hey_action_ctx *ctx);

/**
 * @brief set stream info action stop callback of dev p2p service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void dev_p2p_set_stream_info_stop_cb(void *user_context);

#endif /* DEV_P2P_SERVICE_H */
