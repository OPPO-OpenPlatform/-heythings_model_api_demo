/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: mfa.proto */

#ifndef MFA_SERVICE_H
#define MFA_SERVICE_H

#include "hey/types.h"

struct mfa_reset_in {
    char __place_holder__; // make compiler happy
};

struct mfa_reset_out {
    char __place_holder__; // make compiler happy
};

struct mfa_event_start_mfa {
    char __place_holder__; // make compiler happy
};

enum MFA_PROPERTY {
    MFA_PROPERTY_POWER = 1,
    MFA_PROPERTY_ALARMSTATE = 2
};

enum MFA_ACTION {
    MFA_ACTION_RESET = 4
};

enum MFA_EVENT {
    MFA_EVENT_START_MFA = 3
};

struct mfa_properties {
    bool power;
    bool alarmstate;
};

/**
 * @brief mfa service initialization
 * @param properties [mfa service properties]
 * @return int32_t   [initialize result]
*/
int32_t mfa_service_init(const struct mfa_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of mfa service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t mfa_properties_write_cb(size_t count, uint32_t *enumerate, struct mfa_properties *properties);

/**
 * @brief update properties of mfa service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t mfa_properties_update(size_t count, uint32_t *enumerate, struct mfa_properties *properties);

/**
 * @brief reset action start callback of mfa service
 * @param ctx          [action context]
 * @param action       [reset action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t mfa_reset_start_cb(struct hey_action_ctx *ctx, struct mfa_reset_in *action, void **user_context);

/**
 * @brief reset action send message of mfa service
 * @param ctx      [action context]
 * @param action   [reset action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t mfa_reset_send(struct hey_action_ctx *ctx, struct mfa_reset_out *action);

/**
 * @brief reset action stop of mfa service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t mfa_reset_stop(struct hey_action_ctx *ctx);

/**
 * @brief reset action stop callback of mfa service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void mfa_reset_stop_cb(void *user_context);

/**
 * @brief start mfa notify of mfa service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t mfa_start_mfa_notify(struct mfa_event_start_mfa *event, struct hey_event_notify_attr *attr);

/**
 * @brief start mfa notify result callback of mfa service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void mfa_start_mfa_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* MFA_SERVICE_H */
