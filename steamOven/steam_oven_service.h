/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: steamOven.proto */

#ifndef STEAM_OVEN_SERVICE_H
#define STEAM_OVEN_SERVICE_H

#include "hey/types.h"

enum steam_oven_operation_mode {
    STEAM_OVEN_OPERATION_MODE_STOP = 0,
    STEAM_OVEN_OPERATION_MODE_PAUSE = 1,
    STEAM_OVEN_OPERATION_MODE_RESUME = 2,
    STEAM_OVEN_OPERATION_MODE_CANCEL = 3,
    STEAM_OVEN_OPERATION_MODE_START = 4
};

enum steam_oven_machine_status {
    STEAM_OVEN_MACHINE_STATUS_IDLE = 0,
    STEAM_OVEN_MACHINE_STATUS_PREACTIVE = 1,
    STEAM_OVEN_MACHINE_STATUS_ACTIVE = 2,
    STEAM_OVEN_MACHINE_STATUS_STOPED = 3,
    STEAM_OVEN_MACHINE_STATUS_ERROR = 4
};

enum steam_oven_oven_mode {
    STEAM_OVEN_OVEN_MODE_MANUAL = 0,
    STEAM_OVEN_OVEN_MODE_MEAT_VEGETABLE = 1,
    STEAM_OVEN_OVEN_MODE_BAKE = 2,
    STEAM_OVEN_OVEN_MODE_PIZZA = 3,
    STEAM_OVEN_OVEN_MODE_ROTATION = 4,
    STEAM_OVEN_OVEN_MODE_AIR_DRY = 5,
    STEAM_OVEN_OVEN_MODE_FERMENTATION = 6,
    STEAM_OVEN_OVEN_MODE_HOT_WIND = 7,
    STEAM_OVEN_OVEN_MODE_AIR_FRY = 8,
    STEAM_OVEN_OVEN_MODE_UNFREEZE = 9
};

enum steam_oven_preheat_status {
    STEAM_OVEN_PREHEAT_STATUS_PREHEAT_NONE = 0,
    STEAM_OVEN_PREHEAT_STATUS_PREHEATING = 1,
    STEAM_OVEN_PREHEAT_STATUS_PREHEAT_END = 2
};

enum steam_oven_oven_work_mode {
    STEAM_OVEN_OVEN_WORK_MODE_STEAM = 0,
    STEAM_OVEN_OVEN_WORK_MODE_ROAST = 1
};

enum steam_oven_job_status {
    STEAM_OVEN_JOB_STATUS_STANDBY_STATUS = 0,
    STEAM_OVEN_JOB_STATUS_PREACTIVE_STATUS = 1,
    STEAM_OVEN_JOB_STATUS_WORK_STATUS = 2,
    STEAM_OVEN_JOB_STATUS_PAUSE_STATUS = 3,
    STEAM_OVEN_JOB_STATUS_CANCEL_STATUS = 4,
    STEAM_OVEN_JOB_STATUS_COMPLETE_STATUS = 5
};

struct steam_oven_appointment_task_completed {
    bool status;
    char *name;
    uint32_t hour;
    uint32_t min;
    uint32_t sec;
};

struct steam_oven_event_open_alarm {
    char __place_holder__; // make compiler happy
};

enum STEAM_OVEN_PROPERTY {
    STEAM_OVEN_PROPERTY_POWER = 1,
    STEAM_OVEN_PROPERTY_OPERATIONMODE = 2,
    STEAM_OVEN_PROPERTY_OPERATIONTIME = 3,
    STEAM_OVEN_PROPERTY_CURRENTTEMPERATURE = 4,
    STEAM_OVEN_PROPERTY_TARGETTEMPERATURE = 5,
    STEAM_OVEN_PROPERTY_OVENMODE = 6,
    STEAM_OVEN_PROPERTY_PREHEATENABLED = 7,
    STEAM_OVEN_PROPERTY_PREHEATSTATUS = 8,
    STEAM_OVEN_PROPERTY_OVENWORKMODE = 9,
    STEAM_OVEN_PROPERTY_APPOINTMENTTASKCOMPLETED = 10,
    STEAM_OVEN_PROPERTY_JOBSTATUS = 11,
    STEAM_OVEN_PROPERTY_REMAINTIME = 12,
    STEAM_OVEN_PROPERTY_MACHINESTATUS = 13
};

enum STEAM_OVEN_EVENT {
    STEAM_OVEN_EVENT_OPEN_ALARM = 14
};

struct steam_oven_properties {
    bool power;
    enum steam_oven_operation_mode operationmode;
    uint32_t operationtime;
    int32_t currenttemperature;
    int32_t targettemperature;
    enum steam_oven_oven_mode ovenmode;
    bool preheatenabled;
    enum steam_oven_preheat_status preheatstatus;
    enum steam_oven_oven_work_mode ovenworkmode;
    struct steam_oven_appointment_task_completed *appointmenttaskcompleted;
    enum steam_oven_job_status jobstatus;
    uint32_t remaintime;
    enum steam_oven_machine_status machinestatus;
};

/**
 * @brief steam oven service initialization
 * @param properties [steam oven service properties]
 * @return int32_t   [initialize result]
*/
int32_t steam_oven_service_init(const struct steam_oven_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of steam oven service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t steam_oven_properties_write_cb(size_t count, uint32_t *enumerate, struct steam_oven_properties *properties);

/**
 * @brief update properties of steam oven service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t steam_oven_properties_update(size_t count, uint32_t *enumerate, struct steam_oven_properties *properties);

/**
 * @brief open alarm notify of steam oven service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t steam_oven_open_alarm_notify(struct steam_oven_event_open_alarm *event, struct hey_event_notify_attr *attr);

/**
 * @brief open alarm notify result callback of steam oven service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void steam_oven_open_alarm_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* STEAM_OVEN_SERVICE_H */
