/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: electricCooker.proto */

#ifndef ELECTRIC_COOKER_SERVICE_H
#define ELECTRIC_COOKER_SERVICE_H

#include "hey/types.h"

enum electric_cooker_electric_cooker_mode {
    ELECTRIC_COOKER_ELECTRIC_COOKER_MODE_RICE = 0,
    ELECTRIC_COOKER_ELECTRIC_COOKER_MODE_TURBO = 1,
    ELECTRIC_COOKER_ELECTRIC_COOKER_MODE_STANDARD = 2,
    ELECTRIC_COOKER_ELECTRIC_COOKER_MODE_PORRIDGE = 3,
    ELECTRIC_COOKER_ELECTRIC_COOKER_MODE_SOUP = 4,
    ELECTRIC_COOKER_ELECTRIC_COOKER_MODE_STEAMING = 5,
    ELECTRIC_COOKER_ELECTRIC_COOKER_MODE_CEREALANDRICE = 6,
    ELECTRIC_COOKER_ELECTRIC_COOKER_MODE_BROWNRICE = 7,
    ELECTRIC_COOKER_ELECTRIC_COOKER_MODE_HEATPRESERVATION = 8
};

enum electric_cooker_taste {
    ELECTRIC_COOKER_TASTE_SOFTTASTE = 0,
    ELECTRIC_COOKER_TASTE_STANDARDTASTE = 1,
    ELECTRIC_COOKER_TASTE_HARDTASTE = 2,
    ELECTRIC_COOKER_TASTE_STICKYTASTE = 3
};

enum electric_cooker_rice {
    ELECTRIC_COOKER_RICE_NORMAL = 0,
    ELECTRIC_COOKER_RICE_BASMATI = 1,
    ELECTRIC_COOKER_RICE_NORTHEASTRICE = 2
};

enum electric_cooker_cooker_operation_mode {
    ELECTRIC_COOKER_COOKER_OPERATION_MODE_COMPLETION = 0,
    ELECTRIC_COOKER_COOKER_OPERATION_MODE_RESERVING = 1,
    ELECTRIC_COOKER_COOKER_OPERATION_MODE_HEATPRESERVING = 2,
    ELECTRIC_COOKER_COOKER_OPERATION_MODE_CANCELLATION = 3,
    ELECTRIC_COOKER_COOKER_OPERATION_MODE_WORKING = 4,
    ELECTRIC_COOKER_COOKER_OPERATION_MODE_awakeningRice = 5
};

struct electric_cooker_event_open_alarm {
    char __place_holder__; // make compiler happy
};

struct electric_cooker_appointment_task_completed {
    bool status;
    char *name;
    uint32_t hour;
    uint32_t min;
    uint32_t sec;
};

struct electric_cooker_event_cooking_end {
    char __place_holder__; // make compiler happy
};

struct electric_cooker_event_dry_braised {
    char __place_holder__; // make compiler happy
};

enum ELECTRIC_COOKER_PROPERTY {
    ELECTRIC_COOKER_PROPERTY_POWER = 1,
    ELECTRIC_COOKER_PROPERTY_ELECTRICCOOKERMODE = 2,
    ELECTRIC_COOKER_PROPERTY_REMAINTIME = 3,
    ELECTRIC_COOKER_PROPERTY_PRESERVINGHEATDURATION = 4,
    ELECTRIC_COOKER_PROPERTY_HEATPRESERVATIONTIME = 5,
    ELECTRIC_COOKER_PROPERTY_TASTE = 6,
    ELECTRIC_COOKER_PROPERTY_RICE = 7,
    ELECTRIC_COOKER_PROPERTY_EXTRATIMEFORCOOKING = 9,
    ELECTRIC_COOKER_PROPERTY_COOKEROPERATIONMODE = 10,
    ELECTRIC_COOKER_PROPERTY_APPOINTMENTTASKCOMPLETED = 11
};

enum ELECTRIC_COOKER_EVENT {
    ELECTRIC_COOKER_EVENT_OPEN_ALARM = 8,
    ELECTRIC_COOKER_EVENT_COOKING_END = 12,
    ELECTRIC_COOKER_EVENT_DRY_BRAISED = 13
};

struct electric_cooker_properties {
    bool power;
    enum electric_cooker_electric_cooker_mode electriccookermode;
    uint32_t remaintime;
    uint32_t preservingheatduration;
    uint32_t heatpreservationtime;
    enum electric_cooker_taste taste;
    enum electric_cooker_rice rice;
    int32_t extratimeforcooking;
    enum electric_cooker_cooker_operation_mode cookeroperationmode;
    struct electric_cooker_appointment_task_completed *appointmenttaskcompleted;
};

/**
 * @brief electric cooker service initialization
 * @param properties [electric cooker service properties]
 * @return int32_t   [initialize result]
*/
int32_t electric_cooker_service_init(const struct electric_cooker_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of electric cooker service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t electric_cooker_properties_write_cb(size_t count, uint32_t *enumerate, struct electric_cooker_properties *properties);

/**
 * @brief update properties of electric cooker service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t electric_cooker_properties_update(size_t count, uint32_t *enumerate, struct electric_cooker_properties *properties);

/**
 * @brief open alarm notify of electric cooker service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t electric_cooker_open_alarm_notify(struct electric_cooker_event_open_alarm *event, struct hey_event_notify_attr *attr);

/**
 * @brief open alarm notify result callback of electric cooker service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void electric_cooker_open_alarm_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief cooking end notify of electric cooker service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t electric_cooker_cooking_end_notify(struct electric_cooker_event_cooking_end *event, struct hey_event_notify_attr *attr);

/**
 * @brief cooking end notify result callback of electric cooker service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void electric_cooker_cooking_end_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief dry braised notify of electric cooker service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t electric_cooker_dry_braised_notify(struct electric_cooker_event_dry_braised *event, struct hey_event_notify_attr *attr);

/**
 * @brief dry braised notify result callback of electric cooker service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void electric_cooker_dry_braised_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* ELECTRIC_COOKER_SERVICE_H */
