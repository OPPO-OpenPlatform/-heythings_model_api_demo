/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: wifiManage.proto */

#ifndef WIFI_MANAGE_SERVICE_H
#define WIFI_MANAGE_SERVICE_H

#include "hey/types.h"

struct wifi_manage_wifi_auto_change {
    char *ssid;
    bool status;
};

struct wifi_manage_auto_change_configuration {
    char *ssid;
    char *password;
};

struct wifi_manage_get_ssid_list_in {
    char __place_holder__; // make compiler happy
};

struct wifi_manage_get_ssid_list_ssid_info_out {
    char *ssid;
    int32_t rssi;
};

struct wifi_manage_get_ssid_list_out {
    size_t n_ssidinfo;
    struct wifi_manage_get_ssid_list_ssid_info_out **ssidinfo;
};

enum WIFI_MANAGE_PROPERTY {
    WIFI_MANAGE_PROPERTY_WIFIAUTOCHANGEENABLE = 1,
    WIFI_MANAGE_PROPERTY_WIFIAUTOCHANGE = 2,
    WIFI_MANAGE_PROPERTY_AUTOCHANGECONFIGURATION = 3
};

enum WIFI_MANAGE_ACTION {
    WIFI_MANAGE_ACTION_GET_SSID_LIST = 4
};

struct wifi_manage_properties {
    bool wifiautochangeenable;
    size_t n_wifiautochange;
    struct hey_array_node **wifiautochange;
    size_t n_autochangeconfiguration;
    struct hey_array_node **autochangeconfiguration;
};

/**
 * @brief wifi manage service initialization
 * @param properties [wifi manage service properties]
 * @return int32_t   [initialize result]
*/
int32_t wifi_manage_service_init(const struct wifi_manage_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
struct wifi_manage_wifi_auto_change *wifi_manage_wifi_auto_change_unpack(const uint8_t *data, size_t len);
void wifi_manage_wifi_auto_change_free_unpacked(struct wifi_manage_wifi_auto_change *data);
// less than 0 means failure
int32_t wifi_manage_wifi_auto_change_get_packed_size(const struct wifi_manage_wifi_auto_change *data);
// less than 0 means failure
int32_t wifi_manage_wifi_auto_change_pack(const struct wifi_manage_wifi_auto_change *data, uint8_t *out);

struct wifi_manage_auto_change_configuration *wifi_manage_auto_change_configuration_unpack(const uint8_t *data, size_t len);
void wifi_manage_auto_change_configuration_free_unpacked(struct wifi_manage_auto_change_configuration *data);
// less than 0 means failure
int32_t wifi_manage_auto_change_configuration_get_packed_size(const struct wifi_manage_auto_change_configuration *data);
// less than 0 means failure
int32_t wifi_manage_auto_change_configuration_pack(const struct wifi_manage_auto_change_configuration *data, uint8_t *out);

/**
 * @brief properties write callback of wifi manage service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t wifi_manage_properties_write_cb(size_t count, uint32_t *enumerate, struct wifi_manage_properties *properties);

/**
 * @brief arrayNode properties add callback of wifi manage service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t wifi_manage_wifiautochange_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of wifi manage service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t wifi_manage_wifiautochange_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of wifi manage service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t wifi_manage_wifiautochange_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief arrayNode properties add callback of wifi manage service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t wifi_manage_autochangeconfiguration_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of wifi manage service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t wifi_manage_autochangeconfiguration_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of wifi manage service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t wifi_manage_autochangeconfiguration_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief update properties of wifi manage service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t wifi_manage_properties_update(size_t count, uint32_t *enumerate, struct wifi_manage_properties *properties);

/**
 * @brief get ssid list action start callback of wifi manage service
 * @param ctx          [action context]
 * @param action       [get ssid list action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t wifi_manage_get_ssid_list_start_cb(struct hey_action_ctx *ctx, struct wifi_manage_get_ssid_list_in *action, void **user_context);

/**
 * @brief get ssid list action send message of wifi manage service
 * @param ctx      [action context]
 * @param action   [get ssid list action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t wifi_manage_get_ssid_list_send(struct hey_action_ctx *ctx, struct wifi_manage_get_ssid_list_out *action);

/**
 * @brief get ssid list action stop of wifi manage service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t wifi_manage_get_ssid_list_stop(struct hey_action_ctx *ctx);

/**
 * @brief get ssid list action stop callback of wifi manage service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void wifi_manage_get_ssid_list_stop_cb(void *user_context);

#endif /* WIFI_MANAGE_SERVICE_H */
