/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: car.proto */

#ifndef CAR_SERVICE_H
#define CAR_SERVICE_H

#include "hey/types.h"

struct car_lock_car_in {
    char __place_holder__; // make compiler happy
};

struct car_lock_car_out {
    char __place_holder__; // make compiler happy
};

struct car_find_car_in {
    char __place_holder__; // make compiler happy
};

struct car_find_car_out {
    char __place_holder__; // make compiler happy
};

struct car_honk_car_in {
    char __place_holder__; // make compiler happy
};

struct car_honk_car_out {
    char __place_holder__; // make compiler happy
};

struct car_flash_car_in {
    char __place_holder__; // make compiler happy
};

struct car_flash_car_out {
    char __place_holder__; // make compiler happy
};

enum CAR_PROPERTY {
    CAR_PROPERTY_REMAININGRANGE = 1,
    CAR_PROPERTY_OILREMAININGRANGE = 2,
    CAR_PROPERTY_ELECREMAININGRANGE = 3,
    CAR_PROPERTY_WINDOWONOFF = 4,
    CAR_PROPERTY_LOCKSTATUS = 5,
    CAR_PROPERTY_SKYLIGHTONOFF = 8
};

enum CAR_ACTION {
    CAR_ACTION_LOCK_CAR = 6,
    CAR_ACTION_FIND_CAR = 7,
    CAR_ACTION_HONK_CAR = 9,
    CAR_ACTION_FLASH_CAR = 10
};

struct car_properties {
    uint32_t remainingrange;
    uint32_t oilremainingrange;
    uint32_t elecremainingrange;
    bool windowonoff;
    bool lockstatus;
    bool skylightonoff;
};

/**
 * @brief car service initialization
 * @param properties [car service properties]
 * @return int32_t   [initialize result]
*/
int32_t car_service_init(const struct car_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of car service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t car_properties_write_cb(size_t count, uint32_t *enumerate, struct car_properties *properties);

/**
 * @brief update properties of car service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t car_properties_update(size_t count, uint32_t *enumerate, struct car_properties *properties);

/**
 * @brief lock car action start callback of car service
 * @param ctx          [action context]
 * @param action       [lock car action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t car_lock_car_start_cb(struct hey_action_ctx *ctx, struct car_lock_car_in *action, void **user_context);

/**
 * @brief lock car action send message of car service
 * @param ctx      [action context]
 * @param action   [lock car action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t car_lock_car_send(struct hey_action_ctx *ctx, struct car_lock_car_out *action);

/**
 * @brief lock car action stop of car service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t car_lock_car_stop(struct hey_action_ctx *ctx);

/**
 * @brief lock car action stop callback of car service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void car_lock_car_stop_cb(void *user_context);

/**
 * @brief find car action start callback of car service
 * @param ctx          [action context]
 * @param action       [find car action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t car_find_car_start_cb(struct hey_action_ctx *ctx, struct car_find_car_in *action, void **user_context);

/**
 * @brief find car action send message of car service
 * @param ctx      [action context]
 * @param action   [find car action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t car_find_car_send(struct hey_action_ctx *ctx, struct car_find_car_out *action);

/**
 * @brief find car action stop of car service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t car_find_car_stop(struct hey_action_ctx *ctx);

/**
 * @brief find car action stop callback of car service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void car_find_car_stop_cb(void *user_context);

/**
 * @brief honk car action start callback of car service
 * @param ctx          [action context]
 * @param action       [honk car action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t car_honk_car_start_cb(struct hey_action_ctx *ctx, struct car_honk_car_in *action, void **user_context);

/**
 * @brief honk car action send message of car service
 * @param ctx      [action context]
 * @param action   [honk car action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t car_honk_car_send(struct hey_action_ctx *ctx, struct car_honk_car_out *action);

/**
 * @brief honk car action stop of car service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t car_honk_car_stop(struct hey_action_ctx *ctx);

/**
 * @brief honk car action stop callback of car service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void car_honk_car_stop_cb(void *user_context);

/**
 * @brief flash car action start callback of car service
 * @param ctx          [action context]
 * @param action       [flash car action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t car_flash_car_start_cb(struct hey_action_ctx *ctx, struct car_flash_car_in *action, void **user_context);

/**
 * @brief flash car action send message of car service
 * @param ctx      [action context]
 * @param action   [flash car action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t car_flash_car_send(struct hey_action_ctx *ctx, struct car_flash_car_out *action);

/**
 * @brief flash car action stop of car service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t car_flash_car_stop(struct hey_action_ctx *ctx);

/**
 * @brief flash car action stop callback of car service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void car_flash_car_stop_cb(void *user_context);

#endif /* CAR_SERVICE_H */
