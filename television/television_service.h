/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: television.proto */

#ifndef TELEVISION_SERVICE_H
#define TELEVISION_SERVICE_H

#include "hey/types.h"

enum record_point_record_type {
    RECORD_POINT_RECORD_TYPE_PICTURE_CHANGE = 0,
    RECORD_POINT_RECORD_TYPE_CRY = 1,
    RECORD_POINT_RECORD_TYPE_STAYING_DOORWAY = 2,
    RECORD_POINT_RECORD_TYPE_PASSING_BY_DOOR = 3,
    RECORD_POINT_RECORD_TYPE_HUMAN_MOTION = 4,
    RECORD_POINT_RECORD_TYPE_ANIMAL_MOTION = 5,
    RECORD_POINT_RECORD_TYPE_CAT_MOTION = 6,
    RECORD_POINT_RECORD_TYPE_DOG_MOTION = 7
};

enum event_record_notify_media_type {
    EVENT_RECORD_NOTIFY_MEDIA_TYPE_PICTURE = 0,
    EVENT_RECORD_NOTIFY_MEDIA_TYPE_AUDIO = 1,
    EVENT_RECORD_NOTIFY_MEDIA_TYPE_VIDEO = 2
};

enum television_source_input {
    TELEVISION_SOURCE_INPUT_VGA = 0,
    TELEVISION_SOURCE_INPUT_USB1 = 1,
    TELEVISION_SOURCE_INPUT_USB2 = 2,
    TELEVISION_SOURCE_INPUT_HDMI1 = 3,
    TELEVISION_SOURCE_INPUT_HDMI2 = 4,
    TELEVISION_SOURCE_INPUT_NETWORK = 5,
    TELEVISION_SOURCE_INPUT_AV = 6,
    TELEVISION_SOURCE_INPUT_SD_CARD = 7
};

enum television_status {
    TELEVISION_STATUS_IDEL = 0,
    TELEVISION_STATUS_WORKING = 1
};

enum television_sleep {
    TELEVISION_SLEEP_S_OFF = 0,
    TELEVISION_SLEEP_S_ON = 1
};

struct television_channel {
    uint32_t channelid;
    char *channelname;
};

struct television_get_picture_list_in {
    uint64_t fromtime;
    uint64_t totime;
    uint32_t count;
};

struct television_get_picture_list_picture_info_out {
    char *filename;
    uint64_t capturetime;
};

struct television_get_picture_list_out {
    uint32_t totalcount;
    size_t n_pictureinfo;
    struct television_get_picture_list_picture_info_out **pictureinfo;
};

struct television_get_record_list_in {
    uint64_t fromtime;
    uint64_t totime;
    uint32_t recordcount;
};

struct television_get_record_list_picture_info_record_point_out {
    enum record_point_record_type recordtype;
    uint64_t characteristicpoint;
};

struct television_get_record_list_picture_info_out {
    char *recordfilename;
    char *thumbnailfilename;
    uint64_t recordstarttime;
    uint32_t recordelapsedtime;
    bool autodeleteenabled;
    size_t n_recordpoint;
    struct television_get_record_list_picture_info_record_point_out **recordpoint;
};

struct television_get_record_list_out {
    uint32_t totalrecordcount;
    size_t n_pictureinfo;
    struct television_get_record_list_picture_info_out **pictureinfo;
};

struct television_event_record_notify {
    char *filename;
    enum event_record_notify_media_type mediatype;
};

struct television_del_record_info_in {
    size_t n_filename;
    char **filename;
};

struct television_del_record_info_out {
    char __place_holder__; // make compiler happy
};

struct television_del_picture_info_in {
    size_t n_filename;
    char **filename;
};

struct television_del_picture_info_out {
    char __place_holder__; // make compiler happy
};

struct television_channel_up_in {
    char __place_holder__; // make compiler happy
};

struct television_channel_up_out {
    char __place_holder__; // make compiler happy
};

struct television_channel_down_in {
    char __place_holder__; // make compiler happy
};

struct television_channel_down_out {
    char __place_holder__; // make compiler happy
};

struct television_event_channel_list_change {
    char __place_holder__; // make compiler happy
};

struct television_event_parent_controls_mode_start {
    char __place_holder__; // make compiler happy
};

struct television_event_parent_controls_mode_stop {
    char __place_holder__; // make compiler happy
};

struct television_get_parent_control_playlist_in {
    char __place_holder__; // make compiler happy
};

struct television_get_parent_control_playlist_playlist_out {
    char *contentname;
    uint32_t process;
    char *playtime;
};

struct television_get_parent_control_playlist_out {
    size_t n_playlist;
    struct television_get_parent_control_playlist_playlist_out **playlist;
};

struct television_get_parent_control_time_in {
    char __place_holder__; // make compiler happy
};

struct television_get_parent_control_time_out {
    uint32_t parentcontroltime;
    uint32_t totalparentcontroltime;
};

struct television_remain_in_parent_control_in {
    char __place_holder__; // make compiler happy
};

struct television_remain_in_parent_control_out {
    char __place_holder__; // make compiler happy
};

enum TELEVISION_PROPERTY {
    TELEVISION_PROPERTY_POWER = 1,
    TELEVISION_PROPERTY_SLEEP = 2,
    TELEVISION_PROPERTY_SOUNDVOLUME = 3,
    TELEVISION_PROPERTY_SPEECHCONTROLENABLED = 4,
    TELEVISION_PROPERTY_SOURCEINPUT = 5,
    TELEVISION_PROPERTY_STATUS = 6,
    TELEVISION_PROPERTY_PARENTCONTROLSENABLED = 7,
    TELEVISION_PROPERTY_SINGLEWATCHINGTVTIME = 8,
    TELEVISION_PROPERTY_MUTE = 9,
    TELEVISION_PROPERTY_CURRENTCHANNEL = 10,
    TELEVISION_PROPERTY_CHANNEL = 11
};

enum TELEVISION_ACTION {
    TELEVISION_ACTION_CHANNEL_UP = 12,
    TELEVISION_ACTION_CHANNEL_DOWN = 13,
    TELEVISION_ACTION_GET_PARENT_CONTROL_PLAYLIST = 14,
    TELEVISION_ACTION_GET_PICTURE_LIST = 15,
    TELEVISION_ACTION_GET_RECORD_LIST = 16,
    TELEVISION_ACTION_DEL_RECORD_INFO = 17,
    TELEVISION_ACTION_DEL_PICTURE_INFO = 18,
    TELEVISION_ACTION_GET_PARENT_CONTROL_TIME = 23,
    TELEVISION_ACTION_REMAIN_IN_PARENT_CONTROL = 24
};

enum TELEVISION_EVENT {
    TELEVISION_EVENT_RECORD_NOTIFY = 19,
    TELEVISION_EVENT_CHANNEL_LIST_CHANGE = 20,
    TELEVISION_EVENT_PARENT_CONTROLS_MODE_START = 21,
    TELEVISION_EVENT_PARENT_CONTROLS_MODE_STOP = 22
};

struct television_properties {
    bool power;
    enum television_sleep sleep;
    uint32_t soundvolume;
    bool speechcontrolenabled;
    enum television_source_input sourceinput;
    enum television_status status;
    bool parentcontrolsenabled;
    uint32_t singlewatchingtvtime;
    bool mute;
    char *currentchannel;
    size_t n_channel;
    struct hey_array_node **channel;
};

/**
 * @brief television service initialization
 * @param properties [television service properties]
 * @return int32_t   [initialize result]
*/
int32_t television_service_init(const struct television_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
struct television_channel *television_channel_unpack(const uint8_t *data, size_t len);
void television_channel_free_unpacked(struct television_channel *data);
// less than 0 means failure
int32_t television_channel_get_packed_size(const struct television_channel *data);
// less than 0 means failure
int32_t television_channel_pack(const struct television_channel *data, uint8_t *out);

/**
 * @brief properties write callback of television service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t television_properties_write_cb(size_t count, uint32_t *enumerate, struct television_properties *properties);

/**
 * @brief arrayNode properties add callback of television service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t television_channel_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of television service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t television_channel_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of television service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t television_channel_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief update properties of television service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t television_properties_update(size_t count, uint32_t *enumerate, struct television_properties *properties);

/**
 * @brief channel up action start callback of television service
 * @param ctx          [action context]
 * @param action       [channel up action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t television_channel_up_start_cb(struct hey_action_ctx *ctx, struct television_channel_up_in *action, void **user_context);

/**
 * @brief channel up action send message of television service
 * @param ctx      [action context]
 * @param action   [channel up action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t television_channel_up_send(struct hey_action_ctx *ctx, struct television_channel_up_out *action);

/**
 * @brief channel up action stop of television service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t television_channel_up_stop(struct hey_action_ctx *ctx);

/**
 * @brief channel up action stop callback of television service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void television_channel_up_stop_cb(void *user_context);

/**
 * @brief channel down action start callback of television service
 * @param ctx          [action context]
 * @param action       [channel down action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t television_channel_down_start_cb(struct hey_action_ctx *ctx, struct television_channel_down_in *action, void **user_context);

/**
 * @brief channel down action send message of television service
 * @param ctx      [action context]
 * @param action   [channel down action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t television_channel_down_send(struct hey_action_ctx *ctx, struct television_channel_down_out *action);

/**
 * @brief channel down action stop of television service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t television_channel_down_stop(struct hey_action_ctx *ctx);

/**
 * @brief channel down action stop callback of television service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void television_channel_down_stop_cb(void *user_context);

/**
 * @brief get parent control playlist action start callback of television service
 * @param ctx          [action context]
 * @param action       [get parent control playlist action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t television_get_parent_control_playlist_start_cb(struct hey_action_ctx *ctx, struct television_get_parent_control_playlist_in *action, void **user_context);

/**
 * @brief get parent control playlist action send message of television service
 * @param ctx      [action context]
 * @param action   [get parent control playlist action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t television_get_parent_control_playlist_send(struct hey_action_ctx *ctx, struct television_get_parent_control_playlist_out *action);

/**
 * @brief get parent control playlist action stop of television service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t television_get_parent_control_playlist_stop(struct hey_action_ctx *ctx);

/**
 * @brief get parent control playlist action stop callback of television service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void television_get_parent_control_playlist_stop_cb(void *user_context);

/**
 * @brief get picture list action start callback of television service
 * @param ctx          [action context]
 * @param action       [get picture list action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t television_get_picture_list_start_cb(struct hey_action_ctx *ctx, struct television_get_picture_list_in *action, void **user_context);

/**
 * @brief get picture list action send message of television service
 * @param ctx      [action context]
 * @param action   [get picture list action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t television_get_picture_list_send(struct hey_action_ctx *ctx, struct television_get_picture_list_out *action);

/**
 * @brief get picture list action stop of television service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t television_get_picture_list_stop(struct hey_action_ctx *ctx);

/**
 * @brief get picture list action stop callback of television service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void television_get_picture_list_stop_cb(void *user_context);

/**
 * @brief get record list action start callback of television service
 * @param ctx          [action context]
 * @param action       [get record list action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t television_get_record_list_start_cb(struct hey_action_ctx *ctx, struct television_get_record_list_in *action, void **user_context);

/**
 * @brief get record list action send message of television service
 * @param ctx      [action context]
 * @param action   [get record list action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t television_get_record_list_send(struct hey_action_ctx *ctx, struct television_get_record_list_out *action);

/**
 * @brief get record list action stop of television service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t television_get_record_list_stop(struct hey_action_ctx *ctx);

/**
 * @brief get record list action stop callback of television service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void television_get_record_list_stop_cb(void *user_context);

/**
 * @brief del record info action start callback of television service
 * @param ctx          [action context]
 * @param action       [del record info action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t television_del_record_info_start_cb(struct hey_action_ctx *ctx, struct television_del_record_info_in *action, void **user_context);

/**
 * @brief del record info action send message of television service
 * @param ctx      [action context]
 * @param action   [del record info action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t television_del_record_info_send(struct hey_action_ctx *ctx, struct television_del_record_info_out *action);

/**
 * @brief del record info action stop of television service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t television_del_record_info_stop(struct hey_action_ctx *ctx);

/**
 * @brief del record info action stop callback of television service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void television_del_record_info_stop_cb(void *user_context);

/**
 * @brief del picture info action start callback of television service
 * @param ctx          [action context]
 * @param action       [del picture info action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t television_del_picture_info_start_cb(struct hey_action_ctx *ctx, struct television_del_picture_info_in *action, void **user_context);

/**
 * @brief del picture info action send message of television service
 * @param ctx      [action context]
 * @param action   [del picture info action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t television_del_picture_info_send(struct hey_action_ctx *ctx, struct television_del_picture_info_out *action);

/**
 * @brief del picture info action stop of television service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t television_del_picture_info_stop(struct hey_action_ctx *ctx);

/**
 * @brief del picture info action stop callback of television service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void television_del_picture_info_stop_cb(void *user_context);

/**
 * @brief get parent control time action start callback of television service
 * @param ctx          [action context]
 * @param action       [get parent control time action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t television_get_parent_control_time_start_cb(struct hey_action_ctx *ctx, struct television_get_parent_control_time_in *action, void **user_context);

/**
 * @brief get parent control time action send message of television service
 * @param ctx      [action context]
 * @param action   [get parent control time action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t television_get_parent_control_time_send(struct hey_action_ctx *ctx, struct television_get_parent_control_time_out *action);

/**
 * @brief get parent control time action stop of television service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t television_get_parent_control_time_stop(struct hey_action_ctx *ctx);

/**
 * @brief get parent control time action stop callback of television service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void television_get_parent_control_time_stop_cb(void *user_context);

/**
 * @brief remain in parent control action start callback of television service
 * @param ctx          [action context]
 * @param action       [remain in parent control action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t television_remain_in_parent_control_start_cb(struct hey_action_ctx *ctx, struct television_remain_in_parent_control_in *action, void **user_context);

/**
 * @brief remain in parent control action send message of television service
 * @param ctx      [action context]
 * @param action   [remain in parent control action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t television_remain_in_parent_control_send(struct hey_action_ctx *ctx, struct television_remain_in_parent_control_out *action);

/**
 * @brief remain in parent control action stop of television service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t television_remain_in_parent_control_stop(struct hey_action_ctx *ctx);

/**
 * @brief remain in parent control action stop callback of television service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void television_remain_in_parent_control_stop_cb(void *user_context);

/**
 * @brief record notify notify of television service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t television_record_notify_notify(struct television_event_record_notify *event, struct hey_event_notify_attr *attr);

/**
 * @brief record notify notify result callback of television service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void television_record_notify_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief channel list change notify of television service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t television_channel_list_change_notify(struct television_event_channel_list_change *event, struct hey_event_notify_attr *attr);

/**
 * @brief channel list change notify result callback of television service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void television_channel_list_change_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief parent controls mode start notify of television service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t television_parent_controls_mode_start_notify(struct television_event_parent_controls_mode_start *event, struct hey_event_notify_attr *attr);

/**
 * @brief parent controls mode start notify result callback of television service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void television_parent_controls_mode_start_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief parent controls mode stop notify of television service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t television_parent_controls_mode_stop_notify(struct television_event_parent_controls_mode_stop *event, struct hey_event_notify_attr *attr);

/**
 * @brief parent controls mode stop notify result callback of television service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void television_parent_controls_mode_stop_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* TELEVISION_SERVICE_H */
