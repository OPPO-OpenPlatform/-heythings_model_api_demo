/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: ava.proto */

#ifndef AVA_SERVICE_H
#define AVA_SERVICE_H

#include "hey/types.h"

struct ava_start_ava_in {
    char __place_holder__; // make compiler happy
};

struct ava_start_ava_out {
    char __place_holder__; // make compiler happy
};

struct ava_stop_ava_in {
    char __place_holder__; // make compiler happy
};

struct ava_stop_ava_out {
    char __place_holder__; // make compiler happy
};

enum AVA_PROPERTY {
    AVA_PROPERTY_POWER = 1,
    AVA_PROPERTY_ALARMSTATE = 2
};

enum AVA_ACTION {
    AVA_ACTION_START_AVA = 3,
    AVA_ACTION_STOP_AVA = 4
};

struct ava_properties {
    bool power;
    bool alarmstate;
};

/**
 * @brief ava service initialization
 * @param properties [ava service properties]
 * @return int32_t   [initialize result]
*/
int32_t ava_service_init(const struct ava_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of ava service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t ava_properties_write_cb(size_t count, uint32_t *enumerate, struct ava_properties *properties);

/**
 * @brief update properties of ava service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t ava_properties_update(size_t count, uint32_t *enumerate, struct ava_properties *properties);

/**
 * @brief start ava action start callback of ava service
 * @param ctx          [action context]
 * @param action       [start ava action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t ava_start_ava_start_cb(struct hey_action_ctx *ctx, struct ava_start_ava_in *action, void **user_context);

/**
 * @brief start ava action send message of ava service
 * @param ctx      [action context]
 * @param action   [start ava action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t ava_start_ava_send(struct hey_action_ctx *ctx, struct ava_start_ava_out *action);

/**
 * @brief start ava action stop of ava service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t ava_start_ava_stop(struct hey_action_ctx *ctx);

/**
 * @brief start ava action stop callback of ava service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void ava_start_ava_stop_cb(void *user_context);

/**
 * @brief stop ava action start callback of ava service
 * @param ctx          [action context]
 * @param action       [stop ava action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t ava_stop_ava_start_cb(struct hey_action_ctx *ctx, struct ava_stop_ava_in *action, void **user_context);

/**
 * @brief stop ava action send message of ava service
 * @param ctx      [action context]
 * @param action   [stop ava action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t ava_stop_ava_send(struct hey_action_ctx *ctx, struct ava_stop_ava_out *action);

/**
 * @brief stop ava action stop of ava service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t ava_stop_ava_stop(struct hey_action_ctx *ctx);

/**
 * @brief stop ava action stop callback of ava service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void ava_stop_ava_stop_cb(void *user_context);

#endif /* AVA_SERVICE_H */
