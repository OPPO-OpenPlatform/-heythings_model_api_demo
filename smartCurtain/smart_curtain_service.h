/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: smartCurtain.proto */

#ifndef SMART_CURTAIN_SERVICE_H
#define SMART_CURTAIN_SERVICE_H

#include "hey/types.h"

enum smart_curtain_open_close_state {
    SMART_CURTAIN_OPEN_CLOSE_STATE_STATE_OPEN = 0,
    SMART_CURTAIN_OPEN_CLOSE_STATE_STATE_CLOSE = 1,
    SMART_CURTAIN_OPEN_CLOSE_STATE_STATE_OPENING = 2,
    SMART_CURTAIN_OPEN_CLOSE_STATE_STATE_CLOSING = 3,
    SMART_CURTAIN_OPEN_CLOSE_STATE_STATE_STOP = 4
};

struct smart_curtain_open_in {
    char __place_holder__; // make compiler happy
};

struct smart_curtain_open_out {
    char __place_holder__; // make compiler happy
};

struct smart_curtain_close_in {
    char __place_holder__; // make compiler happy
};

struct smart_curtain_close_out {
    char __place_holder__; // make compiler happy
};

enum SMART_CURTAIN_PROPERTY {
    SMART_CURTAIN_PROPERTY_POWER = 1,
    SMART_CURTAIN_PROPERTY_OPENCLOSESTATE = 2,
    SMART_CURTAIN_PROPERTY_OPENLEVEL = 3
};

enum SMART_CURTAIN_ACTION {
    SMART_CURTAIN_ACTION_OPEN = 4,
    SMART_CURTAIN_ACTION_CLOSE = 5
};

struct smart_curtain_properties {
    bool power;
    enum smart_curtain_open_close_state openclosestate;
    uint32_t openlevel;
};

/**
 * @brief smart curtain service initialization
 * @param properties [smart curtain service properties]
 * @return int32_t   [initialize result]
*/
int32_t smart_curtain_service_init(const struct smart_curtain_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of smart curtain service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t smart_curtain_properties_write_cb(size_t count, uint32_t *enumerate, struct smart_curtain_properties *properties);

/**
 * @brief update properties of smart curtain service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t smart_curtain_properties_update(size_t count, uint32_t *enumerate, struct smart_curtain_properties *properties);

/**
 * @brief open action start callback of smart curtain service
 * @param ctx          [action context]
 * @param action       [open action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t smart_curtain_open_start_cb(struct hey_action_ctx *ctx, struct smart_curtain_open_in *action, void **user_context);

/**
 * @brief open action send message of smart curtain service
 * @param ctx      [action context]
 * @param action   [open action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t smart_curtain_open_send(struct hey_action_ctx *ctx, struct smart_curtain_open_out *action);

/**
 * @brief open action stop of smart curtain service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t smart_curtain_open_stop(struct hey_action_ctx *ctx);

/**
 * @brief open action stop callback of smart curtain service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void smart_curtain_open_stop_cb(void *user_context);

/**
 * @brief close action start callback of smart curtain service
 * @param ctx          [action context]
 * @param action       [close action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t smart_curtain_close_start_cb(struct hey_action_ctx *ctx, struct smart_curtain_close_in *action, void **user_context);

/**
 * @brief close action send message of smart curtain service
 * @param ctx      [action context]
 * @param action   [close action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t smart_curtain_close_send(struct hey_action_ctx *ctx, struct smart_curtain_close_out *action);

/**
 * @brief close action stop of smart curtain service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t smart_curtain_close_stop(struct hey_action_ctx *ctx);

/**
 * @brief close action stop callback of smart curtain service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void smart_curtain_close_stop_cb(void *user_context);

#endif /* SMART_CURTAIN_SERVICE_H */
