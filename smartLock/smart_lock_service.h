/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: smartLock.proto */

#ifndef SMART_LOCK_SERVICE_H
#define SMART_LOCK_SERVICE_H

#include "hey/types.h"

enum lock_user_list_user_type {
  /*
   *管理员
   */
    LOCK_USER_LIST_USER_TYPE_ADMINISTRATOR = 0,
  /*
   *普通用户
   */
    LOCK_USER_LIST_USER_TYPE_NORMALUSER = 1
};

enum unlock_inside_method {
  /*
   *感应开门
   */
    UNLOCK_INSIDE_METHOD_SCENSING = 0,
  /*
   *按键开门
   */
    UNLOCK_INSIDE_METHOD_BUTTON = 1
};

enum event_unlock_user_type {
  /*
   *管理员
   */
    EVENT_UNLOCK_USER_TYPE_ADMINISTRATOR = 0,
  /*
   *普通用户
   */
    EVENT_UNLOCK_USER_TYPE_NORMALUSER = 1,
  /*
   *临时用户
   */
    EVENT_UNLOCK_USER_TYPE_TEMPORARYUSER = 2
};

enum smart_lock_lock_method {
    SMART_LOCK_LOCK_METHOD_PASSWORD = 0,
    SMART_LOCK_LOCK_METHOD_FINGERPRINT = 1,
    SMART_LOCK_LOCK_METHOD_CARD = 2,
    SMART_LOCK_LOCK_METHOD_IRIS = 3,
    SMART_LOCK_LOCK_METHOD_FACE = 4,
  /*
   *一次性密码
   */
    SMART_LOCK_LOCK_METHOD_ONETIME_PASSWORD = 5
};

enum smart_lock_code {
    SMART_LOCK_CODE_SUCCESS = 0,
  /*
   * IncorrectTimestamp: 时间戳不正确
   */
    SMART_LOCK_CODE_INCORRECT_TIMESTAMP = 1,
  /*
   * DecryptionFailed: 数据解密失败
   */
    SMART_LOCK_CODE_DECRYTION_FAILED = 2,
  /*
   * 请求参数不正确
   */
    SMART_LOCK_CODE_ILLEGAL_PARAM = 3,
  /*
   * 其它设备内部错误
   */
    SMART_LOCK_CODE_INTERNAL_ERROR = 4,
  /*
   * PinAlreadyCreated： PIN码已创建
   */
    SMART_LOCK_CODE_PIN_ALREADY_CREATED = 5,
  /*
   * MaxAuthenticateLimitReached: 最大PIN码认证限制
   */
    SMART_LOCK_CODE_MAX_AUTHENTICATE_LIMIT_REACHED = 6,
  /*
   * SecurityPinNotCreated: PIN码未创建
   */
    SMART_LOCK_CODE_PIN_NOT_CREATED = 7
};

struct smart_lock_lock_user_list {
    enum lock_user_list_user_type usertype;
    enum smart_lock_lock_method lockmethod;
    char *number;
};

struct smart_lock_ec_jpake_start_in {
    struct hey_binary_data clientroundone;
};

struct smart_lock_ec_jpake_start_out {
    enum smart_lock_code code;
    struct hey_binary_data serverroundone;
    struct hey_binary_data serverroundtwo;
};

struct smart_lock_ec_jpake_get_device_key_in {
    struct hey_binary_data clientroundone;
    struct hey_binary_data clientroundtwo;
    struct hey_binary_data encryptedreq;
    struct hey_binary_data iv;
};

struct smart_lock_ec_jpake_get_device_key_out {
    enum smart_lock_code code;
    struct hey_binary_data encryptedresponse;
    struct hey_binary_data iv;
    struct hey_binary_data label;
};

struct smart_lock_event_lock {
    char __place_holder__; // make compiler happy
};

struct unlock_outside_detail {
    enum event_unlock_user_type usertype;
    uint32_t userid;
    enum smart_lock_lock_method method;
};

struct event_unlock_unlock_outside {
    size_t n_detail;
    struct unlock_outside_detail **detail;
};

struct event_unlock_unlock_inside {
    enum unlock_inside_method method;
};

struct event_unlock_mechanical {
    char __place_holder__; // make compiler happy
};

enum smart_lock_event_unlock_door_open_direction {
    SMART_LOCK_EVENT_UNLOCK_DOOR_OPEN_DIRECTION_NOT_SET = 0,
    SMART_LOCK_EVENT_UNLOCK_DOOR_OPEN_DIRECTION_MECHANICAL = 1,
    SMART_LOCK_EVENT_UNLOCK_DOOR_OPEN_DIRECTION_UNLOCKOUTSIDE = 2,
    SMART_LOCK_EVENT_UNLOCK_DOOR_OPEN_DIRECTION_UNLOCKINSIDE = 3
};

struct smart_lock_event_unlock {
    enum smart_lock_event_unlock_door_open_direction door_open_direction_case;
    union {
        struct event_unlock_mechanical *mechanical;
        struct event_unlock_unlock_outside *unlockoutside;
        struct event_unlock_unlock_inside *unlockinside;
    };
};

struct smart_lock_event_antiprying {
    char __place_holder__; // make compiler happy
};

struct smart_lock_event_antitheft {
    char __place_holder__; // make compiler happy
};

struct smart_lock_event_door_not_closed {
    char __place_holder__; // make compiler happy
};

struct smart_lock_event_unlocked {
    char __place_holder__; // make compiler happy
};

struct smart_lock_event_arming_trigger {
    char __place_holder__; // make compiler happy
};

struct smart_lock_create_security_pin_in {
    struct hey_binary_data encryptedreq;
    uint64_t ts;
    struct hey_binary_data iv;
    struct hey_binary_data label;
};

struct smart_lock_create_security_pin_out {
    enum smart_lock_code code;
    uint64_t lastupdatetime;
};

struct smart_lock_set_security_pin_in {
    struct hey_binary_data encryptedreq;
    uint64_t ts;
    struct hey_binary_data iv;
    struct hey_binary_data label;
};

struct smart_lock_set_security_pin_out {
    enum smart_lock_code code;
    struct hey_binary_data encryptedresp;
};

struct smart_lock_event_doorbell_ringing {
    char *recordurl;
    char *thumbnaiurl;
};

struct smart_lock_event_start_arming {
    char __place_holder__; // make compiler happy
};

enum SMART_LOCK_PROPERTY {
    SMART_LOCK_PROPERTY_LOCKSTATUS = 1,
    SMART_LOCK_PROPERTY_SOUNDVOLUME = 2,
    SMART_LOCK_PROPERTY_LOCKUSERLIST = 3,
    SMART_LOCK_PROPERTY_LOCKDOUBLEVERIFYENABLED = 4,
    SMART_LOCK_PROPERTY_SECURITYPINUPDATETIME = 5,
    SMART_LOCK_PROPERTY_SUPPORTTEMPORARYPASSWORD = 18
};

enum SMART_LOCK_ACTION {
    SMART_LOCK_ACTION_EC_JPAKE_GET_DEVICE_KEY = 8,
    SMART_LOCK_ACTION_CREATE_SECURITY_PIN = 16,
    SMART_LOCK_ACTION_SET_SECURITY_PIN = 17,
    SMART_LOCK_ACTION_EC_JPAKE_START = 19
};

enum SMART_LOCK_EVENT {
    SMART_LOCK_EVENT_LOCK = 9,
    SMART_LOCK_EVENT_UNLOCK = 10,
    SMART_LOCK_EVENT_ANTIPRYING = 11,
    SMART_LOCK_EVENT_ANTITHEFT = 12,
    SMART_LOCK_EVENT_DOOR_NOT_CLOSED = 13,
    SMART_LOCK_EVENT_UNLOCKED = 14,
    SMART_LOCK_EVENT_ARMING_TRIGGER = 15,
    SMART_LOCK_EVENT_DOORBELL_RINGING = 20,
    SMART_LOCK_EVENT_START_ARMING = 21
};

struct smart_lock_properties {
    bool lockstatus;
    uint32_t soundvolume;
    size_t n_lockuserlist;
    struct hey_array_node **lockuserlist;
    bool lockdoubleverifyenabled;
    uint64_t securitypinupdatetime;
    bool supporttemporarypassword;
};

/**
 * @brief smart lock service initialization
 * @param properties [smart lock service properties]
 * @return int32_t   [initialize result]
*/
int32_t smart_lock_service_init(const struct smart_lock_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
struct smart_lock_lock_user_list *smart_lock_lock_user_list_unpack(const uint8_t *data, size_t len);
void smart_lock_lock_user_list_free_unpacked(struct smart_lock_lock_user_list *data);
// less than 0 means failure
int32_t smart_lock_lock_user_list_get_packed_size(const struct smart_lock_lock_user_list *data);
// less than 0 means failure
int32_t smart_lock_lock_user_list_pack(const struct smart_lock_lock_user_list *data, uint8_t *out);

/**
 * @brief properties write callback of smart lock service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t smart_lock_properties_write_cb(size_t count, uint32_t *enumerate, struct smart_lock_properties *properties);

/**
 * @brief arrayNode properties add callback of smart lock service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t smart_lock_lockuserlist_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of smart lock service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t smart_lock_lockuserlist_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of smart lock service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t smart_lock_lockuserlist_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief update properties of smart lock service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t smart_lock_properties_update(size_t count, uint32_t *enumerate, struct smart_lock_properties *properties);

/**
 * @brief ec jpake get device key action start callback of smart lock service
 * @param ctx          [action context]
 * @param action       [ec jpake get device key action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t smart_lock_ec_jpake_get_device_key_start_cb(struct hey_action_ctx *ctx, struct smart_lock_ec_jpake_get_device_key_in *action, void **user_context);

/**
 * @brief ec jpake get device key action send message of smart lock service
 * @param ctx      [action context]
 * @param action   [ec jpake get device key action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t smart_lock_ec_jpake_get_device_key_send(struct hey_action_ctx *ctx, struct smart_lock_ec_jpake_get_device_key_out *action);

/**
 * @brief ec jpake get device key action stop of smart lock service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t smart_lock_ec_jpake_get_device_key_stop(struct hey_action_ctx *ctx);

/**
 * @brief ec jpake get device key action stop callback of smart lock service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void smart_lock_ec_jpake_get_device_key_stop_cb(void *user_context);

/**
 * @brief create security pin action start callback of smart lock service
 * @param ctx          [action context]
 * @param action       [create security pin action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t smart_lock_create_security_pin_start_cb(struct hey_action_ctx *ctx, struct smart_lock_create_security_pin_in *action, void **user_context);

/**
 * @brief create security pin action send message of smart lock service
 * @param ctx      [action context]
 * @param action   [create security pin action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t smart_lock_create_security_pin_send(struct hey_action_ctx *ctx, struct smart_lock_create_security_pin_out *action);

/**
 * @brief create security pin action stop of smart lock service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t smart_lock_create_security_pin_stop(struct hey_action_ctx *ctx);

/**
 * @brief create security pin action stop callback of smart lock service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void smart_lock_create_security_pin_stop_cb(void *user_context);

/**
 * @brief set security pin action start callback of smart lock service
 * @param ctx          [action context]
 * @param action       [set security pin action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t smart_lock_set_security_pin_start_cb(struct hey_action_ctx *ctx, struct smart_lock_set_security_pin_in *action, void **user_context);

/**
 * @brief set security pin action send message of smart lock service
 * @param ctx      [action context]
 * @param action   [set security pin action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t smart_lock_set_security_pin_send(struct hey_action_ctx *ctx, struct smart_lock_set_security_pin_out *action);

/**
 * @brief set security pin action stop of smart lock service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t smart_lock_set_security_pin_stop(struct hey_action_ctx *ctx);

/**
 * @brief set security pin action stop callback of smart lock service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void smart_lock_set_security_pin_stop_cb(void *user_context);

/**
 * @brief ec jpake start action start callback of smart lock service
 * @param ctx          [action context]
 * @param action       [ec jpake start action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t smart_lock_ec_jpake_start_start_cb(struct hey_action_ctx *ctx, struct smart_lock_ec_jpake_start_in *action, void **user_context);

/**
 * @brief ec jpake start action send message of smart lock service
 * @param ctx      [action context]
 * @param action   [ec jpake start action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t smart_lock_ec_jpake_start_send(struct hey_action_ctx *ctx, struct smart_lock_ec_jpake_start_out *action);

/**
 * @brief ec jpake start action stop of smart lock service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t smart_lock_ec_jpake_start_stop(struct hey_action_ctx *ctx);

/**
 * @brief ec jpake start action stop callback of smart lock service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void smart_lock_ec_jpake_start_stop_cb(void *user_context);

/**
 * @brief lock notify of smart lock service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t smart_lock_lock_notify(struct smart_lock_event_lock *event, struct hey_event_notify_attr *attr);

/**
 * @brief lock notify result callback of smart lock service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void smart_lock_lock_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief unlock notify of smart lock service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t smart_lock_unlock_notify(struct smart_lock_event_unlock *event, struct hey_event_notify_attr *attr);

/**
 * @brief unlock notify result callback of smart lock service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void smart_lock_unlock_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief antiprying notify of smart lock service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t smart_lock_antiprying_notify(struct smart_lock_event_antiprying *event, struct hey_event_notify_attr *attr);

/**
 * @brief antiprying notify result callback of smart lock service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void smart_lock_antiprying_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief antitheft notify of smart lock service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t smart_lock_antitheft_notify(struct smart_lock_event_antitheft *event, struct hey_event_notify_attr *attr);

/**
 * @brief antitheft notify result callback of smart lock service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void smart_lock_antitheft_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief door not closed notify of smart lock service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t smart_lock_door_not_closed_notify(struct smart_lock_event_door_not_closed *event, struct hey_event_notify_attr *attr);

/**
 * @brief door not closed notify result callback of smart lock service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void smart_lock_door_not_closed_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief unlocked notify of smart lock service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t smart_lock_unlocked_notify(struct smart_lock_event_unlocked *event, struct hey_event_notify_attr *attr);

/**
 * @brief unlocked notify result callback of smart lock service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void smart_lock_unlocked_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief arming trigger notify of smart lock service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t smart_lock_arming_trigger_notify(struct smart_lock_event_arming_trigger *event, struct hey_event_notify_attr *attr);

/**
 * @brief arming trigger notify result callback of smart lock service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void smart_lock_arming_trigger_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief doorbell ringing notify of smart lock service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t smart_lock_doorbell_ringing_notify(struct smart_lock_event_doorbell_ringing *event, struct hey_event_notify_attr *attr);

/**
 * @brief doorbell ringing notify result callback of smart lock service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void smart_lock_doorbell_ringing_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief start arming notify of smart lock service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t smart_lock_start_arming_notify(struct smart_lock_event_start_arming *event, struct hey_event_notify_attr *attr);

/**
 * @brief start arming notify result callback of smart lock service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void smart_lock_start_arming_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* SMART_LOCK_SERVICE_H */
