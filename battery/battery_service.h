/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: battery.proto */

#ifndef BATTERY_SERVICE_H
#define BATTERY_SERVICE_H

#include "hey/types.h"

struct battery_battery_info {
    uint32_t capacity;
    uint32_t voltage;
    uint32_t electricengergy;
};

struct battery_event_low_battery {
    uint32_t batterylevel;
};

struct battery_start_charge_in {
    char __place_holder__; // make compiler happy
};

struct battery_start_charge_out {
    char __place_holder__; // make compiler happy
};

struct battery_stop_charge_in {
    char __place_holder__; // make compiler happy
};

struct battery_stop_charge_out {
    char __place_holder__; // make compiler happy
};

struct battery_event_charging_end {
    char __place_holder__; // make compiler happy
};

struct battery_event_charging_start {
    char __place_holder__; // make compiler happy
};

enum BATTERY_PROPERTY {
    BATTERY_PROPERTY_BATTERYLEVEL = 1,
    BATTERY_PROPERTY_BATTERYCHARGING = 2,
    BATTERY_PROPERTY_CHARGETIMEREMAINING = 3,
    BATTERY_PROPERTY_BATTERYTHRESHOLD = 4,
    BATTERY_PROPERTY_BATTERYINFO = 5,
    BATTERY_PROPERTY_STOPCHARGINGTHRESHOLD = 6,
    BATTERY_PROPERTY_LOWBATTERYSTATUS = 10,
    BATTERY_PROPERTY_READYTOCHARGE = 13
};

enum BATTERY_ACTION {
    BATTERY_ACTION_START_CHARGE = 7,
    BATTERY_ACTION_STOP_CHARGE = 8
};

enum BATTERY_EVENT {
    BATTERY_EVENT_LOW_BATTERY = 9,
    BATTERY_EVENT_CHARGING_END = 11,
    BATTERY_EVENT_CHARGING_START = 12
};

struct battery_properties {
    uint32_t batterylevel;
    bool batterycharging;
    uint32_t chargetimeremaining;
    uint32_t batterythreshold;
    struct battery_battery_info *batteryinfo;
    uint32_t stopchargingthreshold;
    bool lowbatterystatus;
    bool readytocharge;
};

/**
 * @brief battery service initialization
 * @param properties [battery service properties]
 * @return int32_t   [initialize result]
*/
int32_t battery_service_init(const struct battery_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of battery service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t battery_properties_write_cb(size_t count, uint32_t *enumerate, struct battery_properties *properties);

/**
 * @brief update properties of battery service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t battery_properties_update(size_t count, uint32_t *enumerate, struct battery_properties *properties);

/**
 * @brief start charge action start callback of battery service
 * @param ctx          [action context]
 * @param action       [start charge action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t battery_start_charge_start_cb(struct hey_action_ctx *ctx, struct battery_start_charge_in *action, void **user_context);

/**
 * @brief start charge action send message of battery service
 * @param ctx      [action context]
 * @param action   [start charge action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t battery_start_charge_send(struct hey_action_ctx *ctx, struct battery_start_charge_out *action);

/**
 * @brief start charge action stop of battery service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t battery_start_charge_stop(struct hey_action_ctx *ctx);

/**
 * @brief start charge action stop callback of battery service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void battery_start_charge_stop_cb(void *user_context);

/**
 * @brief stop charge action start callback of battery service
 * @param ctx          [action context]
 * @param action       [stop charge action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t battery_stop_charge_start_cb(struct hey_action_ctx *ctx, struct battery_stop_charge_in *action, void **user_context);

/**
 * @brief stop charge action send message of battery service
 * @param ctx      [action context]
 * @param action   [stop charge action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t battery_stop_charge_send(struct hey_action_ctx *ctx, struct battery_stop_charge_out *action);

/**
 * @brief stop charge action stop of battery service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t battery_stop_charge_stop(struct hey_action_ctx *ctx);

/**
 * @brief stop charge action stop callback of battery service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void battery_stop_charge_stop_cb(void *user_context);

/**
 * @brief low battery notify of battery service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t battery_low_battery_notify(struct battery_event_low_battery *event, struct hey_event_notify_attr *attr);

/**
 * @brief low battery notify result callback of battery service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void battery_low_battery_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief charging end notify of battery service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t battery_charging_end_notify(struct battery_event_charging_end *event, struct hey_event_notify_attr *attr);

/**
 * @brief charging end notify result callback of battery service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void battery_charging_end_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief charging start notify of battery service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t battery_charging_start_notify(struct battery_event_charging_start *event, struct hey_event_notify_attr *attr);

/**
 * @brief charging start notify result callback of battery service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void battery_charging_start_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* BATTERY_SERVICE_H */
