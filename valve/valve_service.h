/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: valve.proto */

#ifndef VALVE_SERVICE_H
#define VALVE_SERVICE_H

#include "hey/types.h"

enum VALVE_PROPERTY {
    VALVE_PROPERTY_POWER = 1,
    VALVE_PROPERTY_CURRENTPRES1 = 2,
    VALVE_PROPERTY_VLVOPENING = 3,
    VALVE_PROPERTY_VLVFEEDBACK = 4
};

struct valve_properties {
    bool power;
    uint32_t currentpres1;
    uint32_t vlvopening;
    uint32_t vlvfeedback;
};

/**
 * @brief valve service initialization
 * @param properties [valve service properties]
 * @return int32_t   [initialize result]
*/
int32_t valve_service_init(const struct valve_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of valve service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t valve_properties_write_cb(size_t count, uint32_t *enumerate, struct valve_properties *properties);

/**
 * @brief update properties of valve service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t valve_properties_update(size_t count, uint32_t *enumerate, struct valve_properties *properties);

#endif /* VALVE_SERVICE_H */
