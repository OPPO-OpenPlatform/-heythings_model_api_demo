/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: waterDispenser.proto */

#ifndef WATER_DISPENSER_SERVICE_H
#define WATER_DISPENSER_SERVICE_H

#include "hey/types.h"

enum water_dispenser_water_type {
    WATER_DISPENSER_WATER_TYPE_NONE = 0,
    WATER_DISPENSER_WATER_TYPE_COLD_WATER = 1,
    WATER_DISPENSER_WATER_TYPE_HOT_WATER = 2,
    WATER_DISPENSER_WATER_TYPE_AMBINENT = 3,
    WATER_DISPENSER_WATER_TYPE_ICE_WATER = 4
};

enum water_dispenser_machine_status {
    WATER_DISPENSER_MACHINE_STATUS_IDLE = 0,
    WATER_DISPENSER_MACHINE_STATUS_PREACTIVE = 1,
    WATER_DISPENSER_MACHINE_STATUS_ACTIVE = 2,
    WATER_DISPENSER_MACHINE_STATUS_STOPED = 3,
    WATER_DISPENSER_MACHINE_STATUS_ERROR = 4
};

enum water_dispenser_heat_status {
    WATER_DISPENSER_HEAT_STATUS_HEATSTATUS_NONE = 0,
    WATER_DISPENSER_HEAT_STATUS_HEATSTATUS_HEAT = 1,
    WATER_DISPENSER_HEAT_STATUS_HEATSTATUS_PRESERVATION = 2
};

enum water_dispenser_cool_status {
    WATER_DISPENSER_COOL_STATUS_COOLSTATUS_NONE = 0,
    WATER_DISPENSER_COOL_STATUS_COOLSTATUS_COOL = 1,
    WATER_DISPENSER_COOL_STATUS_COOLSTATUS_PRESERVATION = 2
};

enum water_dispenser_sterilization_period {
    WATER_DISPENSER_STERILIZATION_PERIOD_PERIOD_NONE = 0,
    WATER_DISPENSER_STERILIZATION_PERIOD_PERIOD_1 = 1,
    WATER_DISPENSER_STERILIZATION_PERIOD_PERIOD_2 = 2,
    WATER_DISPENSER_STERILIZATION_PERIOD_PERIOD_3 = 3
};

enum water_dispenser_operation_mode {
    WATER_DISPENSER_OPERATION_MODE_STOP = 0,
    WATER_DISPENSER_OPERATION_MODE_PAUSE = 1,
    WATER_DISPENSER_OPERATION_MODE_RESUME = 2,
    WATER_DISPENSER_OPERATION_MODE_CANCEL = 3,
    WATER_DISPENSER_OPERATION_MODE_START = 4
};

struct water_dispenser_user_define_temp {
    bool status;
    uint32_t temperature;
};

struct water_dispenser_water_quantity {
    uint32_t quantity;
};

enum WATER_DISPENSER_PROPERTY {
    WATER_DISPENSER_PROPERTY_POWER = 1,
    WATER_DISPENSER_PROPERTY_WATERTYPE = 2,
    WATER_DISPENSER_PROPERTY_SCREENDISPLAYENABLED = 3,
    WATER_DISPENSER_PROPERTY_HEATENABLED = 4,
    WATER_DISPENSER_PROPERTY_HEATSTATUS = 5,
    WATER_DISPENSER_PROPERTY_COOLENABLED = 6,
    WATER_DISPENSER_PROPERTY_COOLSTATUS = 7,
    WATER_DISPENSER_PROPERTY_HEATPRESERVATIONTIME = 8,
    WATER_DISPENSER_PROPERTY_USERDEFINETEMP = 9,
    WATER_DISPENSER_PROPERTY_WATERQUANTITY = 10,
    WATER_DISPENSER_PROPERTY_HEATTIME = 11,
    WATER_DISPENSER_PROPERTY_MACHINESTATUS = 12,
    WATER_DISPENSER_PROPERTY_CHILDLOCKENABLED = 13,
    WATER_DISPENSER_PROPERTY_STERILIZATIONENABLED = 14,
    WATER_DISPENSER_PROPERTY_STERILIZATIONLEFTDAYS = 15,
    WATER_DISPENSER_PROPERTY_STERILIZATIONPERIOD = 16,
    WATER_DISPENSER_PROPERTY_STERILIZATIONPERCENT = 17,
    WATER_DISPENSER_PROPERTY_WATERFLOWSTATUS = 18,
    WATER_DISPENSER_PROPERTY_OPERATIONMODE = 19,
    WATER_DISPENSER_PROPERTY_AUTOSEASON = 20,
    WATER_DISPENSER_PROPERTY_TEATEMP = 21,
    WATER_DISPENSER_PROPERTY_COFFEETEMP = 22,
    WATER_DISPENSER_PROPERTY_HONEYTEMP = 23,
    WATER_DISPENSER_PROPERTY_MILKTEMP = 24,
    WATER_DISPENSER_PROPERTY_CURRENTTEMPERATURE = 25
};

struct water_dispenser_properties {
    bool power;
    enum water_dispenser_water_type watertype;
    bool screendisplayenabled;
    bool heatenabled;
    enum water_dispenser_heat_status heatstatus;
    bool coolenabled;
    enum water_dispenser_cool_status coolstatus;
    uint32_t heatpreservationtime;
    size_t n_userdefinetemp;
    struct hey_array_node **userdefinetemp;
    size_t n_waterquantity;
    struct hey_array_node **waterquantity;
    uint32_t heattime;
    enum water_dispenser_machine_status machinestatus;
    bool childlockenabled;
    bool sterilizationenabled;
    uint32_t sterilizationleftdays;
    enum water_dispenser_sterilization_period sterilizationperiod;
    uint32_t sterilizationpercent;
    bool waterflowstatus;
    enum water_dispenser_operation_mode operationmode;
    bool autoseason;
    uint32_t teatemp;
    uint32_t coffeetemp;
    uint32_t honeytemp;
    uint32_t milktemp;
    uint32_t currenttemperature;
};

/**
 * @brief water dispenser service initialization
 * @param properties [water dispenser service properties]
 * @return int32_t   [initialize result]
*/
int32_t water_dispenser_service_init(const struct water_dispenser_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
struct water_dispenser_user_define_temp *water_dispenser_user_define_temp_unpack(const uint8_t *data, size_t len);
void water_dispenser_user_define_temp_free_unpacked(struct water_dispenser_user_define_temp *data);
// less than 0 means failure
int32_t water_dispenser_user_define_temp_get_packed_size(const struct water_dispenser_user_define_temp *data);
// less than 0 means failure
int32_t water_dispenser_user_define_temp_pack(const struct water_dispenser_user_define_temp *data, uint8_t *out);

struct water_dispenser_water_quantity *water_dispenser_water_quantity_unpack(const uint8_t *data, size_t len);
void water_dispenser_water_quantity_free_unpacked(struct water_dispenser_water_quantity *data);
// less than 0 means failure
int32_t water_dispenser_water_quantity_get_packed_size(const struct water_dispenser_water_quantity *data);
// less than 0 means failure
int32_t water_dispenser_water_quantity_pack(const struct water_dispenser_water_quantity *data, uint8_t *out);

/**
 * @brief properties write callback of water dispenser service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t water_dispenser_properties_write_cb(size_t count, uint32_t *enumerate, struct water_dispenser_properties *properties);

/**
 * @brief arrayNode properties add callback of water dispenser service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t water_dispenser_userdefinetemp_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of water dispenser service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t water_dispenser_userdefinetemp_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of water dispenser service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t water_dispenser_userdefinetemp_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief arrayNode properties add callback of water dispenser service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t water_dispenser_waterquantity_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of water dispenser service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t water_dispenser_waterquantity_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of water dispenser service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t water_dispenser_waterquantity_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief update properties of water dispenser service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t water_dispenser_properties_update(size_t count, uint32_t *enumerate, struct water_dispenser_properties *properties);

#endif /* WATER_DISPENSER_SERVICE_H */
