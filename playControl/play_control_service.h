/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: playControl.proto */

#ifndef PLAY_CONTROL_SERVICE_H
#define PLAY_CONTROL_SERVICE_H

#include "hey/types.h"

enum play_control_action_direction_key_control_key_type {
    PLAY_CONTROL_ACTION_DIRECTION_KEY_CONTROL_KEY_TYPE_UP = 0,
    PLAY_CONTROL_ACTION_DIRECTION_KEY_CONTROL_KEY_TYPE_DOWN = 1,
    PLAY_CONTROL_ACTION_DIRECTION_KEY_CONTROL_KEY_TYPE_LEFT = 2,
    PLAY_CONTROL_ACTION_DIRECTION_KEY_CONTROL_KEY_TYPE_RIGHT = 3
};

enum play_control_action_out_smart_home_key_control_code {
    PLAY_CONTROL_ACTION_OUT_SMART_HOME_KEY_CONTROL_CODE_SUCCESS = 0,
    PLAY_CONTROL_ACTION_OUT_SMART_HOME_KEY_CONTROL_CODE_NOT_INSTALLED = 1
};

enum play_control_action_focus_adjust_direction {
    PLAY_CONTROL_ACTION_FOCUS_ADJUST_DIRECTION_SHORTEN = 0,
    PLAY_CONTROL_ACTION_FOCUS_ADJUST_DIRECTION_LENGTHEN = 1
};

enum play_control_action_out_screen_cast_key_control_code {
    PLAY_CONTROL_ACTION_OUT_SCREEN_CAST_KEY_CONTROL_CODE_SUCCESS = 0,
    PLAY_CONTROL_ACTION_OUT_SCREEN_CAST_KEY_CONTROL_CODE_NOT_INSTALLED = 1
};

enum play_control_action_out_remote_key_control_code {
    PLAY_CONTROL_ACTION_OUT_REMOTE_KEY_CONTROL_CODE_SUCCESS = 0,
    PLAY_CONTROL_ACTION_OUT_REMOTE_KEY_CONTROL_CODE_NOT_INSTALLED = 1
};

struct play_control_next_track_in {
    char __place_holder__; // make compiler happy
};

struct play_control_next_track_out {
    char __place_holder__; // make compiler happy
};

struct play_control_previous_track_in {
    char __place_holder__; // make compiler happy
};

struct play_control_previous_track_out {
    char __place_holder__; // make compiler happy
};

struct play_control_stop_in {
    char __place_holder__; // make compiler happy
};

struct play_control_stop_out {
    char __place_holder__; // make compiler happy
};

struct play_control_play_in {
    char *url;
};

struct play_control_play_out {
    char __place_holder__; // make compiler happy
};

struct play_control_pause_in {
    char __place_holder__; // make compiler happy
};

struct play_control_pause_out {
    char __place_holder__; // make compiler happy
};

struct play_control_resume_in {
    char __place_holder__; // make compiler happy
};

struct play_control_resume_out {
    char __place_holder__; // make compiler happy
};

struct play_control_record_start_in {
    char __place_holder__; // make compiler happy
};

struct play_control_record_start_out {
    char __place_holder__; // make compiler happy
};

struct play_control_forward_in {
    uint32_t time;
};

struct play_control_forward_out {
    char __place_holder__; // make compiler happy
};

struct play_control_rewind_in {
    uint32_t time;
};

struct play_control_rewind_out {
    char __place_holder__; // make compiler happy
};

struct play_control_search_previous_in {
    char __place_holder__; // make compiler happy
};

struct play_control_search_previous_out {
    char __place_holder__; // make compiler happy
};

struct play_control_search_next_in {
    char __place_holder__; // make compiler happy
};

struct play_control_search_next_out {
    char __place_holder__; // make compiler happy
};

struct play_control_screen_capture_in {
    char __place_holder__; // make compiler happy
};

struct play_control_screen_capture_out {
    char *filename;
};

struct play_control_record_end_in {
    char __place_holder__; // make compiler happy
};

struct play_control_record_end_out {
    char *thumbnailfilename;
};

struct play_control_direction_key_control_in {
    enum play_control_action_direction_key_control_key_type keytype;
    uint32_t cursormovement;
};

struct play_control_direction_key_control_out {
    char __place_holder__; // make compiler happy
};

struct play_control_home_key_control_in {
    char __place_holder__; // make compiler happy
};

struct play_control_home_key_control_out {
    char __place_holder__; // make compiler happy
};

struct play_control_return_key_control_in {
    char __place_holder__; // make compiler happy
};

struct play_control_return_key_control_out {
    char __place_holder__; // make compiler happy
};

struct play_control_menu_key_control_in {
    char __place_holder__; // make compiler happy
};

struct play_control_menu_key_control_out {
    char __place_holder__; // make compiler happy
};

struct play_control_set_key_control_in {
    char __place_holder__; // make compiler happy
};

struct play_control_set_key_control_out {
    char __place_holder__; // make compiler happy
};

struct play_control_smart_home_key_control_in {
    char __place_holder__; // make compiler happy
};

struct play_control_smart_home_key_control_out {
    enum play_control_action_out_smart_home_key_control_code code;
};

struct play_control_speech_key_control_in {
    char __place_holder__; // make compiler happy
};

struct play_control_speech_key_control_out {
    char __place_holder__; // make compiler happy
};

struct play_control_confirm_key_control_in {
    char __place_holder__; // make compiler happy
};

struct play_control_confirm_key_control_out {
    char __place_holder__; // make compiler happy
};

struct play_control_focus_adjust_in {
    enum play_control_action_focus_adjust_direction direction;
    uint32_t value;
};

struct play_control_focus_adjust_out {
    char __place_holder__; // make compiler happy
};

struct play_control_screen_cast_key_control_in {
    char __place_holder__; // make compiler happy
};

struct play_control_screen_cast_key_control_out {
    enum play_control_action_out_screen_cast_key_control_code code;
};

struct play_control_remote_key_control_in {
    char __place_holder__; // make compiler happy
};

struct play_control_remote_key_control_out {
    enum play_control_action_out_remote_key_control_code code;
};

enum PLAY_CONTROL_PROPERTY {
    PLAY_CONTROL_PROPERTY_PLAYSPEED = 1
};

enum PLAY_CONTROL_ACTION {
    PLAY_CONTROL_ACTION_NEXT_TRACK = 2,
    PLAY_CONTROL_ACTION_PREVIOUS_TRACK = 3,
    PLAY_CONTROL_ACTION_STOP = 4,
    PLAY_CONTROL_ACTION_PLAY = 5,
    PLAY_CONTROL_ACTION_PAUSE = 6,
    PLAY_CONTROL_ACTION_RESUME = 7,
    PLAY_CONTROL_ACTION_RECORD_START = 8,
    PLAY_CONTROL_ACTION_FORWARD = 9,
    PLAY_CONTROL_ACTION_REWIND = 10,
    PLAY_CONTROL_ACTION_SEARCH_PREVIOUS = 11,
    PLAY_CONTROL_ACTION_SEARCH_NEXT = 12,
    PLAY_CONTROL_ACTION_SCREEN_CAPTURE = 13,
    PLAY_CONTROL_ACTION_RECORD_END = 14,
    PLAY_CONTROL_ACTION_DIRECTION_KEY_CONTROL = 15,
    PLAY_CONTROL_ACTION_HOME_KEY_CONTROL = 16,
    PLAY_CONTROL_ACTION_RETURN_KEY_CONTROL = 17,
    PLAY_CONTROL_ACTION_MENU_KEY_CONTROL = 18,
    PLAY_CONTROL_ACTION_SET_KEY_CONTROL = 19,
    PLAY_CONTROL_ACTION_SMART_HOME_KEY_CONTROL = 20,
    PLAY_CONTROL_ACTION_SPEECH_KEY_CONTROL = 21,
    PLAY_CONTROL_ACTION_CONFIRM_KEY_CONTROL = 22,
    PLAY_CONTROL_ACTION_FOCUS_ADJUST = 23,
    PLAY_CONTROL_ACTION_SCREEN_CAST_KEY_CONTROL = 24,
    PLAY_CONTROL_ACTION_REMOTE_KEY_CONTROL = 25
};

struct play_control_properties {
    int32_t playspeed;
};

/**
 * @brief play control service initialization
 * @param properties [play control service properties]
 * @return int32_t   [initialize result]
*/
int32_t play_control_service_init(const struct play_control_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of play control service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t play_control_properties_write_cb(size_t count, uint32_t *enumerate, struct play_control_properties *properties);

/**
 * @brief update properties of play control service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t play_control_properties_update(size_t count, uint32_t *enumerate, struct play_control_properties *properties);

/**
 * @brief next track action start callback of play control service
 * @param ctx          [action context]
 * @param action       [next track action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_next_track_start_cb(struct hey_action_ctx *ctx, struct play_control_next_track_in *action, void **user_context);

/**
 * @brief next track action send message of play control service
 * @param ctx      [action context]
 * @param action   [next track action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_next_track_send(struct hey_action_ctx *ctx, struct play_control_next_track_out *action);

/**
 * @brief next track action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_next_track_stop(struct hey_action_ctx *ctx);

/**
 * @brief next track action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_next_track_stop_cb(void *user_context);

/**
 * @brief previous track action start callback of play control service
 * @param ctx          [action context]
 * @param action       [previous track action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_previous_track_start_cb(struct hey_action_ctx *ctx, struct play_control_previous_track_in *action, void **user_context);

/**
 * @brief previous track action send message of play control service
 * @param ctx      [action context]
 * @param action   [previous track action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_previous_track_send(struct hey_action_ctx *ctx, struct play_control_previous_track_out *action);

/**
 * @brief previous track action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_previous_track_stop(struct hey_action_ctx *ctx);

/**
 * @brief previous track action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_previous_track_stop_cb(void *user_context);

/**
 * @brief stop action start callback of play control service
 * @param ctx          [action context]
 * @param action       [stop action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_stop_start_cb(struct hey_action_ctx *ctx, struct play_control_stop_in *action, void **user_context);

/**
 * @brief stop action send message of play control service
 * @param ctx      [action context]
 * @param action   [stop action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_stop_send(struct hey_action_ctx *ctx, struct play_control_stop_out *action);

/**
 * @brief stop action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_stop_stop(struct hey_action_ctx *ctx);

/**
 * @brief stop action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_stop_stop_cb(void *user_context);

/**
 * @brief play action start callback of play control service
 * @param ctx          [action context]
 * @param action       [play action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_play_start_cb(struct hey_action_ctx *ctx, struct play_control_play_in *action, void **user_context);

/**
 * @brief play action send message of play control service
 * @param ctx      [action context]
 * @param action   [play action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_play_send(struct hey_action_ctx *ctx, struct play_control_play_out *action);

/**
 * @brief play action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_play_stop(struct hey_action_ctx *ctx);

/**
 * @brief play action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_play_stop_cb(void *user_context);

/**
 * @brief pause action start callback of play control service
 * @param ctx          [action context]
 * @param action       [pause action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_pause_start_cb(struct hey_action_ctx *ctx, struct play_control_pause_in *action, void **user_context);

/**
 * @brief pause action send message of play control service
 * @param ctx      [action context]
 * @param action   [pause action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_pause_send(struct hey_action_ctx *ctx, struct play_control_pause_out *action);

/**
 * @brief pause action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_pause_stop(struct hey_action_ctx *ctx);

/**
 * @brief pause action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_pause_stop_cb(void *user_context);

/**
 * @brief resume action start callback of play control service
 * @param ctx          [action context]
 * @param action       [resume action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_resume_start_cb(struct hey_action_ctx *ctx, struct play_control_resume_in *action, void **user_context);

/**
 * @brief resume action send message of play control service
 * @param ctx      [action context]
 * @param action   [resume action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_resume_send(struct hey_action_ctx *ctx, struct play_control_resume_out *action);

/**
 * @brief resume action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_resume_stop(struct hey_action_ctx *ctx);

/**
 * @brief resume action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_resume_stop_cb(void *user_context);

/**
 * @brief record start action start callback of play control service
 * @param ctx          [action context]
 * @param action       [record start action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_record_start_start_cb(struct hey_action_ctx *ctx, struct play_control_record_start_in *action, void **user_context);

/**
 * @brief record start action send message of play control service
 * @param ctx      [action context]
 * @param action   [record start action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_record_start_send(struct hey_action_ctx *ctx, struct play_control_record_start_out *action);

/**
 * @brief record start action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_record_start_stop(struct hey_action_ctx *ctx);

/**
 * @brief record start action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_record_start_stop_cb(void *user_context);

/**
 * @brief forward action start callback of play control service
 * @param ctx          [action context]
 * @param action       [forward action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_forward_start_cb(struct hey_action_ctx *ctx, struct play_control_forward_in *action, void **user_context);

/**
 * @brief forward action send message of play control service
 * @param ctx      [action context]
 * @param action   [forward action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_forward_send(struct hey_action_ctx *ctx, struct play_control_forward_out *action);

/**
 * @brief forward action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_forward_stop(struct hey_action_ctx *ctx);

/**
 * @brief forward action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_forward_stop_cb(void *user_context);

/**
 * @brief rewind action start callback of play control service
 * @param ctx          [action context]
 * @param action       [rewind action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_rewind_start_cb(struct hey_action_ctx *ctx, struct play_control_rewind_in *action, void **user_context);

/**
 * @brief rewind action send message of play control service
 * @param ctx      [action context]
 * @param action   [rewind action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_rewind_send(struct hey_action_ctx *ctx, struct play_control_rewind_out *action);

/**
 * @brief rewind action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_rewind_stop(struct hey_action_ctx *ctx);

/**
 * @brief rewind action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_rewind_stop_cb(void *user_context);

/**
 * @brief search previous action start callback of play control service
 * @param ctx          [action context]
 * @param action       [search previous action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_search_previous_start_cb(struct hey_action_ctx *ctx, struct play_control_search_previous_in *action, void **user_context);

/**
 * @brief search previous action send message of play control service
 * @param ctx      [action context]
 * @param action   [search previous action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_search_previous_send(struct hey_action_ctx *ctx, struct play_control_search_previous_out *action);

/**
 * @brief search previous action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_search_previous_stop(struct hey_action_ctx *ctx);

/**
 * @brief search previous action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_search_previous_stop_cb(void *user_context);

/**
 * @brief search next action start callback of play control service
 * @param ctx          [action context]
 * @param action       [search next action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_search_next_start_cb(struct hey_action_ctx *ctx, struct play_control_search_next_in *action, void **user_context);

/**
 * @brief search next action send message of play control service
 * @param ctx      [action context]
 * @param action   [search next action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_search_next_send(struct hey_action_ctx *ctx, struct play_control_search_next_out *action);

/**
 * @brief search next action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_search_next_stop(struct hey_action_ctx *ctx);

/**
 * @brief search next action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_search_next_stop_cb(void *user_context);

/**
 * @brief screen capture action start callback of play control service
 * @param ctx          [action context]
 * @param action       [screen capture action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_screen_capture_start_cb(struct hey_action_ctx *ctx, struct play_control_screen_capture_in *action, void **user_context);

/**
 * @brief screen capture action send message of play control service
 * @param ctx      [action context]
 * @param action   [screen capture action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_screen_capture_send(struct hey_action_ctx *ctx, struct play_control_screen_capture_out *action);

/**
 * @brief screen capture action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_screen_capture_stop(struct hey_action_ctx *ctx);

/**
 * @brief screen capture action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_screen_capture_stop_cb(void *user_context);

/**
 * @brief record end action start callback of play control service
 * @param ctx          [action context]
 * @param action       [record end action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_record_end_start_cb(struct hey_action_ctx *ctx, struct play_control_record_end_in *action, void **user_context);

/**
 * @brief record end action send message of play control service
 * @param ctx      [action context]
 * @param action   [record end action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_record_end_send(struct hey_action_ctx *ctx, struct play_control_record_end_out *action);

/**
 * @brief record end action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_record_end_stop(struct hey_action_ctx *ctx);

/**
 * @brief record end action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_record_end_stop_cb(void *user_context);

/**
 * @brief direction key control action start callback of play control service
 * @param ctx          [action context]
 * @param action       [direction key control action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_direction_key_control_start_cb(struct hey_action_ctx *ctx, struct play_control_direction_key_control_in *action, void **user_context);

/**
 * @brief direction key control action send message of play control service
 * @param ctx      [action context]
 * @param action   [direction key control action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_direction_key_control_send(struct hey_action_ctx *ctx, struct play_control_direction_key_control_out *action);

/**
 * @brief direction key control action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_direction_key_control_stop(struct hey_action_ctx *ctx);

/**
 * @brief direction key control action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_direction_key_control_stop_cb(void *user_context);

/**
 * @brief home key control action start callback of play control service
 * @param ctx          [action context]
 * @param action       [home key control action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_home_key_control_start_cb(struct hey_action_ctx *ctx, struct play_control_home_key_control_in *action, void **user_context);

/**
 * @brief home key control action send message of play control service
 * @param ctx      [action context]
 * @param action   [home key control action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_home_key_control_send(struct hey_action_ctx *ctx, struct play_control_home_key_control_out *action);

/**
 * @brief home key control action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_home_key_control_stop(struct hey_action_ctx *ctx);

/**
 * @brief home key control action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_home_key_control_stop_cb(void *user_context);

/**
 * @brief return key control action start callback of play control service
 * @param ctx          [action context]
 * @param action       [return key control action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_return_key_control_start_cb(struct hey_action_ctx *ctx, struct play_control_return_key_control_in *action, void **user_context);

/**
 * @brief return key control action send message of play control service
 * @param ctx      [action context]
 * @param action   [return key control action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_return_key_control_send(struct hey_action_ctx *ctx, struct play_control_return_key_control_out *action);

/**
 * @brief return key control action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_return_key_control_stop(struct hey_action_ctx *ctx);

/**
 * @brief return key control action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_return_key_control_stop_cb(void *user_context);

/**
 * @brief menu key control action start callback of play control service
 * @param ctx          [action context]
 * @param action       [menu key control action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_menu_key_control_start_cb(struct hey_action_ctx *ctx, struct play_control_menu_key_control_in *action, void **user_context);

/**
 * @brief menu key control action send message of play control service
 * @param ctx      [action context]
 * @param action   [menu key control action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_menu_key_control_send(struct hey_action_ctx *ctx, struct play_control_menu_key_control_out *action);

/**
 * @brief menu key control action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_menu_key_control_stop(struct hey_action_ctx *ctx);

/**
 * @brief menu key control action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_menu_key_control_stop_cb(void *user_context);

/**
 * @brief set key control action start callback of play control service
 * @param ctx          [action context]
 * @param action       [set key control action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_set_key_control_start_cb(struct hey_action_ctx *ctx, struct play_control_set_key_control_in *action, void **user_context);

/**
 * @brief set key control action send message of play control service
 * @param ctx      [action context]
 * @param action   [set key control action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_set_key_control_send(struct hey_action_ctx *ctx, struct play_control_set_key_control_out *action);

/**
 * @brief set key control action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_set_key_control_stop(struct hey_action_ctx *ctx);

/**
 * @brief set key control action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_set_key_control_stop_cb(void *user_context);

/**
 * @brief smart home key control action start callback of play control service
 * @param ctx          [action context]
 * @param action       [smart home key control action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_smart_home_key_control_start_cb(struct hey_action_ctx *ctx, struct play_control_smart_home_key_control_in *action, void **user_context);

/**
 * @brief smart home key control action send message of play control service
 * @param ctx      [action context]
 * @param action   [smart home key control action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_smart_home_key_control_send(struct hey_action_ctx *ctx, struct play_control_smart_home_key_control_out *action);

/**
 * @brief smart home key control action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_smart_home_key_control_stop(struct hey_action_ctx *ctx);

/**
 * @brief smart home key control action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_smart_home_key_control_stop_cb(void *user_context);

/**
 * @brief speech key control action start callback of play control service
 * @param ctx          [action context]
 * @param action       [speech key control action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_speech_key_control_start_cb(struct hey_action_ctx *ctx, struct play_control_speech_key_control_in *action, void **user_context);

/**
 * @brief speech key control action send message of play control service
 * @param ctx      [action context]
 * @param action   [speech key control action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_speech_key_control_send(struct hey_action_ctx *ctx, struct play_control_speech_key_control_out *action);

/**
 * @brief speech key control action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_speech_key_control_stop(struct hey_action_ctx *ctx);

/**
 * @brief speech key control action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_speech_key_control_stop_cb(void *user_context);

/**
 * @brief confirm key control action start callback of play control service
 * @param ctx          [action context]
 * @param action       [confirm key control action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_confirm_key_control_start_cb(struct hey_action_ctx *ctx, struct play_control_confirm_key_control_in *action, void **user_context);

/**
 * @brief confirm key control action send message of play control service
 * @param ctx      [action context]
 * @param action   [confirm key control action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_confirm_key_control_send(struct hey_action_ctx *ctx, struct play_control_confirm_key_control_out *action);

/**
 * @brief confirm key control action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_confirm_key_control_stop(struct hey_action_ctx *ctx);

/**
 * @brief confirm key control action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_confirm_key_control_stop_cb(void *user_context);

/**
 * @brief focus adjust action start callback of play control service
 * @param ctx          [action context]
 * @param action       [focus adjust action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_focus_adjust_start_cb(struct hey_action_ctx *ctx, struct play_control_focus_adjust_in *action, void **user_context);

/**
 * @brief focus adjust action send message of play control service
 * @param ctx      [action context]
 * @param action   [focus adjust action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_focus_adjust_send(struct hey_action_ctx *ctx, struct play_control_focus_adjust_out *action);

/**
 * @brief focus adjust action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_focus_adjust_stop(struct hey_action_ctx *ctx);

/**
 * @brief focus adjust action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_focus_adjust_stop_cb(void *user_context);

/**
 * @brief screen cast key control action start callback of play control service
 * @param ctx          [action context]
 * @param action       [screen cast key control action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_screen_cast_key_control_start_cb(struct hey_action_ctx *ctx, struct play_control_screen_cast_key_control_in *action, void **user_context);

/**
 * @brief screen cast key control action send message of play control service
 * @param ctx      [action context]
 * @param action   [screen cast key control action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_screen_cast_key_control_send(struct hey_action_ctx *ctx, struct play_control_screen_cast_key_control_out *action);

/**
 * @brief screen cast key control action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_screen_cast_key_control_stop(struct hey_action_ctx *ctx);

/**
 * @brief screen cast key control action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_screen_cast_key_control_stop_cb(void *user_context);

/**
 * @brief remote key control action start callback of play control service
 * @param ctx          [action context]
 * @param action       [remote key control action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t play_control_remote_key_control_start_cb(struct hey_action_ctx *ctx, struct play_control_remote_key_control_in *action, void **user_context);

/**
 * @brief remote key control action send message of play control service
 * @param ctx      [action context]
 * @param action   [remote key control action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t play_control_remote_key_control_send(struct hey_action_ctx *ctx, struct play_control_remote_key_control_out *action);

/**
 * @brief remote key control action stop of play control service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t play_control_remote_key_control_stop(struct hey_action_ctx *ctx);

/**
 * @brief remote key control action stop callback of play control service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void play_control_remote_key_control_stop_cb(void *user_context);

#endif /* PLAY_CONTROL_SERVICE_H */
