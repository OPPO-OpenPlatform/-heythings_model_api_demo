/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: refrige.proto */

#ifndef REFRIGE_SERVICE_H
#define REFRIGE_SERVICE_H

#include "hey/types.h"

struct refrige_event_open_alarm {
    char __place_holder__; // make compiler happy
};

enum REFRIGE_PROPERTY {
    REFRIGE_PROPERTY_POWER = 1,
    REFRIGE_PROPERTY_VACATIONMODEENABLED = 2,
    REFRIGE_PROPERTY_SMARTMODE = 3,
    REFRIGE_PROPERTY_ECO = 4,
    REFRIGE_PROPERTY_OFFPEAKPOWERCONSUMPTION = 6
};

enum REFRIGE_EVENT {
    REFRIGE_EVENT_OPEN_ALARM = 5
};

struct refrige_properties {
    bool power;
    bool vacationmodeenabled;
    bool smartmode;
    bool eco;
    bool offpeakpowerconsumption;
};

/**
 * @brief refrige service initialization
 * @param properties [refrige service properties]
 * @return int32_t   [initialize result]
*/
int32_t refrige_service_init(const struct refrige_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of refrige service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t refrige_properties_write_cb(size_t count, uint32_t *enumerate, struct refrige_properties *properties);

/**
 * @brief update properties of refrige service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t refrige_properties_update(size_t count, uint32_t *enumerate, struct refrige_properties *properties);

/**
 * @brief open alarm notify of refrige service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t refrige_open_alarm_notify(struct refrige_event_open_alarm *event, struct hey_event_notify_attr *attr);

/**
 * @brief open alarm notify result callback of refrige service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void refrige_open_alarm_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* REFRIGE_SERVICE_H */
