/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: airConditioner.proto */

#ifndef AIR_CONDITIONER_SERVICE_H
#define AIR_CONDITIONER_SERVICE_H

#include "hey/types.h"

enum air_conditioner_ac_mode {
    AIR_CONDITIONER_AC_MODE_MODE_AUTO = 0,
    AIR_CONDITIONER_AC_MODE_MODE_COOL = 1,
    AIR_CONDITIONER_AC_MODE_MODE_HEAT = 2,
    AIR_CONDITIONER_AC_MODE_MODE_DRY = 3,
    AIR_CONDITIONER_AC_MODE_MODE_FAN = 4
};

enum air_conditioner_displaying_temp_unit {
    AIR_CONDITIONER_DISPLAYING_TEMP_UNIT_UNIT_K = 0,
    AIR_CONDITIONER_DISPLAYING_TEMP_UNIT_UNIT_F = 1,
    AIR_CONDITIONER_DISPLAYING_TEMP_UNIT_UNIT_C = 2
};

enum air_conditioner_sleep {
    AIR_CONDITIONER_SLEEP_S_OFF = 0,
    AIR_CONDITIONER_SLEEP_S_ON = 1
};

enum AIR_CONDITIONER_PROPERTY {
    AIR_CONDITIONER_PROPERTY_POWER = 1,
    AIR_CONDITIONER_PROPERTY_ACMODE = 2,
    AIR_CONDITIONER_PROPERTY_ECO = 3,
    AIR_CONDITIONER_PROPERTY_SLEEP = 4,
    AIR_CONDITIONER_PROPERTY_RAPIDMODE = 5,
    AIR_CONDITIONER_PROPERTY_ELECTRICHEATING = 6,
    AIR_CONDITIONER_PROPERTY_CURRENTTEMPERATURE = 7,
    AIR_CONDITIONER_PROPERTY_TARGETTEMPERATURE = 8,
    AIR_CONDITIONER_PROPERTY_OUTDOORTEMPERATURE = 9,
    AIR_CONDITIONER_PROPERTY_DISPLAYINGTEMPUNIT = 10,
    AIR_CONDITIONER_PROPERTY_SPEECHCONTROLENABLED = 11,
    AIR_CONDITIONER_PROPERTY_SCREENDISPLAYENABLED = 12,
    AIR_CONDITIONER_PROPERTY_PREVENTSUPERCOOL = 13,
    AIR_CONDITIONER_PROPERTY_APPOINTMENTPOWERON = 14,
    AIR_CONDITIONER_PROPERTY_AIRDRY = 15,
    AIR_CONDITIONER_PROPERTY_APPOINTMENTPOWEROFF = 16,
    AIR_CONDITIONER_PROPERTY_MUTE = 17
};

struct air_conditioner_properties {
    bool power;
    enum air_conditioner_ac_mode acmode;
    bool eco;
    enum air_conditioner_sleep sleep;
    bool rapidmode;
    bool electricheating;
    int32_t currenttemperature;
    int32_t targettemperature;
    int32_t outdoortemperature;
    enum air_conditioner_displaying_temp_unit displayingtempunit;
    bool speechcontrolenabled;
    bool screendisplayenabled;
    bool preventsupercool;
    uint32_t appointmentpoweron;
    bool airdry;
    uint32_t appointmentpoweroff;
    bool mute;
};

/**
 * @brief air conditioner service initialization
 * @param properties [air conditioner service properties]
 * @return int32_t   [initialize result]
*/
int32_t air_conditioner_service_init(const struct air_conditioner_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of air conditioner service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t air_conditioner_properties_write_cb(size_t count, uint32_t *enumerate, struct air_conditioner_properties *properties);

/**
 * @brief update properties of air conditioner service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t air_conditioner_properties_update(size_t count, uint32_t *enumerate, struct air_conditioner_properties *properties);

#endif /* AIR_CONDITIONER_SERVICE_H */
