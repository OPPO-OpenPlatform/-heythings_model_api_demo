/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: gasCooker.proto */

#ifndef GAS_COOKER_SERVICE_H
#define GAS_COOKER_SERVICE_H

#include "hey/types.h"

struct gas_cooker_turn_off_fire_in {
    char __place_holder__; // make compiler happy
};

struct gas_cooker_turn_off_fire_out {
    char __place_holder__; // make compiler happy
};

enum GAS_COOKER_PROPERTY {
    GAS_COOKER_PROPERTY_CHILDLOCKENABLED = 1
};

enum GAS_COOKER_ACTION {
    GAS_COOKER_ACTION_TURN_OFF_FIRE = 2
};

struct gas_cooker_properties {
    bool childlockenabled;
};

/**
 * @brief gas cooker service initialization
 * @param properties [gas cooker service properties]
 * @return int32_t   [initialize result]
*/
int32_t gas_cooker_service_init(const struct gas_cooker_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of gas cooker service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t gas_cooker_properties_write_cb(size_t count, uint32_t *enumerate, struct gas_cooker_properties *properties);

/**
 * @brief update properties of gas cooker service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t gas_cooker_properties_update(size_t count, uint32_t *enumerate, struct gas_cooker_properties *properties);

/**
 * @brief turn off fire action start callback of gas cooker service
 * @param ctx          [action context]
 * @param action       [turn off fire action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t gas_cooker_turn_off_fire_start_cb(struct hey_action_ctx *ctx, struct gas_cooker_turn_off_fire_in *action, void **user_context);

/**
 * @brief turn off fire action send message of gas cooker service
 * @param ctx      [action context]
 * @param action   [turn off fire action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t gas_cooker_turn_off_fire_send(struct hey_action_ctx *ctx, struct gas_cooker_turn_off_fire_out *action);

/**
 * @brief turn off fire action stop of gas cooker service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t gas_cooker_turn_off_fire_stop(struct hey_action_ctx *ctx);

/**
 * @brief turn off fire action stop callback of gas cooker service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void gas_cooker_turn_off_fire_stop_cb(void *user_context);

#endif /* GAS_COOKER_SERVICE_H */
