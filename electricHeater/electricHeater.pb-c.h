/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: electricHeater.proto */

#ifndef PROTOBUF_C_electricHeater_2eproto__INCLUDED
#define PROTOBUF_C_electricHeater_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Iot__Service__ElectricHeater__Properties Iot__Service__ElectricHeater__Properties;


/* --- enums --- */

typedef enum _Iot__Service__ElectricHeater__ElectricHeaterMode {
  IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_MODE__NONE = 0,
  IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_MODE__SMART_MODE = 1,
  IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_MODE__ECO_MODE = 2,
  IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_MODE__SLEEP_MODE = 3,
  IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_MODE__ANTIFREEZING = 4,
  IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_MODE__COMFORT_MODE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_MODE)
} Iot__Service__ElectricHeater__ElectricHeaterMode;
typedef enum _Iot__Service__ElectricHeater__ElectricHeaterLevel {
  IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_LEVEL__LEVEL_NONE = 0,
  IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_LEVEL__LEVEL_ONE = 1,
  IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_LEVEL__LEVEL_TWO = 2,
  IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_LEVEL__LEVEL_THREE = 3,
  IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_LEVEL__LEVEL_FOUR = 4,
  IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_LEVEL__LEVEL_FIVE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_LEVEL)
} Iot__Service__ElectricHeater__ElectricHeaterLevel;

/* --- messages --- */

struct  _Iot__Service__ElectricHeater__Properties
{
  ProtobufCMessage base;
  protobuf_c_boolean power;
  uint32_t currenttemperature;
  uint32_t targettemperature;
  Iot__Service__ElectricHeater__ElectricHeaterMode electricheatermode;
  Iot__Service__ElectricHeater__ElectricHeaterLevel electricheaterlevel;
  protobuf_c_boolean childlockenabled;
  protobuf_c_boolean screendisplayenabled;
  uint32_t runningduration;
  uint32_t powerconsumption;
  uint32_t appointmentpoweron;
  protobuf_c_boolean nocontroltempenabled;
  uint32_t appointmentpoweroff;
};
#define IOT__SERVICE__ELECTRIC_HEATER__PROPERTIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&iot__service__electric_heater__properties__descriptor) \
    , 0, 0, 0, IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_MODE__NONE, IOT__SERVICE__ELECTRIC_HEATER__ELECTRIC_HEATER_LEVEL__LEVEL_NONE, 0, 0, 0, 0, 0, 0, 0 }


/* Iot__Service__ElectricHeater__Properties methods */
void   iot__service__electric_heater__properties__init
                     (Iot__Service__ElectricHeater__Properties         *message);
size_t iot__service__electric_heater__properties__get_packed_size
                     (const Iot__Service__ElectricHeater__Properties   *message);
size_t iot__service__electric_heater__properties__pack
                     (const Iot__Service__ElectricHeater__Properties   *message,
                      uint8_t             *out);
size_t iot__service__electric_heater__properties__pack_to_buffer
                     (const Iot__Service__ElectricHeater__Properties   *message,
                      ProtobufCBuffer     *buffer);
Iot__Service__ElectricHeater__Properties *
       iot__service__electric_heater__properties__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   iot__service__electric_heater__properties__free_unpacked
                     (Iot__Service__ElectricHeater__Properties *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Iot__Service__ElectricHeater__Properties_Closure)
                 (const Iot__Service__ElectricHeater__Properties *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    iot__service__electric_heater__electric_heater_mode__descriptor;
extern const ProtobufCEnumDescriptor    iot__service__electric_heater__electric_heater_level__descriptor;
extern const ProtobufCMessageDescriptor iot__service__electric_heater__properties__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_electricHeater_2eproto__INCLUDED */
