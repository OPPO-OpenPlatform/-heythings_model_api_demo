/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: softwareUpdate.proto */

#ifndef SOFTWARE_UPDATE_SERVICE_H
#define SOFTWARE_UPDATE_SERVICE_H

#include "hey/types.h"

enum software_update_update_state {
    SOFTWARE_UPDATE_UPDATE_STATE_IDLE = 0,
    SOFTWARE_UPDATE_UPDATE_STATE_PREPARE = 1,
    SOFTWARE_UPDATE_UPDATE_STATE_DOWNLOADING = 2,
    SOFTWARE_UPDATE_UPDATE_STATE_DOWNLOADED = 3,
    SOFTWARE_UPDATE_UPDATE_STATE_UPDATING = 4,
  /*
   *致命错误，功能不可用，重启不可恢复
   */
    SOFTWARE_UPDATE_UPDATE_STATE_FATAL = 5
};

enum software_update_update_error {
    SOFTWARE_UPDATE_UPDATE_ERROR_INITIAL = 0,
    SOFTWARE_UPDATE_UPDATE_ERROR_NOT_ENOUGH_FLASH_MEMORY = 1,
    SOFTWARE_UPDATE_UPDATE_ERROR_NOT_ENOUGH_RAM_MEMORY = 2,
    SOFTWARE_UPDATE_UPDATE_ERROR_CONNECTION_LOST = 3,
    SOFTWARE_UPDATE_UPDATE_ERROR_INTEGRITY_CHECK_FAILURE = 4,
    SOFTWARE_UPDATE_UPDATE_ERROR_INVALID_URL = 5,
    SOFTWARE_UPDATE_UPDATE_ERROR_UPDATE_FAILED = 6,
    SOFTWARE_UPDATE_UPDATE_ERROR_CURRENT_VERSION_ERR = 7,
    SOFTWARE_UPDATE_UPDATE_ERROR_SIGNATURE_TYPE_ERR = 8,
    SOFTWARE_UPDATE_UPDATE_ERROR_SIGNATURE_INVALID = 9,
  /*
   *用于固件打包升级，mcu升级失败
   */
    SOFTWARE_UPDATE_UPDATE_ERROR_MCU_UPDATE_FAILED = 10
};

enum software_update_signature_type {
    SOFTWARE_UPDATE_SIGNATURE_TYPE_None = 0,
    SOFTWARE_UPDATE_SIGNATURE_TYPE_EcdsaSecp256r1Sha256 = 1
};

struct software_update_start_update_in {
    char *packageurl;
    char *validatefromver;
    enum software_update_signature_type signtype;
    struct hey_binary_data signatures;
};

struct software_update_start_update_out {
    char __place_holder__; // make compiler happy
};

struct software_update_start_update_file_file_info_in {
    char *validatefromver;
    enum software_update_signature_type signtype;
    struct hey_binary_data signatures;
    int64_t size;
};

struct software_update_start_update_file_final_in {
    char __place_holder__; // make compiler happy
};

enum software_update_start_update_file_send_type_in {
    SOFTWARE_UPDATE_START_UPDATE_FILE_SEND_TYPE_IN_NOT_SET = 0,
    SOFTWARE_UPDATE_START_UPDATE_FILE_SEND_TYPE_IN_FILEINFO = 1,
    SOFTWARE_UPDATE_START_UPDATE_FILE_SEND_TYPE_IN_CHUNK = 2,
    SOFTWARE_UPDATE_START_UPDATE_FILE_SEND_TYPE_IN_FINAL = 3
};

struct software_update_start_update_file_in {
    enum software_update_start_update_file_send_type_in send_type_case;
    union {
        struct software_update_start_update_file_file_info_in *fileinfo;
        struct hey_binary_data chunk;
        struct software_update_start_update_file_final_in *final;
    };
};

struct software_update_start_update_file_out {
    uint32_t code;
};

struct software_update_query_new_update_in {
    char __place_holder__; // make compiler happy
};

struct software_update_query_new_update_out {
    char *currentver;
    char *newver;
    char *desc;
};

struct software_update_prepare_for_mesh_node_connection_in {
    struct hey_binary_data random;
};

struct software_update_prepare_for_mesh_node_connection_out {
    uint32_t bleaddrtype;
    struct hey_binary_data bleaddr;
};

enum SOFTWARE_UPDATE_PROPERTY {
    SOFTWARE_UPDATE_PROPERTY_CURRENTSOFTWAREVERNAME = 1,
    SOFTWARE_UPDATE_PROPERTY_UPDATEPROGRESS = 2,
    SOFTWARE_UPDATE_PROPERTY_UPDATESTATE = 3,
    SOFTWARE_UPDATE_PROPERTY_UPDATEERROR = 4,
    SOFTWARE_UPDATE_PROPERTY_CURRENTSOFTWAREVERCODE = 8
};

enum SOFTWARE_UPDATE_ACTION {
    SOFTWARE_UPDATE_ACTION_START_UPDATE = 5,
    SOFTWARE_UPDATE_ACTION_START_UPDATE_FILE = 6,
    SOFTWARE_UPDATE_ACTION_QUERY_NEW_UPDATE = 7,
    SOFTWARE_UPDATE_ACTION_PREPARE_FOR_MESH_NODE_CONNECTION = 9
};

struct software_update_properties {
    char *currentsoftwarevername;
    uint32_t updateprogress;
    enum software_update_update_state updatestate;
    enum software_update_update_error updateerror;
    uint32_t currentsoftwarevercode;
};

/**
 * @brief software update service initialization
 * @param properties [software update service properties]
 * @return int32_t   [initialize result]
*/
int32_t software_update_service_init(const struct software_update_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of software update service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t software_update_properties_write_cb(size_t count, uint32_t *enumerate, struct software_update_properties *properties);

/**
 * @brief update properties of software update service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t software_update_properties_update(size_t count, uint32_t *enumerate, struct software_update_properties *properties);

/**
 * @brief start update action start callback of software update service
 * @param ctx          [action context]
 * @param action       [start update action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t software_update_start_update_start_cb(struct hey_action_ctx *ctx, struct software_update_start_update_in *action, void **user_context);

/**
 * @brief start update action send message of software update service
 * @param ctx      [action context]
 * @param action   [start update action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t software_update_start_update_send(struct hey_action_ctx *ctx, struct software_update_start_update_out *action);

/**
 * @brief start update action stop of software update service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t software_update_start_update_stop(struct hey_action_ctx *ctx);

/**
 * @brief start update action stop callback of software update service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void software_update_start_update_stop_cb(void *user_context);

/**
 * @brief start update file action start callback of software update service
 * @param ctx          [action context]
 * @param action       [start update file action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t software_update_start_update_file_start_cb(struct hey_action_ctx *ctx, struct software_update_start_update_file_in *action, void **user_context);

/**
 * @brief start update file action message receive callback of software update service
 * @param user_context [callback data which form action start callback function]
 * @param action       [start update file action in]
 * @return int32_t     [action message callback handle result, 0 means success]
 */
int32_t software_update_start_update_file_message_cb(void *user_context, struct software_update_start_update_file_in *action);

/**
 * @brief start update file action send message of software update service
 * @param ctx      [action context]
 * @param action   [start update file action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t software_update_start_update_file_send(struct hey_action_ctx *ctx, struct software_update_start_update_file_out *action);

/**
 * @brief start update file action stop of software update service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t software_update_start_update_file_stop(struct hey_action_ctx *ctx);

/**
 * @brief start update file action stop callback of software update service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void software_update_start_update_file_stop_cb(void *user_context);

/**
 * @brief query new update action start callback of software update service
 * @param ctx          [action context]
 * @param action       [query new update action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t software_update_query_new_update_start_cb(struct hey_action_ctx *ctx, struct software_update_query_new_update_in *action, void **user_context);

/**
 * @brief query new update action send message of software update service
 * @param ctx      [action context]
 * @param action   [query new update action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t software_update_query_new_update_send(struct hey_action_ctx *ctx, struct software_update_query_new_update_out *action);

/**
 * @brief query new update action stop of software update service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t software_update_query_new_update_stop(struct hey_action_ctx *ctx);

/**
 * @brief query new update action stop callback of software update service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void software_update_query_new_update_stop_cb(void *user_context);

/**
 * @brief prepare for mesh node connection action start callback of software update service
 * @param ctx          [action context]
 * @param action       [prepare for mesh node connection action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t software_update_prepare_for_mesh_node_connection_start_cb(struct hey_action_ctx *ctx, struct software_update_prepare_for_mesh_node_connection_in *action, void **user_context);

/**
 * @brief prepare for mesh node connection action send message of software update service
 * @param ctx      [action context]
 * @param action   [prepare for mesh node connection action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t software_update_prepare_for_mesh_node_connection_send(struct hey_action_ctx *ctx, struct software_update_prepare_for_mesh_node_connection_out *action);

/**
 * @brief prepare for mesh node connection action stop of software update service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t software_update_prepare_for_mesh_node_connection_stop(struct hey_action_ctx *ctx);

/**
 * @brief prepare for mesh node connection action stop callback of software update service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void software_update_prepare_for_mesh_node_connection_stop_cb(void *user_context);

#endif /* SOFTWARE_UPDATE_SERVICE_H */
