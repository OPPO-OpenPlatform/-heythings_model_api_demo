/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: humidifier.proto */

#ifndef HUMIDIFIER_SERVICE_H
#define HUMIDIFIER_SERVICE_H

#include "hey/types.h"

enum humidifier_humidifier_mode {
    HUMIDIFIER_HUMIDIFIER_MODE_MODE_MANUAL = 0,
    HUMIDIFIER_HUMIDIFIER_MODE_MODE_AUTO = 1,
    HUMIDIFIER_HUMIDIFIER_MODE_MODE_CONTINUOUS = 2
};

enum humidifier_fog_volume {
    HUMIDIFIER_FOG_VOLUME_CLOSE = 0,
    HUMIDIFIER_FOG_VOLUME_AUTO = 1,
  /*
   *1级
   */
    HUMIDIFIER_FOG_VOLUME_LEVELONE = 2,
  /*
   *2级
   */
    HUMIDIFIER_FOG_VOLUME_LEVELTWO = 3
};

enum humidifier_light_mode {
    HUMIDIFIER_LIGHT_MODE_MANUAL = 0,
    HUMIDIFIER_LIGHT_MODE_READING = 1,
    HUMIDIFIER_LIGHT_MODE_SCREEN_READING = 2,
    HUMIDIFIER_LIGHT_MODE_SLEEP = 3,
    HUMIDIFIER_LIGHT_MODE_LEISURE = 4
};

enum HUMIDIFIER_PROPERTY {
    HUMIDIFIER_PROPERTY_POWER = 1,
    HUMIDIFIER_PROPERTY_HUMIDIFIERMODE = 2,
    HUMIDIFIER_PROPERTY_CURRENTHUMIDITY = 3,
    HUMIDIFIER_PROPERTY_TARGETHUMIDITY = 4,
    HUMIDIFIER_PROPERTY_FOGVOLUME = 5,
    HUMIDIFIER_PROPERTY_APPOINTMENTPOWERON = 6,
    HUMIDIFIER_PROPERTY_STERILIZATIONENABLED = 7,
    HUMIDIFIER_PROPERTY_STERILIZATIONPERCENT = 8,
    HUMIDIFIER_PROPERTY_LIGHTMODE = 9,
    HUMIDIFIER_PROPERTY_APPOINTMENTPOWEROFF = 10
};

struct humidifier_properties {
    bool power;
    enum humidifier_humidifier_mode humidifiermode;
    uint32_t currenthumidity;
    uint32_t targethumidity;
    enum humidifier_fog_volume fogvolume;
    uint32_t appointmentpoweron;
    bool sterilizationenabled;
    uint32_t sterilizationpercent;
    enum humidifier_light_mode lightmode;
    uint32_t appointmentpoweroff;
};

/**
 * @brief humidifier service initialization
 * @param properties [humidifier service properties]
 * @return int32_t   [initialize result]
*/
int32_t humidifier_service_init(const struct humidifier_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of humidifier service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t humidifier_properties_write_cb(size_t count, uint32_t *enumerate, struct humidifier_properties *properties);

/**
 * @brief update properties of humidifier service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t humidifier_properties_update(size_t count, uint32_t *enumerate, struct humidifier_properties *properties);

#endif /* HUMIDIFIER_SERVICE_H */
