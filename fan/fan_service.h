/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: fan.proto */

#ifndef FAN_SERVICE_H
#define FAN_SERVICE_H

#include "hey/types.h"

enum fan_fan_mode {
    FAN_FAN_MODE_FAN_NORMAL = 0,
    FAN_FAN_MODE_FAN_NATURAL = 1,
    FAN_FAN_MODE_FAN_SLEEP = 2,
    FAN_FAN_MODE_FAN_COMFORTABLE = 3,
    FAN_FAN_MODE_FAN_HUMAN_FEELING = 4,
    FAN_FAN_MODE_FAN_QUIET = 5,
    FAN_FAN_MODE_FAN_BABY = 6
};

enum fan_horizontal_direction {
    FAN_HORIZONTAL_DIRECTION_HL_STOP = 0,
    FAN_HORIZONTAL_DIRECTION_HL_LEFTRIGHT = 1,
    FAN_HORIZONTAL_DIRECTION_HL_AUTO = 2,
    FAN_HORIZONTAL_DIRECTION_HL_ONE = 3,
    FAN_HORIZONTAL_DIRECTION_HL_TWO = 4,
    FAN_HORIZONTAL_DIRECTION_HL_THREE = 5,
    FAN_HORIZONTAL_DIRECTION_HL_FOUR = 6,
    FAN_HORIZONTAL_DIRECTION_HL_FIVE = 7,
    FAN_HORIZONTAL_DIRECTION_HL_SIX = 8
};

enum fan_vertical_direction {
    FAN_VERTICAL_DIRECTION_VL_STOP = 0,
    FAN_VERTICAL_DIRECTION_VL_UPDOWN = 1,
    FAN_VERTICAL_DIRECTION_VL_AUTO = 2,
    FAN_VERTICAL_DIRECTION_VL_ONE = 3,
    FAN_VERTICAL_DIRECTION_VL_TWO = 4,
    FAN_VERTICAL_DIRECTION_VL_THREE = 5,
    FAN_VERTICAL_DIRECTION_VL_FOUR = 6,
    FAN_VERTICAL_DIRECTION_VL_FIVE = 7,
    FAN_VERTICAL_DIRECTION_VL_SIX = 8
};

enum fan_swing_direction {
    FAN_SWING_DIRECTION_AUTO = 0,
  /*
   *8字摇头
   */
    FAN_SWING_DIRECTION_E_DIRECTION = 1,
  /*
   *W字摇头
   */
    FAN_SWING_DIRECTION_W_DIRECTION = 2,
  /*
   *左右摇头
   */
    FAN_SWING_DIRECTION_LR_DIRECTION = 3,
  /*
   *上下摇头
   */
    FAN_SWING_DIRECTION_UD_DIRECTION = 4,
  /*
   *上下左右摇头
   */
    FAN_SWING_DIRECTION_LRUD_DIRECTION = 5
};

enum fan_swing_angle {
  /*
   *不设定该值
   */
    FAN_SWING_ANGLE_NONE = 0,
    FAN_SWING_ANGLE_ANGLE1 = 1,
    FAN_SWING_ANGLE_ANGLE2 = 2
};

enum FAN_PROPERTY {
    FAN_PROPERTY_POWER = 1,
    FAN_PROPERTY_FANMODE = 2,
    FAN_PROPERTY_WINDSPEED = 3,
    FAN_PROPERTY_HORIZONTALDIRECTION = 4,
    FAN_PROPERTY_VERTICALDIRECTION = 5,
    FAN_PROPERTY_SWINGDIRECTION = 6,
    FAN_PROPERTY_CHILDLOCKENABLED = 7,
    FAN_PROPERTY_PREVENTSTRAIGHTWIND = 8,
    FAN_PROPERTY_CHILDPREVENTCOLDWIND = 9,
    FAN_PROPERTY_UPSWINGWIND = 10,
    FAN_PROPERTY_DOWNSWINGWIND = 11,
    FAN_PROPERTY_UPNOSENSEWIND = 12,
    FAN_PROPERTY_DOWNNOSENSEWIND = 13,
    FAN_PROPERTY_NOSENSEWIND = 14,
    FAN_PROPERTY_TEMPWINDENABLED = 15,
    FAN_PROPERTY_SCREENDISPLAYENABLED = 16,
    FAN_PROPERTY_APPOINTMENTPOWERON = 17,
    FAN_PROPERTY_MUTE = 18,
    FAN_PROPERTY_AUTOWINDENABLED = 19,
    FAN_PROPERTY_POWERSTATUS = 20,
    FAN_PROPERTY_SWINGANGLE = 21,
    FAN_PROPERTY_SWINGENABLED = 22,
    FAN_PROPERTY_LRDIYSWINGENABLED = 23,
    FAN_PROPERTY_LRDIYUPPERCENT = 24,
    FAN_PROPERTY_LRDIYDOWNPERCENT = 25,
    FAN_PROPERTY_UDDIYSWINGENABLED = 26,
    FAN_PROPERTY_UDDIYUPPERCENT = 27,
    FAN_PROPERTY_UDDIYDOWNPERCENT = 28,
    FAN_PROPERTY_AIRDRY = 29,
    FAN_PROPERTY_ANIONENABLED = 30,
    FAN_PROPERTY_WATERIONSENABLED = 31,
    FAN_PROPERTY_APPOINTMENTPOWEROFF = 32
};

struct fan_properties {
    bool power;
    enum fan_fan_mode fanmode;
    uint32_t windspeed;
    enum fan_horizontal_direction horizontaldirection;
    enum fan_vertical_direction verticaldirection;
    enum fan_swing_direction swingdirection;
    bool childlockenabled;
    bool preventstraightwind;
    bool childpreventcoldwind;
    bool upswingwind;
    bool downswingwind;
    bool upnosensewind;
    bool downnosensewind;
    bool nosensewind;
    bool tempwindenabled;
    bool screendisplayenabled;
    uint32_t appointmentpoweron;
    bool mute;
    bool autowindenabled;
    bool powerstatus;
    enum fan_swing_angle swingangle;
    bool swingenabled;
    bool lrdiyswingenabled;
    uint32_t lrdiyuppercent;
    uint32_t lrdiydownpercent;
    bool uddiyswingenabled;
    uint32_t uddiyuppercent;
    uint32_t uddiydownpercent;
    bool airdry;
    bool anionenabled;
    bool waterionsenabled;
    uint32_t appointmentpoweroff;
};

/**
 * @brief fan service initialization
 * @param properties [fan service properties]
 * @return int32_t   [initialize result]
*/
int32_t fan_service_init(const struct fan_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of fan service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t fan_properties_write_cb(size_t count, uint32_t *enumerate, struct fan_properties *properties);

/**
 * @brief update properties of fan service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t fan_properties_update(size_t count, uint32_t *enumerate, struct fan_properties *properties);

#endif /* FAN_SERVICE_H */
