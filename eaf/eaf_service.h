/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: eaf.proto */

#ifndef EAF_SERVICE_H
#define EAF_SERVICE_H

#include "hey/types.h"

enum EAF_PROPERTY {
    EAF_PROPERTY_POWER = 1,
    EAF_PROPERTY_MANNULAUTOSTA = 2,
    EAF_PROPERTY_FAULTSTA = 3,
    EAF_PROPERTY_PRESSUREDIFFSTA = 4,
    EAF_PROPERTY_FREQSETTING = 5,
    EAF_PROPERTY_FREQFEEDBACK = 6,
    EAF_PROPERTY_VLVOPENING = 7,
    EAF_PROPERTY_VLVFEEDBACK = 8,
    EAF_PROPERTY_CURRENTTEMPERATURE = 9,
    EAF_PROPERTY_TARGETTEMPERATURE = 10,
    EAF_PROPERTY_WINDSPEED = 11,
    EAF_PROPERTY_CO2 = 12,
    EAF_PROPERTY_CURRENTHUMIDITY = 13,
    EAF_PROPERTY_TARGETHUMIDITY = 14,
    EAF_PROPERTY_MINIMUMFREQ = 15
};

struct eaf_properties {
    bool power;
    bool mannulautosta;
    bool faultsta;
    bool pressurediffsta;
    uint32_t freqsetting;
    uint32_t freqfeedback;
    uint32_t vlvopening;
    uint32_t vlvfeedback;
    uint32_t currenttemperature;
    uint32_t targettemperature;
    uint32_t windspeed;
    uint32_t co2;
    uint32_t currenthumidity;
    uint32_t targethumidity;
    uint32_t minimumfreq;
};

/**
 * @brief eaf service initialization
 * @param properties [eaf service properties]
 * @return int32_t   [initialize result]
*/
int32_t eaf_service_init(const struct eaf_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of eaf service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t eaf_properties_write_cb(size_t count, uint32_t *enumerate, struct eaf_properties *properties);

/**
 * @brief update properties of eaf service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t eaf_properties_update(size_t count, uint32_t *enumerate, struct eaf_properties *properties);

#endif /* EAF_SERVICE_H */
