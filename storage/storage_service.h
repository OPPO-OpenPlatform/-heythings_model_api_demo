/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: storage.proto */

#ifndef STORAGE_SERVICE_H
#define STORAGE_SERVICE_H

#include "hey/types.h"

enum storage_info_card_type {
    STORAGE_INFO_CARD_TYPE_ROM = 0,
    STORAGE_INFO_CARD_TYPE_SD = 1,
    STORAGE_INFO_CARD_TYPE_MINI_SD = 2,
    STORAGE_INFO_CARD_TYPE_TF = 3,
    STORAGE_INFO_CARD_TYPE_USB_FLASH_DISK = 4,
    STORAGE_INFO_CARD_TYPE_PCI_EXPRESS = 5,
    STORAGE_INFO_CARD_TYPE_SMART_MEDIA = 6,
    STORAGE_INFO_CARD_TYPE_COMPACT_FLASH = 7,
    STORAGE_INFO_CARD_TYPE_XQD = 8,
    STORAGE_INFO_CARD_TYPE_XD_PICTURE_CARD = 9,
    STORAGE_INFO_CARD_TYPE_M2 = 10
};

enum storage_action_out_uninstall_storage_card_code {
    STORAGE_ACTION_OUT_UNINSTALL_STORAGE_CARD_CODE_SUCCESS = 0,
    STORAGE_ACTION_OUT_UNINSTALL_STORAGE_CARD_CODE_FAILED = 1
};

enum storage_action_out_format_storage_card_code {
    STORAGE_ACTION_OUT_FORMAT_STORAGE_CARD_CODE_SUCCESS = 0,
    STORAGE_ACTION_OUT_FORMAT_STORAGE_CARD_CODE_FAILED = 1
};

enum storage_storage_location {
    STORAGE_STORAGE_LOCATION_CLOUD = 0,
    STORAGE_STORAGE_LOCATION_LOCAL = 1
};

struct storage_storage_info {
    bool cardslotstatus;
    enum storage_info_card_type cardtype;
    uint32_t capacity;
    uint32_t usedcapacity;
    bool removable;
    bool cardworkstatus;
    bool storageswitch;
    uint32_t spaceshortagethreshold;
    uint32_t availablecapacity;
};

struct storage_event_storage_shortage {
    uint32_t cardslotno;
    uint32_t capacity;
    uint32_t usedcapacity;
};

struct storage_uninstall_storage_card_in {
    uint32_t cardslotno;
};

struct storage_uninstall_storage_card_out {
    enum storage_action_out_uninstall_storage_card_code code;
};

struct storage_format_storage_card_in {
    uint32_t cardslotno;
};

struct storage_format_storage_card_out {
    enum storage_action_out_format_storage_card_code code;
};

enum STORAGE_PROPERTY {
    STORAGE_PROPERTY_STORAGEINFO = 1,
    STORAGE_PROPERTY_STORAGELOCATION = 2
};

enum STORAGE_ACTION {
    STORAGE_ACTION_UNINSTALL_STORAGE_CARD = 4,
    STORAGE_ACTION_FORMAT_STORAGE_CARD = 5
};

enum STORAGE_EVENT {
    STORAGE_EVENT_STORAGE_SHORTAGE = 3
};

struct storage_properties {
    size_t n_storageinfo;
    struct hey_array_node **storageinfo;
    enum storage_storage_location storagelocation;
};

/**
 * @brief storage service initialization
 * @param properties [storage service properties]
 * @return int32_t   [initialize result]
*/
int32_t storage_service_init(const struct storage_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
struct storage_storage_info *storage_storage_info_unpack(const uint8_t *data, size_t len);
void storage_storage_info_free_unpacked(struct storage_storage_info *data);
// less than 0 means failure
int32_t storage_storage_info_get_packed_size(const struct storage_storage_info *data);
// less than 0 means failure
int32_t storage_storage_info_pack(const struct storage_storage_info *data, uint8_t *out);

/**
 * @brief properties write callback of storage service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t storage_properties_write_cb(size_t count, uint32_t *enumerate, struct storage_properties *properties);

/**
 * @brief arrayNode properties add callback of storage service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t storage_storageinfo_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of storage service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t storage_storageinfo_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of storage service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t storage_storageinfo_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief update properties of storage service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t storage_properties_update(size_t count, uint32_t *enumerate, struct storage_properties *properties);

/**
 * @brief uninstall storage card action start callback of storage service
 * @param ctx          [action context]
 * @param action       [uninstall storage card action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t storage_uninstall_storage_card_start_cb(struct hey_action_ctx *ctx, struct storage_uninstall_storage_card_in *action, void **user_context);

/**
 * @brief uninstall storage card action send message of storage service
 * @param ctx      [action context]
 * @param action   [uninstall storage card action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t storage_uninstall_storage_card_send(struct hey_action_ctx *ctx, struct storage_uninstall_storage_card_out *action);

/**
 * @brief uninstall storage card action stop of storage service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t storage_uninstall_storage_card_stop(struct hey_action_ctx *ctx);

/**
 * @brief uninstall storage card action stop callback of storage service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void storage_uninstall_storage_card_stop_cb(void *user_context);

/**
 * @brief format storage card action start callback of storage service
 * @param ctx          [action context]
 * @param action       [format storage card action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t storage_format_storage_card_start_cb(struct hey_action_ctx *ctx, struct storage_format_storage_card_in *action, void **user_context);

/**
 * @brief format storage card action send message of storage service
 * @param ctx      [action context]
 * @param action   [format storage card action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t storage_format_storage_card_send(struct hey_action_ctx *ctx, struct storage_format_storage_card_out *action);

/**
 * @brief format storage card action stop of storage service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t storage_format_storage_card_stop(struct hey_action_ctx *ctx);

/**
 * @brief format storage card action stop callback of storage service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void storage_format_storage_card_stop_cb(void *user_context);

/**
 * @brief storage shortage notify of storage service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t storage_storage_shortage_notify(struct storage_event_storage_shortage *event, struct hey_event_notify_attr *attr);

/**
 * @brief storage shortage notify result callback of storage service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void storage_storage_shortage_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* STORAGE_SERVICE_H */
