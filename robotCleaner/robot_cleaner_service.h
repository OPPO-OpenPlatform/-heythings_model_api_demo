/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: robotCleaner.proto */

#ifndef ROBOT_CLEANER_SERVICE_H
#define ROBOT_CLEANER_SERVICE_H

#include "hey/types.h"

enum robot_cleaner_action_motion_control_motion_direction {
    ROBOT_CLEANER_ACTION_MOTION_CONTROL_MOTION_DIRECTION_STOP = 0,
    ROBOT_CLEANER_ACTION_MOTION_CONTROL_MOTION_DIRECTION_UP = 1,
    ROBOT_CLEANER_ACTION_MOTION_CONTROL_MOTION_DIRECTION_DOWN = 2,
    ROBOT_CLEANER_ACTION_MOTION_CONTROL_MOTION_DIRECTION_LEFT = 3,
    ROBOT_CLEANER_ACTION_MOTION_CONTROL_MOTION_DIRECTION_RIGHT = 4,
    ROBOT_CLEANER_ACTION_MOTION_CONTROL_MOTION_DIRECTION_FORWARD = 5,
    ROBOT_CLEANER_ACTION_MOTION_CONTROL_MOTION_DIRECTION_BACK = 6
};

enum robot_cleaner_action_out_situ_clean_code {
    ROBOT_CLEANER_ACTION_OUT_SITU_CLEAN_CODE_SUCCESS = 0,
  /*
   *在充电桩，无法执行
   */
    ROBOT_CLEANER_ACTION_OUT_SITU_CLEAN_CODE_IN_CHARGING_PILE = 1,
    ROBOT_CLEANER_ACTION_OUT_SITU_CLEAN_CODE_BUSY = 2
};

enum robot_cleaner_operation_mode {
    ROBOT_CLEANER_OPERATION_MODE_STOP = 0,
    ROBOT_CLEANER_OPERATION_MODE_PAUSE = 1,
    ROBOT_CLEANER_OPERATION_MODE_RESUME = 2,
    ROBOT_CLEANER_OPERATION_MODE_CANCEL = 3,
    ROBOT_CLEANER_OPERATION_MODE_START = 4
};

enum robot_cleaner_robot_clean_mode {
  /*
   *随机清扫
   */
    ROBOT_CLEANER_ROBOT_CLEAN_MODE_RANDOM = 0,
  /*
   *规划清扫
   */
    ROBOT_CLEANER_ROBOT_CLEAN_MODE_PLANNING = 1,
  /*
   *分区清扫
   */
    ROBOT_CLEANER_ROBOT_CLEAN_MODE_SECTORBASED = 2,
  /*
   *原地清扫
   */
    ROBOT_CLEANER_ROBOT_CLEAN_MODE_SPOT = 3,
  /*
   *沿边清扫
   */
    ROBOT_CLEANER_ROBOT_CLEAN_MODE_ALONGMARGIN = 4,
  /*
   *螺旋清扫
   */
    ROBOT_CLEANER_ROBOT_CLEAN_MODE_SPIRAL = 5,
  /*
   *定点清扫
   */
    ROBOT_CLEANER_ROBOT_CLEAN_MODE_DESIGNATED_POINT = 6
};

enum robot_cleaner_robot_suction_level {
    ROBOT_CLEANER_ROBOT_SUCTION_LEVEL_AUTO_LEVEL = 0,
    ROBOT_CLEANER_ROBOT_SUCTION_LEVEL_LEVEL_ONE = 1,
    ROBOT_CLEANER_ROBOT_SUCTION_LEVEL_LEVEL_TWO = 2,
    ROBOT_CLEANER_ROBOT_SUCTION_LEVEL_LEVEL_THREE = 3,
    ROBOT_CLEANER_ROBOT_SUCTION_LEVEL_LEVEL_FOUR = 4
};

enum robot_cleaner_robot_job_status {
  /*
   *待机中
   */
    ROBOT_CLEANER_ROBOT_JOB_STATUS_IDLE = 0,
  /*
   *回充中
   */
    ROBOT_CLEANER_ROBOT_JOB_STATUS_HOMING = 1,
  /*
   *扫地中
   */
    ROBOT_CLEANER_ROBOT_JOB_STATUS_MOVING = 2,
  /*
   *清扫暂停中
   */
    ROBOT_CLEANER_ROBOT_JOB_STATUS_CLEANING_PAUSED = 3,
  /*
   *绘制地图中
   */
    ROBOT_CLEANER_ROBOT_JOB_STATUS_MAPPING = 4,
  /*
   *清洗中
   */
    ROBOT_CLEANER_ROBOT_JOB_STATUS_CLEANING = 5,
  /*
   *遥控中
   */
    ROBOT_CLEANER_ROBOT_JOB_STATUS_REMOTE_CONTROL = 6,
  /*
   *回充暂停中
   */
    ROBOT_CLEANER_ROBOT_JOB_STATUS_RECHARGING_PAUSED = 7
};

enum robot_cleaner_robot_supply_water_rate {
    ROBOT_CLEANER_ROBOT_SUPPLY_WATER_RATE_AUTO_RATE = 0,
    ROBOT_CLEANER_ROBOT_SUPPLY_WATER_RATE_RATE_ONE = 1,
    ROBOT_CLEANER_ROBOT_SUPPLY_WATER_RATE_RATE_TWO = 2,
    ROBOT_CLEANER_ROBOT_SUPPLY_WATER_RATE_RATE_THREE = 3
};

enum robot_cleaner_zone_code {
    ROBOT_CLEANER_ZONE_CODE_SET_SUCCESS = 0,
  /*
   *地图不存在
   */
    ROBOT_CLEANER_ZONE_CODE_MAP_DOES_NOT_EXIST = 1,
  /*
   *禁区内不可设置
   */
    ROBOT_CLEANER_ZONE_CODE_CANNOT_BE_SET_IN_FORBIDDEN_ZONE = 2,
  /*
   *充电桩不可在禁区内
   */
    ROBOT_CLEANER_ZONE_CODE_CHARGING_PILES_NOT_ALLOWED_IN_FORBIDDEN_ZONE = 3
};

enum robot_cleaner_clean_code {
    ROBOT_CLEANER_CLEAN_CODE_REACH_SUCCESS = 0,
    ROBOT_CLEANER_CLEAN_CODE_ROBOT_BUSY = 1,
  /*
   *非法目的地
   */
    ROBOT_CLEANER_CLEAN_CODE_ILLEGAL_DESTINATION = 2,
  /*
   *规划路线失败
   */
    ROBOT_CLEANER_CLEAN_CODE_FAILED_TO_PLAN_ROUTE = 3,
    ROBOT_CLEANER_CLEAN_CODE_TASK_TIMEOUT = 4
};

struct robot_cleaner_sound_alarm_in {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_sound_alarm_out {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_robot_homing_in {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_robot_homing_out {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_stop_homing_in {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_stop_homing_out {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_motion_control_in {
    enum robot_cleaner_action_motion_control_motion_direction motiondirection;
};

struct robot_cleaner_motion_control_out {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_side_brush_reset_in {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_side_brush_reset_out {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_roll_brush_reset_in {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_roll_brush_reset_out {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_hepa_reset_in {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_hepa_reset_out {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_filter_reset_in {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_filter_reset_out {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_event_side_brush_replacement {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_event_roll_brush_replacement {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_event_hepa_replacement {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_event_filter_replacement {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_event_dust_box_full {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_event_overload_protection {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_no_disturbing_period {
    bool status;
    uint32_t week;
    uint32_t fromhour;
    uint32_t fromminute;
    uint32_t fromsec;
    uint32_t tohour;
    uint32_t tominute;
    uint32_t tosec;
};

struct robot_cleaner_rectangle {
    int32_t x0;
    int32_t y0;
    int32_t x1;
    int32_t y1;
};

struct robot_cleaner_rectangle_clean_zone_seting_in {
    size_t n_zone;
    struct robot_cleaner_rectangle **zone;
};

struct robot_cleaner_rectangle_clean_zone_seting_out {
    enum robot_cleaner_zone_code code;
};

struct robot_cleaner_rectangle_clean_zone_seting_detail {
    struct robot_cleaner_rectangle *zone;
};

struct robot_cleaner_rectangle_forbidden_zone_seting_in {
    size_t n_zone;
    struct robot_cleaner_rectangle **zone;
};

struct robot_cleaner_rectangle_forbidden_zone_seting_out {
    enum robot_cleaner_zone_code code;
};

struct robot_cleaner_rectangle_forbidden_zone_seting_detail {
    struct robot_cleaner_rectangle *zone;
};

struct robot_cleaner_in_situ_clean_in {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_in_situ_clean_out {
    enum robot_cleaner_action_out_situ_clean_code code;
};

struct robot_cleaner_designated_point_clean_in {
    uint32_t timeout;
    int32_t x;
    int32_t y;
};

struct robot_cleaner_designated_point_clean_out {
    enum robot_cleaner_clean_code code;
};

struct robot_cleaner_designated_room_clean_in {
    uint32_t timeout;
    uint32_t roomid;
};

struct robot_cleaner_designated_room_clean_out {
    enum robot_cleaner_clean_code code;
};

struct robot_cleaner_robot_map_reset_in {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_robot_map_reset_out {
    enum robot_cleaner_zone_code code;
};

struct robot_cleaner_room_clean_seting {
    char *name;
    enum robot_cleaner_robot_suction_level robotsuctionlevel;
    enum robot_cleaner_robot_supply_water_rate robotsupplywaterrate;
    uint32_t cleantimes;
};

struct robot_cleaner_event_start_regular_cleaning {
    char __place_holder__; // make compiler happy
};

struct robot_cleaner_designated_point_clean_seting_detail {
    int32_t x;
    int32_t y;
};

enum ROBOT_CLEANER_PROPERTY {
    ROBOT_CLEANER_PROPERTY_POWER = 1,
    ROBOT_CLEANER_PROPERTY_OPERATIONMODE = 2,
    ROBOT_CLEANER_PROPERTY_ROBOTJOBSTATUS = 3,
    ROBOT_CLEANER_PROPERTY_ROBOTCLEANMODE = 4,
    ROBOT_CLEANER_PROPERTY_ROBOTSUCTIONLEVEL = 5,
    ROBOT_CLEANER_PROPERTY_SOUNDVOLUME = 6,
    ROBOT_CLEANER_PROPERTY_OPERATIONTIME = 11,
    ROBOT_CLEANER_PROPERTY_REMAINTIME = 12,
    ROBOT_CLEANER_PROPERTY_CLEANAREA = 13,
    ROBOT_CLEANER_PROPERTY_PROCESSINGPERCENTAGE = 14,
    ROBOT_CLEANER_PROPERTY_TOTALCLEANTIME = 15,
    ROBOT_CLEANER_PROPERTY_TOTALCLEANAREA = 16,
    ROBOT_CLEANER_PROPERTY_TOTALCYCLE = 17,
    ROBOT_CLEANER_PROPERTY_SIDEBRUSHLEFTTIME = 18,
    ROBOT_CLEANER_PROPERTY_SIDEBRUSHLIFETIME = 19,
    ROBOT_CLEANER_PROPERTY_ROLLBRUSHLEFTTIME = 20,
    ROBOT_CLEANER_PROPERTY_ROLLBRUSHLIFETIME = 21,
    ROBOT_CLEANER_PROPERTY_HEPALEFTTIME = 22,
    ROBOT_CLEANER_PROPERTY_HEPALIFETIME = 23,
    ROBOT_CLEANER_PROPERTY_FILTERLEFTTIME = 24,
    ROBOT_CLEANER_PROPERTY_FILTERLIFTTIME = 25,
    ROBOT_CLEANER_PROPERTY_NODISTURBINGPERIOD = 36,
    ROBOT_CLEANER_PROPERTY_ROBOTSUPPLYWATERRATE = 37,
    ROBOT_CLEANER_PROPERTY_CARPETINCREASESSUCTION = 38,
    ROBOT_CLEANER_PROPERTY_RECTANGLECLEANZONESETINGDETAIL = 40,
    ROBOT_CLEANER_PROPERTY_RECTANGLEFORBIDDENZONESETINGDETAIL = 42,
    ROBOT_CLEANER_PROPERTY_ROOMCLEANSETING = 47,
    ROBOT_CLEANER_PROPERTY_CURRENTMAPID = 48,
    ROBOT_CLEANER_PROPERTY_DESIGNATEDPOINTCLEANSETINGDETAIL = 50,
    ROBOT_CLEANER_PROPERTY_BREAKPOINTRESUMEENABLED = 51
};

enum ROBOT_CLEANER_ACTION {
    ROBOT_CLEANER_ACTION_SOUND_ALARM = 7,
    ROBOT_CLEANER_ACTION_ROBOT_HOMING = 8,
    ROBOT_CLEANER_ACTION_STOP_HOMING = 9,
    ROBOT_CLEANER_ACTION_MOTION_CONTROL = 10,
    ROBOT_CLEANER_ACTION_SIDE_BRUSH_RESET = 26,
    ROBOT_CLEANER_ACTION_ROLL_BRUSH_RESET = 27,
    ROBOT_CLEANER_ACTION_HEPA_RESET = 28,
    ROBOT_CLEANER_ACTION_FILTER_RESET = 29,
    ROBOT_CLEANER_ACTION_RECTANGLE_CLEAN_ZONE_SETING = 39,
    ROBOT_CLEANER_ACTION_RECTANGLE_FORBIDDEN_ZONE_SETING = 41,
    ROBOT_CLEANER_ACTION_DESIGNATED_POINT_CLEAN = 44,
    ROBOT_CLEANER_ACTION_DESIGNATED_ROOM_CLEAN = 45,
    ROBOT_CLEANER_ACTION_ROBOT_MAP_RESET = 46
};

enum ROBOT_CLEANER_EVENT {
    ROBOT_CLEANER_EVENT_SIDE_BRUSH_REPLACEMENT = 30,
    ROBOT_CLEANER_EVENT_ROLL_BRUSH_REPLACEMENT = 31,
    ROBOT_CLEANER_EVENT_HEPA_REPLACEMENT = 32,
    ROBOT_CLEANER_EVENT_FILTER_REPLACEMENT = 33,
    ROBOT_CLEANER_EVENT_DUST_BOX_FULL = 34,
    ROBOT_CLEANER_EVENT_OVERLOAD_PROTECTION = 35,
    ROBOT_CLEANER_EVENT_START_REGULAR_CLEANING = 49
};

struct robot_cleaner_properties {
    bool power;
    enum robot_cleaner_operation_mode operationmode;
    enum robot_cleaner_robot_job_status robotjobstatus;
    enum robot_cleaner_robot_clean_mode robotcleanmode;
    enum robot_cleaner_robot_suction_level robotsuctionlevel;
    uint32_t soundvolume;
    uint32_t operationtime;
    uint32_t remaintime;
    uint32_t cleanarea;
    uint32_t processingpercentage;
    uint32_t totalcleantime;
    uint32_t totalcleanarea;
    uint32_t totalcycle;
    uint32_t sidebrushlefttime;
    uint32_t sidebrushlifetime;
    uint32_t rollbrushlefttime;
    uint32_t rollbrushlifetime;
    uint32_t hepalefttime;
    uint32_t hepalifetime;
    uint32_t filterlefttime;
    uint32_t filterlifttime;
    struct robot_cleaner_no_disturbing_period *nodisturbingperiod;
    enum robot_cleaner_robot_supply_water_rate robotsupplywaterrate;
    bool carpetincreasessuction;
    size_t n_rectanglecleanzonesetingdetail;
    struct hey_array_node **rectanglecleanzonesetingdetail;
    size_t n_rectangleforbiddenzonesetingdetail;
    struct hey_array_node **rectangleforbiddenzonesetingdetail;
    size_t n_roomcleanseting;
    struct hey_array_node **roomcleanseting;
    uint32_t currentmapid;
    struct robot_cleaner_designated_point_clean_seting_detail *designatedpointcleansetingdetail;
    bool breakpointresumeenabled;
};

/**
 * @brief robot cleaner service initialization
 * @param properties [robot cleaner service properties]
 * @return int32_t   [initialize result]
*/
int32_t robot_cleaner_service_init(const struct robot_cleaner_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
struct robot_cleaner_rectangle_clean_zone_seting_detail *robot_cleaner_rectangle_clean_zone_seting_detail_unpack(const uint8_t *data, size_t len);
void robot_cleaner_rectangle_clean_zone_seting_detail_free_unpacked(struct robot_cleaner_rectangle_clean_zone_seting_detail *data);
// less than 0 means failure
int32_t robot_cleaner_rectangle_clean_zone_seting_detail_get_packed_size(const struct robot_cleaner_rectangle_clean_zone_seting_detail *data);
// less than 0 means failure
int32_t robot_cleaner_rectangle_clean_zone_seting_detail_pack(const struct robot_cleaner_rectangle_clean_zone_seting_detail *data, uint8_t *out);

struct robot_cleaner_rectangle_forbidden_zone_seting_detail *robot_cleaner_rectangle_forbidden_zone_seting_detail_unpack(const uint8_t *data, size_t len);
void robot_cleaner_rectangle_forbidden_zone_seting_detail_free_unpacked(struct robot_cleaner_rectangle_forbidden_zone_seting_detail *data);
// less than 0 means failure
int32_t robot_cleaner_rectangle_forbidden_zone_seting_detail_get_packed_size(const struct robot_cleaner_rectangle_forbidden_zone_seting_detail *data);
// less than 0 means failure
int32_t robot_cleaner_rectangle_forbidden_zone_seting_detail_pack(const struct robot_cleaner_rectangle_forbidden_zone_seting_detail *data, uint8_t *out);

struct robot_cleaner_room_clean_seting *robot_cleaner_room_clean_seting_unpack(const uint8_t *data, size_t len);
void robot_cleaner_room_clean_seting_free_unpacked(struct robot_cleaner_room_clean_seting *data);
// less than 0 means failure
int32_t robot_cleaner_room_clean_seting_get_packed_size(const struct robot_cleaner_room_clean_seting *data);
// less than 0 means failure
int32_t robot_cleaner_room_clean_seting_pack(const struct robot_cleaner_room_clean_seting *data, uint8_t *out);

/**
 * @brief properties write callback of robot cleaner service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t robot_cleaner_properties_write_cb(size_t count, uint32_t *enumerate, struct robot_cleaner_properties *properties);

/**
 * @brief arrayNode properties add callback of robot cleaner service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t robot_cleaner_rectanglecleanzonesetingdetail_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of robot cleaner service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t robot_cleaner_rectanglecleanzonesetingdetail_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of robot cleaner service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t robot_cleaner_rectanglecleanzonesetingdetail_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief arrayNode properties add callback of robot cleaner service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t robot_cleaner_rectangleforbiddenzonesetingdetail_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of robot cleaner service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t robot_cleaner_rectangleforbiddenzonesetingdetail_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of robot cleaner service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t robot_cleaner_rectangleforbiddenzonesetingdetail_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief arrayNode properties add callback of robot cleaner service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t robot_cleaner_roomcleanseting_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of robot cleaner service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t robot_cleaner_roomcleanseting_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of robot cleaner service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t robot_cleaner_roomcleanseting_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief update properties of robot cleaner service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t robot_cleaner_properties_update(size_t count, uint32_t *enumerate, struct robot_cleaner_properties *properties);

/**
 * @brief sound alarm action start callback of robot cleaner service
 * @param ctx          [action context]
 * @param action       [sound alarm action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t robot_cleaner_sound_alarm_start_cb(struct hey_action_ctx *ctx, struct robot_cleaner_sound_alarm_in *action, void **user_context);

/**
 * @brief sound alarm action send message of robot cleaner service
 * @param ctx      [action context]
 * @param action   [sound alarm action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t robot_cleaner_sound_alarm_send(struct hey_action_ctx *ctx, struct robot_cleaner_sound_alarm_out *action);

/**
 * @brief sound alarm action stop of robot cleaner service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t robot_cleaner_sound_alarm_stop(struct hey_action_ctx *ctx);

/**
 * @brief sound alarm action stop callback of robot cleaner service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void robot_cleaner_sound_alarm_stop_cb(void *user_context);

/**
 * @brief robot homing action start callback of robot cleaner service
 * @param ctx          [action context]
 * @param action       [robot homing action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t robot_cleaner_robot_homing_start_cb(struct hey_action_ctx *ctx, struct robot_cleaner_robot_homing_in *action, void **user_context);

/**
 * @brief robot homing action send message of robot cleaner service
 * @param ctx      [action context]
 * @param action   [robot homing action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t robot_cleaner_robot_homing_send(struct hey_action_ctx *ctx, struct robot_cleaner_robot_homing_out *action);

/**
 * @brief robot homing action stop of robot cleaner service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t robot_cleaner_robot_homing_stop(struct hey_action_ctx *ctx);

/**
 * @brief robot homing action stop callback of robot cleaner service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void robot_cleaner_robot_homing_stop_cb(void *user_context);

/**
 * @brief stop homing action start callback of robot cleaner service
 * @param ctx          [action context]
 * @param action       [stop homing action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t robot_cleaner_stop_homing_start_cb(struct hey_action_ctx *ctx, struct robot_cleaner_stop_homing_in *action, void **user_context);

/**
 * @brief stop homing action send message of robot cleaner service
 * @param ctx      [action context]
 * @param action   [stop homing action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t robot_cleaner_stop_homing_send(struct hey_action_ctx *ctx, struct robot_cleaner_stop_homing_out *action);

/**
 * @brief stop homing action stop of robot cleaner service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t robot_cleaner_stop_homing_stop(struct hey_action_ctx *ctx);

/**
 * @brief stop homing action stop callback of robot cleaner service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void robot_cleaner_stop_homing_stop_cb(void *user_context);

/**
 * @brief motion control action start callback of robot cleaner service
 * @param ctx          [action context]
 * @param action       [motion control action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t robot_cleaner_motion_control_start_cb(struct hey_action_ctx *ctx, struct robot_cleaner_motion_control_in *action, void **user_context);

/**
 * @brief motion control action send message of robot cleaner service
 * @param ctx      [action context]
 * @param action   [motion control action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t robot_cleaner_motion_control_send(struct hey_action_ctx *ctx, struct robot_cleaner_motion_control_out *action);

/**
 * @brief motion control action stop of robot cleaner service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t robot_cleaner_motion_control_stop(struct hey_action_ctx *ctx);

/**
 * @brief motion control action stop callback of robot cleaner service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void robot_cleaner_motion_control_stop_cb(void *user_context);

/**
 * @brief side brush reset action start callback of robot cleaner service
 * @param ctx          [action context]
 * @param action       [side brush reset action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t robot_cleaner_side_brush_reset_start_cb(struct hey_action_ctx *ctx, struct robot_cleaner_side_brush_reset_in *action, void **user_context);

/**
 * @brief side brush reset action send message of robot cleaner service
 * @param ctx      [action context]
 * @param action   [side brush reset action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t robot_cleaner_side_brush_reset_send(struct hey_action_ctx *ctx, struct robot_cleaner_side_brush_reset_out *action);

/**
 * @brief side brush reset action stop of robot cleaner service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t robot_cleaner_side_brush_reset_stop(struct hey_action_ctx *ctx);

/**
 * @brief side brush reset action stop callback of robot cleaner service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void robot_cleaner_side_brush_reset_stop_cb(void *user_context);

/**
 * @brief roll brush reset action start callback of robot cleaner service
 * @param ctx          [action context]
 * @param action       [roll brush reset action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t robot_cleaner_roll_brush_reset_start_cb(struct hey_action_ctx *ctx, struct robot_cleaner_roll_brush_reset_in *action, void **user_context);

/**
 * @brief roll brush reset action send message of robot cleaner service
 * @param ctx      [action context]
 * @param action   [roll brush reset action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t robot_cleaner_roll_brush_reset_send(struct hey_action_ctx *ctx, struct robot_cleaner_roll_brush_reset_out *action);

/**
 * @brief roll brush reset action stop of robot cleaner service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t robot_cleaner_roll_brush_reset_stop(struct hey_action_ctx *ctx);

/**
 * @brief roll brush reset action stop callback of robot cleaner service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void robot_cleaner_roll_brush_reset_stop_cb(void *user_context);

/**
 * @brief hepa reset action start callback of robot cleaner service
 * @param ctx          [action context]
 * @param action       [hepa reset action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t robot_cleaner_hepa_reset_start_cb(struct hey_action_ctx *ctx, struct robot_cleaner_hepa_reset_in *action, void **user_context);

/**
 * @brief hepa reset action send message of robot cleaner service
 * @param ctx      [action context]
 * @param action   [hepa reset action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t robot_cleaner_hepa_reset_send(struct hey_action_ctx *ctx, struct robot_cleaner_hepa_reset_out *action);

/**
 * @brief hepa reset action stop of robot cleaner service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t robot_cleaner_hepa_reset_stop(struct hey_action_ctx *ctx);

/**
 * @brief hepa reset action stop callback of robot cleaner service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void robot_cleaner_hepa_reset_stop_cb(void *user_context);

/**
 * @brief filter reset action start callback of robot cleaner service
 * @param ctx          [action context]
 * @param action       [filter reset action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t robot_cleaner_filter_reset_start_cb(struct hey_action_ctx *ctx, struct robot_cleaner_filter_reset_in *action, void **user_context);

/**
 * @brief filter reset action send message of robot cleaner service
 * @param ctx      [action context]
 * @param action   [filter reset action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t robot_cleaner_filter_reset_send(struct hey_action_ctx *ctx, struct robot_cleaner_filter_reset_out *action);

/**
 * @brief filter reset action stop of robot cleaner service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t robot_cleaner_filter_reset_stop(struct hey_action_ctx *ctx);

/**
 * @brief filter reset action stop callback of robot cleaner service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void robot_cleaner_filter_reset_stop_cb(void *user_context);

/**
 * @brief rectangle clean zone seting action start callback of robot cleaner service
 * @param ctx          [action context]
 * @param action       [rectangle clean zone seting action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t robot_cleaner_rectangle_clean_zone_seting_start_cb(struct hey_action_ctx *ctx, struct robot_cleaner_rectangle_clean_zone_seting_in *action, void **user_context);

/**
 * @brief rectangle clean zone seting action send message of robot cleaner service
 * @param ctx      [action context]
 * @param action   [rectangle clean zone seting action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t robot_cleaner_rectangle_clean_zone_seting_send(struct hey_action_ctx *ctx, struct robot_cleaner_rectangle_clean_zone_seting_out *action);

/**
 * @brief rectangle clean zone seting action stop of robot cleaner service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t robot_cleaner_rectangle_clean_zone_seting_stop(struct hey_action_ctx *ctx);

/**
 * @brief rectangle clean zone seting action stop callback of robot cleaner service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void robot_cleaner_rectangle_clean_zone_seting_stop_cb(void *user_context);

/**
 * @brief rectangle forbidden zone seting action start callback of robot cleaner service
 * @param ctx          [action context]
 * @param action       [rectangle forbidden zone seting action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t robot_cleaner_rectangle_forbidden_zone_seting_start_cb(struct hey_action_ctx *ctx, struct robot_cleaner_rectangle_forbidden_zone_seting_in *action, void **user_context);

/**
 * @brief rectangle forbidden zone seting action send message of robot cleaner service
 * @param ctx      [action context]
 * @param action   [rectangle forbidden zone seting action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t robot_cleaner_rectangle_forbidden_zone_seting_send(struct hey_action_ctx *ctx, struct robot_cleaner_rectangle_forbidden_zone_seting_out *action);

/**
 * @brief rectangle forbidden zone seting action stop of robot cleaner service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t robot_cleaner_rectangle_forbidden_zone_seting_stop(struct hey_action_ctx *ctx);

/**
 * @brief rectangle forbidden zone seting action stop callback of robot cleaner service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void robot_cleaner_rectangle_forbidden_zone_seting_stop_cb(void *user_context);

/**
 * @brief designated point clean action start callback of robot cleaner service
 * @param ctx          [action context]
 * @param action       [designated point clean action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t robot_cleaner_designated_point_clean_start_cb(struct hey_action_ctx *ctx, struct robot_cleaner_designated_point_clean_in *action, void **user_context);

/**
 * @brief designated point clean action send message of robot cleaner service
 * @param ctx      [action context]
 * @param action   [designated point clean action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t robot_cleaner_designated_point_clean_send(struct hey_action_ctx *ctx, struct robot_cleaner_designated_point_clean_out *action);

/**
 * @brief designated point clean action stop of robot cleaner service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t robot_cleaner_designated_point_clean_stop(struct hey_action_ctx *ctx);

/**
 * @brief designated point clean action stop callback of robot cleaner service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void robot_cleaner_designated_point_clean_stop_cb(void *user_context);

/**
 * @brief designated room clean action start callback of robot cleaner service
 * @param ctx          [action context]
 * @param action       [designated room clean action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t robot_cleaner_designated_room_clean_start_cb(struct hey_action_ctx *ctx, struct robot_cleaner_designated_room_clean_in *action, void **user_context);

/**
 * @brief designated room clean action send message of robot cleaner service
 * @param ctx      [action context]
 * @param action   [designated room clean action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t robot_cleaner_designated_room_clean_send(struct hey_action_ctx *ctx, struct robot_cleaner_designated_room_clean_out *action);

/**
 * @brief designated room clean action stop of robot cleaner service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t robot_cleaner_designated_room_clean_stop(struct hey_action_ctx *ctx);

/**
 * @brief designated room clean action stop callback of robot cleaner service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void robot_cleaner_designated_room_clean_stop_cb(void *user_context);

/**
 * @brief robot map reset action start callback of robot cleaner service
 * @param ctx          [action context]
 * @param action       [robot map reset action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t robot_cleaner_robot_map_reset_start_cb(struct hey_action_ctx *ctx, struct robot_cleaner_robot_map_reset_in *action, void **user_context);

/**
 * @brief robot map reset action send message of robot cleaner service
 * @param ctx      [action context]
 * @param action   [robot map reset action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t robot_cleaner_robot_map_reset_send(struct hey_action_ctx *ctx, struct robot_cleaner_robot_map_reset_out *action);

/**
 * @brief robot map reset action stop of robot cleaner service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t robot_cleaner_robot_map_reset_stop(struct hey_action_ctx *ctx);

/**
 * @brief robot map reset action stop callback of robot cleaner service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void robot_cleaner_robot_map_reset_stop_cb(void *user_context);

/**
 * @brief side brush replacement notify of robot cleaner service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t robot_cleaner_side_brush_replacement_notify(struct robot_cleaner_event_side_brush_replacement *event, struct hey_event_notify_attr *attr);

/**
 * @brief side brush replacement notify result callback of robot cleaner service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void robot_cleaner_side_brush_replacement_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief roll brush replacement notify of robot cleaner service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t robot_cleaner_roll_brush_replacement_notify(struct robot_cleaner_event_roll_brush_replacement *event, struct hey_event_notify_attr *attr);

/**
 * @brief roll brush replacement notify result callback of robot cleaner service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void robot_cleaner_roll_brush_replacement_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief hepa replacement notify of robot cleaner service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t robot_cleaner_hepa_replacement_notify(struct robot_cleaner_event_hepa_replacement *event, struct hey_event_notify_attr *attr);

/**
 * @brief hepa replacement notify result callback of robot cleaner service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void robot_cleaner_hepa_replacement_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief filter replacement notify of robot cleaner service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t robot_cleaner_filter_replacement_notify(struct robot_cleaner_event_filter_replacement *event, struct hey_event_notify_attr *attr);

/**
 * @brief filter replacement notify result callback of robot cleaner service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void robot_cleaner_filter_replacement_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief dust box full notify of robot cleaner service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t robot_cleaner_dust_box_full_notify(struct robot_cleaner_event_dust_box_full *event, struct hey_event_notify_attr *attr);

/**
 * @brief dust box full notify result callback of robot cleaner service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void robot_cleaner_dust_box_full_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief overload protection notify of robot cleaner service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t robot_cleaner_overload_protection_notify(struct robot_cleaner_event_overload_protection *event, struct hey_event_notify_attr *attr);

/**
 * @brief overload protection notify result callback of robot cleaner service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void robot_cleaner_overload_protection_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief start regular cleaning notify of robot cleaner service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t robot_cleaner_start_regular_cleaning_notify(struct robot_cleaner_event_start_regular_cleaning *event, struct hey_event_notify_attr *attr);

/**
 * @brief start regular cleaning notify result callback of robot cleaner service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void robot_cleaner_start_regular_cleaning_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* ROBOT_CLEANER_SERVICE_H */
