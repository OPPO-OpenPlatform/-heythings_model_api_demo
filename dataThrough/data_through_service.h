/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: dataThrough.proto */

#ifndef DATA_THROUGH_SERVICE_H
#define DATA_THROUGH_SERVICE_H

#include "hey/types.h"

struct data_through_data_through_return_msg_in {
    struct hey_binary_data data;
    uint32_t code;
};

enum data_through_data_through_message_in {
    DATA_THROUGH_DATA_THROUGH_MESSAGE_IN_NOT_SET = 0,
    DATA_THROUGH_DATA_THROUGH_MESSAGE_IN_SENDDATA = 1,
    DATA_THROUGH_DATA_THROUGH_MESSAGE_IN_RETURNDATA = 2
};

struct data_through_data_through_in {
    enum data_through_data_through_message_in message_case;
    union {
        struct hey_binary_data senddata;
        struct data_through_data_through_return_msg_in *returndata;
    };
};

struct data_through_data_through_return_msg_out {
    struct hey_binary_data data;
    uint32_t code;
};

enum data_through_data_through_message_out {
    DATA_THROUGH_DATA_THROUGH_MESSAGE_OUT_NOT_SET = 0,
    DATA_THROUGH_DATA_THROUGH_MESSAGE_OUT_SENDDATA = 1,
    DATA_THROUGH_DATA_THROUGH_MESSAGE_OUT_RETURNDATA = 2
};

struct data_through_data_through_out {
    enum data_through_data_through_message_out message_case;
    union {
        struct hey_binary_data senddata;
        struct data_through_data_through_return_msg_out *returndata;
    };
};

struct data_through_event_beacon_through {
    struct hey_binary_data beacondata;
};

enum DATA_THROUGH_ACTION {
    DATA_THROUGH_ACTION_DATA_THROUGH = 1
};

enum DATA_THROUGH_EVENT {
    DATA_THROUGH_EVENT_BEACON_THROUGH = 2
};

struct data_through_properties {
    char __place_holder__; // make compiler happy
};

/**
 * @brief data through service initialization
 * @param properties [data through service properties]
 * @return int32_t   [initialize result]
*/
int32_t data_through_service_init(const struct data_through_properties *properties);

/**
 * @brief data through action start callback of data through service
 * @param ctx          [action context]
 * @param action       [data through action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t data_through_data_through_start_cb(struct hey_action_ctx *ctx, struct data_through_data_through_in *action, void **user_context);

/**
 * @brief data through action message receive callback of data through service
 * @param user_context [callback data which form action start callback function]
 * @param action       [data through action in]
 * @return int32_t     [action message callback handle result, 0 means success]
 */
int32_t data_through_data_through_message_cb(void *user_context, struct data_through_data_through_in *action);

/**
 * @brief data through action send message of data through service
 * @param ctx      [action context]
 * @param action   [data through action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t data_through_data_through_send(struct hey_action_ctx *ctx, struct data_through_data_through_out *action);

/**
 * @brief data through action stop of data through service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t data_through_data_through_stop(struct hey_action_ctx *ctx);

/**
 * @brief data through action stop callback of data through service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void data_through_data_through_stop_cb(void *user_context);

/**
 * @brief beacon through notify of data through service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t data_through_beacon_through_notify(struct data_through_event_beacon_through *event, struct hey_event_notify_attr *attr);

/**
 * @brief beacon through notify result callback of data through service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void data_through_beacon_through_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* DATA_THROUGH_SERVICE_H */
