/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: devDiagnosis.proto */

#ifndef DEV_DIAGNOSIS_SERVICE_H
#define DEV_DIAGNOSIS_SERVICE_H

#include "hey/types.h"

struct dev_diagnosis_upload_log_cmd_in {
    char __place_holder__; // make compiler happy
};

struct dev_diagnosis_upload_log_cmd_out {
    char __place_holder__; // make compiler happy
};

struct dev_diagnosis_get_log_data_in {
    char __place_holder__; // make compiler happy
};

struct dev_diagnosis_get_log_data_out {
    struct hey_binary_data logdata;
};

enum DEV_DIAGNOSIS_PROPERTY {
    DEV_DIAGNOSIS_PROPERTY_ENABLE = 1
};

enum DEV_DIAGNOSIS_ACTION {
    DEV_DIAGNOSIS_ACTION_UPLOAD_LOG_CMD = 2,
    DEV_DIAGNOSIS_ACTION_GET_LOG_DATA = 3
};

struct dev_diagnosis_properties {
    bool enable;
};

/**
 * @brief dev diagnosis service initialization
 * @param properties [dev diagnosis service properties]
 * @return int32_t   [initialize result]
*/
int32_t dev_diagnosis_service_init(const struct dev_diagnosis_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of dev diagnosis service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t dev_diagnosis_properties_write_cb(size_t count, uint32_t *enumerate, struct dev_diagnosis_properties *properties);

/**
 * @brief update properties of dev diagnosis service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t dev_diagnosis_properties_update(size_t count, uint32_t *enumerate, struct dev_diagnosis_properties *properties);

/**
 * @brief upload log cmd action start callback of dev diagnosis service
 * @param ctx          [action context]
 * @param action       [upload log cmd action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t dev_diagnosis_upload_log_cmd_start_cb(struct hey_action_ctx *ctx, struct dev_diagnosis_upload_log_cmd_in *action, void **user_context);

/**
 * @brief upload log cmd action send message of dev diagnosis service
 * @param ctx      [action context]
 * @param action   [upload log cmd action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t dev_diagnosis_upload_log_cmd_send(struct hey_action_ctx *ctx, struct dev_diagnosis_upload_log_cmd_out *action);

/**
 * @brief upload log cmd action stop of dev diagnosis service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t dev_diagnosis_upload_log_cmd_stop(struct hey_action_ctx *ctx);

/**
 * @brief upload log cmd action stop callback of dev diagnosis service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void dev_diagnosis_upload_log_cmd_stop_cb(void *user_context);

/**
 * @brief get log data action start callback of dev diagnosis service
 * @param ctx          [action context]
 * @param action       [get log data action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t dev_diagnosis_get_log_data_start_cb(struct hey_action_ctx *ctx, struct dev_diagnosis_get_log_data_in *action, void **user_context);

/**
 * @brief get log data action send message of dev diagnosis service
 * @param ctx      [action context]
 * @param action   [get log data action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t dev_diagnosis_get_log_data_send(struct hey_action_ctx *ctx, struct dev_diagnosis_get_log_data_out *action);

/**
 * @brief get log data action stop of dev diagnosis service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t dev_diagnosis_get_log_data_stop(struct hey_action_ctx *ctx);

/**
 * @brief get log data action stop callback of dev diagnosis service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void dev_diagnosis_get_log_data_stop_cb(void *user_context);

#endif /* DEV_DIAGNOSIS_SERVICE_H */
