/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: sf.proto */

#ifndef SF_SERVICE_H
#define SF_SERVICE_H

#include "hey/types.h"

enum SF_PROPERTY {
    SF_PROPERTY_POWER = 1,
    SF_PROPERTY_MANNULAUTOSTA = 2,
    SF_PROPERTY_FAULTSTA = 3,
    SF_PROPERTY_PRESSUREDIFFSTA = 4,
    SF_PROPERTY_VLVOPENING = 5,
    SF_PROPERTY_VLVFEEDBACK = 6,
    SF_PROPERTY_FREQSETTING = 7,
    SF_PROPERTY_FREQFEEDBACK = 8,
    SF_PROPERTY_CURRENTTEMPERATURE = 9,
    SF_PROPERTY_CURRENTTEMPERATURE2 = 10,
    SF_PROPERTY_TARGETTEMPERATURE = 11,
    SF_PROPERTY_CURRENTHUMIDITY = 12,
    SF_PROPERTY_TARGETHUMIDITY = 13,
    SF_PROPERTY_CURRENTPRES1 = 14,
    SF_PROPERTY_CURRENTPRES2 = 15,
    SF_PROPERTY_TARGETPRES1 = 16,
    SF_PROPERTY_TARGETPRES2 = 17,
    SF_PROPERTY_MINIMUMFREQ = 18,
    SF_PROPERTY_CO2 = 19,
    SF_PROPERTY_TARGETCO2 = 20
};

struct sf_properties {
    bool power;
    bool mannulautosta;
    bool faultsta;
    bool pressurediffsta;
    uint32_t vlvopening;
    uint32_t vlvfeedback;
    uint32_t freqsetting;
    uint32_t freqfeedback;
    uint32_t currenttemperature;
    uint32_t currenttemperature2;
    uint32_t targettemperature;
    uint32_t currenthumidity;
    uint32_t targethumidity;
    uint32_t currentpres1;
    uint32_t currentpres2;
    uint32_t targetpres1;
    uint32_t targetpres2;
    uint32_t minimumfreq;
    uint32_t co2;
    uint32_t targetco2;
};

/**
 * @brief sf service initialization
 * @param properties [sf service properties]
 * @return int32_t   [initialize result]
*/
int32_t sf_service_init(const struct sf_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of sf service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t sf_properties_write_cb(size_t count, uint32_t *enumerate, struct sf_properties *properties);

/**
 * @brief update properties of sf service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t sf_properties_update(size_t count, uint32_t *enumerate, struct sf_properties *properties);

#endif /* SF_SERVICE_H */
