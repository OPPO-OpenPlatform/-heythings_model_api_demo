/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: fireHydrant.proto */

#ifndef FIRE_HYDRANT_SERVICE_H
#define FIRE_HYDRANT_SERVICE_H

#include "hey/types.h"

enum fire_hydrant_open_close_state {
    FIRE_HYDRANT_OPEN_CLOSE_STATE_OPENED = 0,
    FIRE_HYDRANT_OPEN_CLOSE_STATE_CLOSED = 1,
    FIRE_HYDRANT_OPEN_CLOSE_STATE_OPENING = 2,
    FIRE_HYDRANT_OPEN_CLOSE_STATE_CLOSING = 3,
    FIRE_HYDRANT_OPEN_CLOSE_STATE_STATIONARY = 4
};

enum FIRE_HYDRANT_PROPERTY {
    FIRE_HYDRANT_PROPERTY_POWER = 1,
    FIRE_HYDRANT_PROPERTY_FAULTSTA = 2,
    FIRE_HYDRANT_PROPERTY_OPENCLOSESTATE = 3
};

struct fire_hydrant_properties {
    bool power;
    bool faultsta;
    enum fire_hydrant_open_close_state openclosestate;
};

/**
 * @brief fire hydrant service initialization
 * @param properties [fire hydrant service properties]
 * @return int32_t   [initialize result]
*/
int32_t fire_hydrant_service_init(const struct fire_hydrant_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of fire hydrant service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t fire_hydrant_properties_write_cb(size_t count, uint32_t *enumerate, struct fire_hydrant_properties *properties);

/**
 * @brief update properties of fire hydrant service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t fire_hydrant_properties_update(size_t count, uint32_t *enumerate, struct fire_hydrant_properties *properties);

#endif /* FIRE_HYDRANT_SERVICE_H */
