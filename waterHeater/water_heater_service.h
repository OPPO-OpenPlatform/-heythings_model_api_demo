/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: waterHeater.proto */

#ifndef WATER_HEATER_SERVICE_H
#define WATER_HEATER_SERVICE_H

#include "hey/types.h"

enum water_heater_machine_status {
    WATER_HEATER_MACHINE_STATUS_IDLE = 0,
    WATER_HEATER_MACHINE_STATUS_PREACTIVE = 1,
    WATER_HEATER_MACHINE_STATUS_ACTIVE = 2,
    WATER_HEATER_MACHINE_STATUS_STOPED = 3,
    WATER_HEATER_MACHINE_STATUS_ERROR = 4
};

enum water_heater_heater_status {
    WATER_HEATER_HEATER_STATUS_STATUS_HEATING = 0,
    WATER_HEATER_HEATER_STATUS_STATUS_PRESERVE = 1,
    WATER_HEATER_HEATER_STATUS_STATUS_IDLE = 2,
    WATER_HEATER_HEATER_STATUS_STATUS_APPOINTMENT = 3
};

enum water_heater_heating_mode {
    WATER_HEATER_HEATING_MODE_MODE_NONE = 0,
    WATER_HEATER_HEATING_MODE_MODE_HALF = 1,
    WATER_HEATER_HEATING_MODE_MODE_ONE = 2,
    WATER_HEATER_HEATING_MODE_MODE_EXTEND = 3
};

enum water_heater_water_heater_mode {
    WATER_HEATER_WATER_HEATER_MODE_MODE_AUTO = 0,
    WATER_HEATER_WATER_HEATER_MODE_MODE_SUMMER = 1,
    WATER_HEATER_WATER_HEATER_MODE_MODE_WINTER = 2,
    WATER_HEATER_WATER_HEATER_MODE_MODE_SPRINGFALL = 3
};

enum water_heater_water_heater_scene {
    WATER_HEATER_WATER_HEATER_SCENE_SCENE_MANUAL = 0,
    WATER_HEATER_WATER_HEATER_SCENE_SCENE_LIFE = 1,
    WATER_HEATER_WATER_HEATER_SCENE_SCENE_SHOWER = 2,
    WATER_HEATER_WATER_HEATER_SCENE_SCENE_BATHTUB = 3,
    WATER_HEATER_WATER_HEATER_SCENE_SCENE_CONFORT = 4,
    WATER_HEATER_WATER_HEATER_SCENE_SCENE_FAST = 5,
    WATER_HEATER_WATER_HEATER_SCENE_SCENE_ONEPERSON = 6,
    WATER_HEATER_WATER_HEATER_SCENE_SCENE_TWOPERSON = 7,
    WATER_HEATER_WATER_HEATER_SCENE_SCENE_THREEPERSON = 8,
    WATER_HEATER_WATER_HEATER_SCENE_SCENE_ELDERLY = 9,
    WATER_HEATER_WATER_HEATER_SCENE_SCENE_ADULT = 10,
    WATER_HEATER_WATER_HEATER_SCENE_SCENE_KID = 11,
    WATER_HEATER_WATER_HEATER_SCENE_SCENE_KITCHEN = 12
};

enum water_heater_heating_power {
    WATER_HEATER_HEATING_POWER_POWER_NONE = 0,
    WATER_HEATER_HEATING_POWER_POWER_ONE = 1,
    WATER_HEATER_HEATING_POWER_POWER_TWO = 2
};

enum water_heater_frequency_hot_gear {
    WATER_HEATER_FREQUENCY_HOT_GEAR_GEAR_NONE = 0,
    WATER_HEATER_FREQUENCY_HOT_GEAR_GEAR_ONE = 1,
    WATER_HEATER_FREQUENCY_HOT_GEAR_GEAR_TWO = 2
};

enum water_heater_sterilization_period {
    WATER_HEATER_STERILIZATION_PERIOD_PERIOD_NONE = 0,
    WATER_HEATER_STERILIZATION_PERIOD_PERIOD_ONE = 1,
    WATER_HEATER_STERILIZATION_PERIOD_PERION_TWO = 2,
    WATER_HEATER_STERILIZATION_PERIOD_PERION_THREE = 3
};

enum water_heater_water_quality {
  /*
   *最优
   */
    WATER_HEATER_WATER_QUALITY_LEVEL_ONE = 0,
    WATER_HEATER_WATER_QUALITY_LEVEL_TWO = 1,
    WATER_HEATER_WATER_QUALITY_LEVEL_THREE = 2
};

enum water_heater_morning_night_bath {
    WATER_HEATER_MORNING_NIGHT_BATH_CLOSE = 0,
    WATER_HEATER_MORNING_NIGHT_BATH_MORNING = 1,
    WATER_HEATER_MORNING_NIGHT_BATH_NIGHT = 2,
    WATER_HEATER_MORNING_NIGHT_BATH_MORNINGANDNIGHT = 3
};

enum water_heater_bathtub_water_level {
    WATER_HEATER_BATHTUB_WATER_LEVEL_BATHTUB_NONE = 0,
    WATER_HEATER_BATHTUB_WATER_LEVEL_BATHTUB_ONE = 1,
    WATER_HEATER_BATHTUB_WATER_LEVEL_BATHTUB_TWO = 2
};

enum water_heater_bubble_mode {
    WATER_HEATER_BUBBLE_MODE_BUBBLE_CLOSE = 0,
    WATER_HEATER_BUBBLE_MODE_BUBBLE_OPEN = 1,
    WATER_HEATER_BUBBLE_MODE_BUBBLE_HOT = 2,
    WATER_HEATER_BUBBLE_MODE_BUBBLE_COLD = 3
};

enum water_heater_sterilization_mode {
    WATER_HEATER_STERILIZATION_MODE_STERILIZATION_CLOSE = 0,
    WATER_HEATER_STERILIZATION_MODE_STERILIZATION_HOT = 1,
    WATER_HEATER_STERILIZATION_MODE_STERILIZATION_COLD = 2
};

enum water_heater_displaying_temp_unit {
    WATER_HEATER_DISPLAYING_TEMP_UNIT_UNIT_K = 0,
    WATER_HEATER_DISPLAYING_TEMP_UNIT_UNIT_F = 1,
    WATER_HEATER_DISPLAYING_TEMP_UNIT_UNIT_C = 2
};

enum water_heater_gesture_type {
    WATER_HEATER_GESTURE_TYPE_TYPE_kitchenWash = 0,
    WATER_HEATER_GESTURE_TYPE_TYPE_POWER = 1,
    WATER_HEATER_GESTURE_TYPE_TYPE_COLDWATERPRESSURE = 2,
    WATER_HEATER_GESTURE_TYPE_TYPE_COLDWATER = 3,
    WATER_HEATER_GESTURE_TYPE_TYPE_PERSONALMODE = 4
};

struct water_heater_user_define_temp {
    bool status;
    uint32_t temperature;
};

struct water_heater_water_quality_reset_in {
    char __place_holder__; // make compiler happy
};

struct water_heater_water_quality_reset_out {
    char __place_holder__; // make compiler happy
};

struct water_heater_mg_reset_in {
    char __place_holder__; // make compiler happy
};

struct water_heater_mg_reset_out {
    char __place_holder__; // make compiler happy
};

struct water_heater_water_consumption_reset_in {
    char __place_holder__; // make compiler happy
};

struct water_heater_water_consumption_reset_out {
    char __place_holder__; // make compiler happy
};

struct water_heater_device_factory_restore_in {
    char __place_holder__; // make compiler happy
};

struct water_heater_device_factory_restore_out {
    char __place_holder__; // make compiler happy
};

struct water_heater_cold_water_appointment {
    bool enable;
    uint32_t week;
    uint32_t fromsecond;
    uint32_t frommin;
    uint32_t fromhour;
    uint32_t tosecond;
    uint32_t tomin;
    uint32_t tohour;
};

struct water_heater_cold_water_power_appointment {
    bool enable;
    uint32_t week;
    uint32_t fromsecond;
    uint32_t frommin;
    uint32_t fromhour;
    uint32_t tosecond;
    uint32_t tomin;
    uint32_t tohour;
};

enum WATER_HEATER_PROPERTY {
    WATER_HEATER_PROPERTY_POWER = 1,
    WATER_HEATER_PROPERTY_CURRENTTEMPERATURE = 2,
    WATER_HEATER_PROPERTY_TARGETTEMPERATURE = 3,
    WATER_HEATER_PROPERTY_REMAINTIME = 4,
    WATER_HEATER_PROPERTY_HOTWATERLEVEL = 5,
    WATER_HEATER_PROPERTY_HEATERSTATUS = 6,
    WATER_HEATER_PROPERTY_HEATINGMODE = 7,
    WATER_HEATER_PROPERTY_WATERHEATERMODE = 8,
    WATER_HEATER_PROPERTY_WATERHEATERSCENE = 9,
    WATER_HEATER_PROPERTY_STERILIZATIONENABLED = 10,
    WATER_HEATER_PROPERTY_ECO = 11,
    WATER_HEATER_PROPERTY_SLEEP = 12,
    WATER_HEATER_PROPERTY_VOLUME = 13,
    WATER_HEATER_PROPERTY_CHILDLOCKENABLED = 14,
    WATER_HEATER_PROPERTY_SCREENDISPLAYENABLED = 15,
    WATER_HEATER_PROPERTY_MGUSEDPERCENT = 16,
    WATER_HEATER_PROPERTY_USERDEFINETEMP = 17,
    WATER_HEATER_PROPERTY_HEATINGPOWER = 18,
    WATER_HEATER_PROPERTY_TPLUSHOT = 19,
    WATER_HEATER_PROPERTY_AUTOPOWEROFF = 20,
    WATER_HEATER_PROPERTY_ALWAYSTEMPDETECTION = 21,
    WATER_HEATER_PROPERTY_SCENEMODEENABLED = 22,
    WATER_HEATER_PROPERTY_WATERFLOWSTATUS = 23,
    WATER_HEATER_PROPERTY_FREQUENCYHOT = 24,
    WATER_HEATER_PROPERTY_FREQUENCYHOTGEAR = 25,
    WATER_HEATER_PROPERTY_STERILIZATIONPERIOD = 26,
    WATER_HEATER_PROPERTY_STERILIZATIONLEFTDAYS = 27,
    WATER_HEATER_PROPERTY_WATERQUALITY = 28,
    WATER_HEATER_PROPERTY_BATHREMAININGTIME = 31,
    WATER_HEATER_PROPERTY_MORNINGNIGHTBATH = 32,
    WATER_HEATER_PROPERTY_BATHTUBWATERLEVEL = 33,
    WATER_HEATER_PROPERTY_BATHTUBUP = 34,
    WATER_HEATER_PROPERTY_INFLOWTEMP = 35,
    WATER_HEATER_PROPERTY_WATERVOLUME = 36,
    WATER_HEATER_PROPERTY_FIRESTATUS = 37,
    WATER_HEATER_PROPERTY_SMARTCHANGELITRES = 38,
    WATER_HEATER_PROPERTY_GASLIFTPRECENT = 39,
    WATER_HEATER_PROPERTY_SMARTCHANGELITRESENABLED = 40,
    WATER_HEATER_PROPERTY_COLDWATERDOT = 41,
    WATER_HEATER_PROPERTY_COLDWATER = 42,
    WATER_HEATER_PROPERTY_COLDWATERMASTER = 43,
    WATER_HEATER_PROPERTY_COLDWATERPRESSURE = 44,
    WATER_HEATER_PROPERTY_COLDWATERAI = 45,
    WATER_HEATER_PROPERTY_COLDWATERHIGHTEMP = 46,
    WATER_HEATER_PROPERTY_COLDWATERCONSERVATION = 47,
    WATER_HEATER_PROPERTY_COLDWATERDURATION = 48,
    WATER_HEATER_PROPERTY_COLDHOLDDURATION = 49,
    WATER_HEATER_PROPERTY_COLDCONSERVATIONDURATION = 50,
    WATER_HEATER_PROPERTY_WATERCONSUMPTIONENABLED = 52,
    WATER_HEATER_PROPERTY_BUBBLEMODE = 53,
    WATER_HEATER_PROPERTY_STERILIZATIONMODE = 54,
    WATER_HEATER_PROPERTY_DISPLAYINGTEMPUNIT = 55,
    WATER_HEATER_PROPERTY_FIRECAPACITY = 57,
    WATER_HEATER_PROPERTY_LOWTEMP = 58,
    WATER_HEATER_PROPERTY_HIGHTEMP = 59,
    WATER_HEATER_PROPERTY_WATERCONSUMPTION = 60,
    WATER_HEATER_PROPERTY_REALTIMEPOWER = 61,
    WATER_HEATER_PROPERTY_INFLOWTDS = 62,
    WATER_HEATER_PROPERTY_GESTUREENABLED = 63,
    WATER_HEATER_PROPERTY_GESTURETYPE = 64,
    WATER_HEATER_PROPERTY_COLDWATERAPPOINTMENT = 65,
    WATER_HEATER_PROPERTY_COLDWATERPOWERAPPOINTMENT = 66,
    WATER_HEATER_PROPERTY_OUTFLOWPROTECT = 67,
    WATER_HEATER_PROPERTY_OUTFLOWPROTECTSTATUS = 68
};

enum WATER_HEATER_ACTION {
    WATER_HEATER_ACTION_WATER_QUALITY_RESET = 29,
    WATER_HEATER_ACTION_MG_RESET = 30,
    WATER_HEATER_ACTION_WATER_CONSUMPTION_RESET = 51,
    WATER_HEATER_ACTION_DEVICE_FACTORY_RESTORE = 56
};

struct water_heater_properties {
    bool power;
    int32_t currenttemperature;
    int32_t targettemperature;
    uint32_t remaintime;
    uint32_t hotwaterlevel;
    enum water_heater_heater_status heaterstatus;
    enum water_heater_heating_mode heatingmode;
    enum water_heater_water_heater_mode waterheatermode;
    enum water_heater_water_heater_scene waterheaterscene;
    bool sterilizationenabled;
    bool eco;
    bool sleep;
    uint32_t volume;
    bool childlockenabled;
    bool screendisplayenabled;
    uint32_t mgusedpercent;
    size_t n_userdefinetemp;
    struct hey_array_node **userdefinetemp;
    enum water_heater_heating_power heatingpower;
    bool tplushot;
    bool autopoweroff;
    bool alwaystempdetection;
    bool scenemodeenabled;
    bool waterflowstatus;
    bool frequencyhot;
    enum water_heater_frequency_hot_gear frequencyhotgear;
    enum water_heater_sterilization_period sterilizationperiod;
    uint32_t sterilizationleftdays;
    enum water_heater_water_quality waterquality;
    uint32_t bathremainingtime;
    enum water_heater_morning_night_bath morningnightbath;
    enum water_heater_bathtub_water_level bathtubwaterlevel;
    uint32_t bathtubup;
    uint32_t inflowtemp;
    uint32_t watervolume;
    bool firestatus;
    bool smartchangelitres;
    uint32_t gasliftprecent;
    bool smartchangelitresenabled;
    bool coldwaterdot;
    bool coldwater;
    bool coldwatermaster;
    bool coldwaterpressure;
    bool coldwaterai;
    bool coldwaterhightemp;
    bool coldwaterconservation;
    uint32_t coldwaterduration;
    uint32_t coldholdduration;
    uint32_t coldconservationduration;
    bool waterconsumptionenabled;
    enum water_heater_bubble_mode bubblemode;
    enum water_heater_sterilization_mode sterilizationmode;
    enum water_heater_displaying_temp_unit displayingtempunit;
    uint32_t firecapacity;
    int32_t lowtemp;
    int32_t hightemp;
    uint32_t waterconsumption;
    uint32_t realtimepower;
    uint32_t inflowtds;
    bool gestureenabled;
    enum water_heater_gesture_type gesturetype;
    size_t n_coldwaterappointment;
    struct hey_array_node **coldwaterappointment;
    size_t n_coldwaterpowerappointment;
    struct hey_array_node **coldwaterpowerappointment;
    bool outflowprotect;
    bool outflowprotectstatus;
};

/**
 * @brief water heater service initialization
 * @param properties [water heater service properties]
 * @return int32_t   [initialize result]
*/
int32_t water_heater_service_init(const struct water_heater_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
struct water_heater_user_define_temp *water_heater_user_define_temp_unpack(const uint8_t *data, size_t len);
void water_heater_user_define_temp_free_unpacked(struct water_heater_user_define_temp *data);
// less than 0 means failure
int32_t water_heater_user_define_temp_get_packed_size(const struct water_heater_user_define_temp *data);
// less than 0 means failure
int32_t water_heater_user_define_temp_pack(const struct water_heater_user_define_temp *data, uint8_t *out);

struct water_heater_cold_water_appointment *water_heater_cold_water_appointment_unpack(const uint8_t *data, size_t len);
void water_heater_cold_water_appointment_free_unpacked(struct water_heater_cold_water_appointment *data);
// less than 0 means failure
int32_t water_heater_cold_water_appointment_get_packed_size(const struct water_heater_cold_water_appointment *data);
// less than 0 means failure
int32_t water_heater_cold_water_appointment_pack(const struct water_heater_cold_water_appointment *data, uint8_t *out);

struct water_heater_cold_water_power_appointment *water_heater_cold_water_power_appointment_unpack(const uint8_t *data, size_t len);
void water_heater_cold_water_power_appointment_free_unpacked(struct water_heater_cold_water_power_appointment *data);
// less than 0 means failure
int32_t water_heater_cold_water_power_appointment_get_packed_size(const struct water_heater_cold_water_power_appointment *data);
// less than 0 means failure
int32_t water_heater_cold_water_power_appointment_pack(const struct water_heater_cold_water_power_appointment *data, uint8_t *out);

/**
 * @brief properties write callback of water heater service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t water_heater_properties_write_cb(size_t count, uint32_t *enumerate, struct water_heater_properties *properties);

/**
 * @brief arrayNode properties add callback of water heater service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t water_heater_userdefinetemp_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of water heater service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t water_heater_userdefinetemp_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of water heater service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t water_heater_userdefinetemp_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief arrayNode properties add callback of water heater service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t water_heater_coldwaterappointment_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of water heater service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t water_heater_coldwaterappointment_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of water heater service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t water_heater_coldwaterappointment_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief arrayNode properties add callback of water heater service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t water_heater_coldwaterpowerappointment_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of water heater service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t water_heater_coldwaterpowerappointment_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of water heater service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t water_heater_coldwaterpowerappointment_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief update properties of water heater service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t water_heater_properties_update(size_t count, uint32_t *enumerate, struct water_heater_properties *properties);

/**
 * @brief water quality reset action start callback of water heater service
 * @param ctx          [action context]
 * @param action       [water quality reset action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t water_heater_water_quality_reset_start_cb(struct hey_action_ctx *ctx, struct water_heater_water_quality_reset_in *action, void **user_context);

/**
 * @brief water quality reset action send message of water heater service
 * @param ctx      [action context]
 * @param action   [water quality reset action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t water_heater_water_quality_reset_send(struct hey_action_ctx *ctx, struct water_heater_water_quality_reset_out *action);

/**
 * @brief water quality reset action stop of water heater service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t water_heater_water_quality_reset_stop(struct hey_action_ctx *ctx);

/**
 * @brief water quality reset action stop callback of water heater service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void water_heater_water_quality_reset_stop_cb(void *user_context);

/**
 * @brief mg reset action start callback of water heater service
 * @param ctx          [action context]
 * @param action       [mg reset action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t water_heater_mg_reset_start_cb(struct hey_action_ctx *ctx, struct water_heater_mg_reset_in *action, void **user_context);

/**
 * @brief mg reset action send message of water heater service
 * @param ctx      [action context]
 * @param action   [mg reset action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t water_heater_mg_reset_send(struct hey_action_ctx *ctx, struct water_heater_mg_reset_out *action);

/**
 * @brief mg reset action stop of water heater service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t water_heater_mg_reset_stop(struct hey_action_ctx *ctx);

/**
 * @brief mg reset action stop callback of water heater service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void water_heater_mg_reset_stop_cb(void *user_context);

/**
 * @brief water consumption reset action start callback of water heater service
 * @param ctx          [action context]
 * @param action       [water consumption reset action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t water_heater_water_consumption_reset_start_cb(struct hey_action_ctx *ctx, struct water_heater_water_consumption_reset_in *action, void **user_context);

/**
 * @brief water consumption reset action send message of water heater service
 * @param ctx      [action context]
 * @param action   [water consumption reset action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t water_heater_water_consumption_reset_send(struct hey_action_ctx *ctx, struct water_heater_water_consumption_reset_out *action);

/**
 * @brief water consumption reset action stop of water heater service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t water_heater_water_consumption_reset_stop(struct hey_action_ctx *ctx);

/**
 * @brief water consumption reset action stop callback of water heater service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void water_heater_water_consumption_reset_stop_cb(void *user_context);

/**
 * @brief device factory restore action start callback of water heater service
 * @param ctx          [action context]
 * @param action       [device factory restore action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t water_heater_device_factory_restore_start_cb(struct hey_action_ctx *ctx, struct water_heater_device_factory_restore_in *action, void **user_context);

/**
 * @brief device factory restore action send message of water heater service
 * @param ctx      [action context]
 * @param action   [device factory restore action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t water_heater_device_factory_restore_send(struct hey_action_ctx *ctx, struct water_heater_device_factory_restore_out *action);

/**
 * @brief device factory restore action stop of water heater service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t water_heater_device_factory_restore_stop(struct hey_action_ctx *ctx);

/**
 * @brief device factory restore action stop callback of water heater service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void water_heater_device_factory_restore_stop_cb(void *user_context);

#endif /* WATER_HEATER_SERVICE_H */
