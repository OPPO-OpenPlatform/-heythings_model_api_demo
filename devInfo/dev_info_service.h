/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: devInfo.proto */

#ifndef DEV_INFO_SERVICE_H
#define DEV_INFO_SERVICE_H

#include "hey/types.h"

enum dev_capability_network {
    DEV_CAPABILITY_NETWORK_WIFI_2P4G = 0,
    DEV_CAPABILITY_NETWORK_WIFI_5G = 1,
    DEV_CAPABILITY_NETWORK_BLE_4 = 2,
    DEV_CAPABILITY_NETWORK_BLE_5 = 3,
    DEV_CAPABILITY_NETWORK_BLE_MESH = 4,
    DEV_CAPABILITY_NETWORK_BT = 5,
    DEV_CAPABILITY_NETWORK_ETHERNET = 6
};

struct dev_info_dev_capability {
    size_t n_network;
    enum dev_capability_network *network;
    bool cloudconnectable;
};

enum DEV_INFO_PROPERTY {
    DEV_INFO_PROPERTY_DEVNAME = 1,
    DEV_INFO_PROPERTY_MANUFACTURER = 2,
    DEV_INFO_PROPERTY_MODEL = 3,
    DEV_INFO_PROPERTY_BRAND = 4,
    DEV_INFO_PROPERTY_SOFTVERNAME = 5,
    DEV_INFO_PROPERTY_DID = 6,
    DEV_INFO_PROPERTY_PID = 7,
    DEV_INFO_PROPERTY_CID = 8,
    DEV_INFO_PROPERTY_MAC = 9,
    DEV_INFO_PROPERTY_HARDVER = 10,
    DEV_INFO_PROPERTY_SN = 11,
    DEV_INFO_PROPERTY_PARENTDID = 12,
    DEV_INFO_PROPERTY_RSSI = 13,
    DEV_INFO_PROPERTY_BSSID = 14,
    DEV_INFO_PROPERTY_IP = 15,
    DEV_INFO_PROPERTY_DEVTIME = 16,
    DEV_INFO_PROPERTY_UTC = 17,
    DEV_INFO_PROPERTY_TIMEZONE = 18,
    DEV_INFO_PROPERTY_SOFTVERCODE = 19,
    DEV_INFO_PROPERTY_SSID = 21,
    DEV_INFO_PROPERTY_DEVPUBKEY = 22,
    DEV_INFO_PROPERTY_VENDORDEVID = 23,
    DEV_INFO_PROPERTY_DEVCAPABILITY = 24,
    DEV_INFO_PROPERTY_OFFLINETHRESHOLD = 26
};

struct dev_info_properties {
    char *devname;
    char *manufacturer;
    char *model;
    char *brand;
    char *softvername;
    uint64_t did;
    uint32_t pid;
    uint32_t cid;
    char *mac;
    char *hardver;
    char *sn;
    uint64_t parentdid;
    int32_t rssi;
    char *bssid;
    char *ip;
    char *devtime;
    uint64_t utc;
    char *timezone;
    uint32_t softvercode;
    char *ssid;
    struct hey_binary_data devpubkey;
    char *vendordevid;
    struct dev_info_dev_capability *devcapability;
    uint32_t offlinethreshold;
};

/**
 * @brief dev info service initialization
 * @param properties [dev info service properties]
 * @return int32_t   [initialize result]
*/
int32_t dev_info_service_init(const struct dev_info_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of dev info service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t dev_info_properties_write_cb(size_t count, uint32_t *enumerate, struct dev_info_properties *properties);

/**
 * @brief update properties of dev info service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t dev_info_properties_update(size_t count, uint32_t *enumerate, struct dev_info_properties *properties);

#endif /* DEV_INFO_SERVICE_H */
