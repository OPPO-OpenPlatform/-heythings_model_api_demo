/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: airPurifier.proto */

#ifndef AIR_PURIFIER_SERVICE_H
#define AIR_PURIFIER_SERVICE_H

#include "hey/types.h"

enum air_purifier_ap_mode {
    AIR_PURIFIER_AP_MODE_MODE_MANUAL = 0,
    AIR_PURIFIER_AP_MODE_MODE_SLEEP = 1,
    AIR_PURIFIER_AP_MODE_MODE_TURBO = 2,
    AIR_PURIFIER_AP_MODE_MODE_AUTO = 3
};

enum AIR_PURIFIER_PROPERTY {
    AIR_PURIFIER_PROPERTY_POWER = 1,
    AIR_PURIFIER_PROPERTY_APMODE = 2,
    AIR_PURIFIER_PROPERTY_STERILIZATIONENABLED = 3,
    AIR_PURIFIER_PROPERTY_CHILDLOCKENABLED = 4,
    AIR_PURIFIER_PROPERTY_HOSTING = 5,
    AIR_PURIFIER_PROPERTY_PM2OUT = 6,
    AIR_PURIFIER_PROPERTY_PM2UPPER = 7,
    AIR_PURIFIER_PROPERTY_PM2LOWER = 8,
    AIR_PURIFIER_PROPERTY_APPOINTMENTPOWERON = 9,
    AIR_PURIFIER_PROPERTY_ANIONENABLED = 10,
    AIR_PURIFIER_PROPERTY_BRIGHTNESS = 11,
    AIR_PURIFIER_PROPERTY_MUTE = 12,
    AIR_PURIFIER_PROPERTY_DETECTPM2P5 = 13,
    AIR_PURIFIER_PROPERTY_DETECTHCHO = 14,
    AIR_PURIFIER_PROPERTY_APPOINTMENTPOWEROFF = 15
};

struct air_purifier_properties {
    bool power;
    enum air_purifier_ap_mode apmode;
    bool sterilizationenabled;
    bool childlockenabled;
    bool hosting;
    uint32_t pm2out;
    uint32_t pm2upper;
    uint32_t pm2lower;
    uint32_t appointmentpoweron;
    bool anionenabled;
    uint32_t brightness;
    bool mute;
    bool detectpm2p5;
    bool detecthcho;
    uint32_t appointmentpoweroff;
};

/**
 * @brief air purifier service initialization
 * @param properties [air purifier service properties]
 * @return int32_t   [initialize result]
*/
int32_t air_purifier_service_init(const struct air_purifier_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of air purifier service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t air_purifier_properties_write_cb(size_t count, uint32_t *enumerate, struct air_purifier_properties *properties);

/**
 * @brief update properties of air purifier service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t air_purifier_properties_update(size_t count, uint32_t *enumerate, struct air_purifier_properties *properties);

#endif /* AIR_PURIFIER_SERVICE_H */
