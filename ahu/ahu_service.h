/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: ahu.proto */

#ifndef AHU_SERVICE_H
#define AHU_SERVICE_H

#include "hey/types.h"

struct ahu_device_reboot_in {
    char __place_holder__; // make compiler happy
};

struct ahu_device_reboot_out {
    char __place_holder__; // make compiler happy
};

struct ahu_event_high_temp_alarm {
    char __place_holder__; // make compiler happy
};

enum AHU_PROPERTY {
    AHU_PROPERTY_PRIMARYFILTERSTA = 1,
    AHU_PROPERTY_MEDIUMFILTERSTA = 2,
    AHU_PROPERTY_FINALFILTERSTA = 3,
    AHU_PROPERTY_ELECPRECIPITATORFAULT = 4,
    AHU_PROPERTY_ELECPRECIPITATORPOWER = 5,
    AHU_PROPERTY_COOLINGVLVFEEDBACK1 = 6,
    AHU_PROPERTY_COOLINGVLVFEEDBACK2 = 7,
    AHU_PROPERTY_COOLINGVLVOPENING1 = 8,
    AHU_PROPERTY_COOLINGVLVOPENING2 = 9,
    AHU_PROPERTY_HEATINGVLVFEEDBACK = 10,
    AHU_PROPERTY_HEATINGVLVOPENING = 11,
    AHU_PROPERTY_HUMIDIFIERPOWER = 12,
    AHU_PROPERTY_HUMIDIFIERSFAULT = 13,
    AHU_PROPERTY_ELECHEATINGFAULT1 = 14,
    AHU_PROPERTY_ELECHEATINGMANNULAUTOSTA1 = 15,
    AHU_PROPERTY_ELECHEATINGPOWER1 = 16,
    AHU_PROPERTY_ELECHEATINGTEMP1 = 17,
    AHU_PROPERTY_ELECHEATINGFAULT2 = 18,
    AHU_PROPERTY_ELECHEATINGMANNULAUTOSTA2 = 19,
    AHU_PROPERTY_ELECHEATINGPOWER2 = 20,
    AHU_PROPERTY_ELECHEATINGTEMP2 = 21,
    AHU_PROPERTY_ELECHEATINGPOWER3 = 22,
    AHU_PROPERTY_ELECHEATINGFAULT3 = 23,
    AHU_PROPERTY_MAXHUMIDITY = 24,
    AHU_PROPERTY_ELECHEATINGTEMPTHRESHOLD = 25,
    AHU_PROPERTY_MINCOOLINGVLVTEMP = 26,
    AHU_PROPERTY_HIGHPRESHUMIDIFICATION = 27,
    AHU_PROPERTY_HUMIDIFIEROPENINGFEEDBACK = 28,
    AHU_PROPERTY_HUMIDIFIEROPENING = 29
};

enum AHU_ACTION {
    AHU_ACTION_DEVICE_REBOOT = 31
};

enum AHU_EVENT {
    AHU_EVENT_HIGH_TEMP_ALARM = 30
};

struct ahu_properties {
    bool primaryfiltersta;
    bool mediumfiltersta;
    bool finalfiltersta;
    bool elecprecipitatorfault;
    bool elecprecipitatorpower;
    uint32_t coolingvlvfeedback1;
    uint32_t coolingvlvfeedback2;
    uint32_t coolingvlvopening1;
    uint32_t coolingvlvopening2;
    uint32_t heatingvlvfeedback;
    uint32_t heatingvlvopening;
    bool humidifierpower;
    bool humidifiersfault;
    bool elecheatingfault1;
    bool elecheatingmannulautosta1;
    bool elecheatingpower1;
    uint32_t elecheatingtemp1;
    bool elecheatingfault2;
    bool elecheatingmannulautosta2;
    bool elecheatingpower2;
    uint32_t elecheatingtemp2;
    bool elecheatingpower3;
    bool elecheatingfault3;
    uint32_t maxhumidity;
    uint32_t elecheatingtempthreshold;
    uint32_t mincoolingvlvtemp;
    bool highpreshumidification;
    uint32_t humidifieropeningfeedback;
    uint32_t humidifieropening;
};

/**
 * @brief ahu service initialization
 * @param properties [ahu service properties]
 * @return int32_t   [initialize result]
*/
int32_t ahu_service_init(const struct ahu_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of ahu service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t ahu_properties_write_cb(size_t count, uint32_t *enumerate, struct ahu_properties *properties);

/**
 * @brief update properties of ahu service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t ahu_properties_update(size_t count, uint32_t *enumerate, struct ahu_properties *properties);

/**
 * @brief device reboot action start callback of ahu service
 * @param ctx          [action context]
 * @param action       [device reboot action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t ahu_device_reboot_start_cb(struct hey_action_ctx *ctx, struct ahu_device_reboot_in *action, void **user_context);

/**
 * @brief device reboot action send message of ahu service
 * @param ctx      [action context]
 * @param action   [device reboot action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t ahu_device_reboot_send(struct hey_action_ctx *ctx, struct ahu_device_reboot_out *action);

/**
 * @brief device reboot action stop of ahu service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t ahu_device_reboot_stop(struct hey_action_ctx *ctx);

/**
 * @brief device reboot action stop callback of ahu service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void ahu_device_reboot_stop_cb(void *user_context);

/**
 * @brief high temp alarm notify of ahu service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t ahu_high_temp_alarm_notify(struct ahu_event_high_temp_alarm *event, struct hey_event_notify_attr *attr);

/**
 * @brief high temp alarm notify result callback of ahu service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void ahu_high_temp_alarm_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* AHU_SERVICE_H */
