/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: filter.proto */

#ifndef FILTER_SERVICE_H
#define FILTER_SERVICE_H

#include "hey/types.h"

struct filter_self_cleaning_in {
    char __place_holder__; // make compiler happy
};

struct filter_self_cleaning_out {
    char __place_holder__; // make compiler happy
};

struct filter_event_filter_replacement {
    char __place_holder__; // make compiler happy
};

struct filter_event_filter_cleaning {
    char __place_holder__; // make compiler happy
};

struct filter_filter_reset_in {
    char __place_holder__; // make compiler happy
};

struct filter_filter_reset_out {
    char __place_holder__; // make compiler happy
};

enum FILTER_PROPERTY {
    FILTER_PROPERTY_FILTERUSEDTIME = 1,
    FILTER_PROPERTY_FILTERLEFTTIME = 2,
    FILTER_PROPERTY_PREFILTERUSEDTIME = 6,
    FILTER_PROPERTY_PREFILTERPERCENT = 8,
    FILTER_PROPERTY_FILTERPERCENT = 9,
    FILTER_PROPERTY_FILTERWATER = 10,
    FILTER_PROPERTY_FILTERSTATUS = 11
};

enum FILTER_ACTION {
    FILTER_ACTION_SELF_CLEANING = 3,
    FILTER_ACTION_FILTER_RESET = 7
};

enum FILTER_EVENT {
    FILTER_EVENT_FILTER_REPLACEMENT = 4,
    FILTER_EVENT_FILTER_CLEANING = 5
};

struct filter_properties {
    uint32_t filterusedtime;
    uint32_t filterlefttime;
    uint32_t prefilterusedtime;
    uint32_t prefilterpercent;
    uint32_t filterpercent;
    uint32_t filterwater;
    bool filterstatus;
};

/**
 * @brief filter service initialization
 * @param properties [filter service properties]
 * @return int32_t   [initialize result]
*/
int32_t filter_service_init(const struct filter_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of filter service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t filter_properties_write_cb(size_t count, uint32_t *enumerate, struct filter_properties *properties);

/**
 * @brief update properties of filter service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t filter_properties_update(size_t count, uint32_t *enumerate, struct filter_properties *properties);

/**
 * @brief self cleaning action start callback of filter service
 * @param ctx          [action context]
 * @param action       [self cleaning action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t filter_self_cleaning_start_cb(struct hey_action_ctx *ctx, struct filter_self_cleaning_in *action, void **user_context);

/**
 * @brief self cleaning action send message of filter service
 * @param ctx      [action context]
 * @param action   [self cleaning action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t filter_self_cleaning_send(struct hey_action_ctx *ctx, struct filter_self_cleaning_out *action);

/**
 * @brief self cleaning action stop of filter service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t filter_self_cleaning_stop(struct hey_action_ctx *ctx);

/**
 * @brief self cleaning action stop callback of filter service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void filter_self_cleaning_stop_cb(void *user_context);

/**
 * @brief filter reset action start callback of filter service
 * @param ctx          [action context]
 * @param action       [filter reset action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t filter_filter_reset_start_cb(struct hey_action_ctx *ctx, struct filter_filter_reset_in *action, void **user_context);

/**
 * @brief filter reset action send message of filter service
 * @param ctx      [action context]
 * @param action   [filter reset action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t filter_filter_reset_send(struct hey_action_ctx *ctx, struct filter_filter_reset_out *action);

/**
 * @brief filter reset action stop of filter service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t filter_filter_reset_stop(struct hey_action_ctx *ctx);

/**
 * @brief filter reset action stop callback of filter service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void filter_filter_reset_stop_cb(void *user_context);

/**
 * @brief filter replacement notify of filter service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t filter_filter_replacement_notify(struct filter_event_filter_replacement *event, struct hey_event_notify_attr *attr);

/**
 * @brief filter replacement notify result callback of filter service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void filter_filter_replacement_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief filter cleaning notify of filter service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t filter_filter_cleaning_notify(struct filter_event_filter_cleaning *event, struct hey_event_notify_attr *attr);

/**
 * @brief filter cleaning notify result callback of filter service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void filter_filter_cleaning_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* FILTER_SERVICE_H */
