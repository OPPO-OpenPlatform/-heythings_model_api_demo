/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: earphone.proto */

#ifndef EARPHONE_SERVICE_H
#define EARPHONE_SERVICE_H

#include "hey/types.h"

enum earphone_smart_noise_cancelling_mode {
  /*
   *关闭
   */
    EARPHONE_SMART_NOISE_CANCELLING_MODE_OFF = 0,
  /*
   *通透
   */
    EARPHONE_SMART_NOISE_CANCELLING_MODE_TRANSPARENCY = 1,
  /*
   *强降噪
   */
    EARPHONE_SMART_NOISE_CANCELLING_MODE_STRONG = 2,
  /*
   *弱降噪
   */
    EARPHONE_SMART_NOISE_CANCELLING_MODE_WEAK = 3,
  /*
   *智能降噪
   */
    EARPHONE_SMART_NOISE_CANCELLING_MODE_SMART = 4
};

enum earphone_earphone_wear_status {
  /*
   *都未在耳
   */
    EARPHONE_EARPHONE_WEAR_STATUS_BOTH_NO = 0,
  /*
   *仅左耳在耳
   */
    EARPHONE_EARPHONE_WEAR_STATUS_LEFT_WEAR = 1,
  /*
   *仅右耳在耳 
   */
    EARPHONE_EARPHONE_WEAR_STATUS_RIGHT_WEAR = 2,
  /*
   *都在耳
   */
    EARPHONE_EARPHONE_WEAR_STATUS_BOTH_WEAR = 3
};

enum earphone_earphone_box_status {
  /*
   *都未在盒
   */
    EARPHONE_EARPHONE_BOX_STATUS_BOTH_OUT = 0,
  /*
   *仅左耳在盒
   */
    EARPHONE_EARPHONE_BOX_STATUS_LEFT_IN = 1,
  /*
   *仅右耳在盒 
   */
    EARPHONE_EARPHONE_BOX_STATUS_RIGHT_IN = 2,
  /*
   *都在盒
   */
    EARPHONE_EARPHONE_BOX_STATUS_BOTH_IN = 3
};

enum EARPHONE_PROPERTY {
    EARPHONE_PROPERTY_POWER = 1,
    EARPHONE_PROPERTY_MODE = 2,
    EARPHONE_PROPERTY_BOXCOVERSTATUS = 3,
    EARPHONE_PROPERTY_WEARSTA = 4,
    EARPHONE_PROPERTY_INBOXSTA = 5,
    EARPHONE_PROPERTY_SPEECHCONTROLENABLED = 6
};

struct earphone_properties {
    bool power;
    enum earphone_smart_noise_cancelling_mode mode;
    bool boxcoverstatus;
    enum earphone_earphone_wear_status wearsta;
    enum earphone_earphone_box_status inboxsta;
    bool speechcontrolenabled;
};

/**
 * @brief earphone service initialization
 * @param properties [earphone service properties]
 * @return int32_t   [initialize result]
*/
int32_t earphone_service_init(const struct earphone_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of earphone service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t earphone_properties_write_cb(size_t count, uint32_t *enumerate, struct earphone_properties *properties);

/**
 * @brief update properties of earphone service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t earphone_properties_update(size_t count, uint32_t *enumerate, struct earphone_properties *properties);

#endif /* EARPHONE_SERVICE_H */
