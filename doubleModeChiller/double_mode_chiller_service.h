/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: doubleModeChiller.proto */

#ifndef DOUBLE_MODE_CHILLER_SERVICE_H
#define DOUBLE_MODE_CHILLER_SERVICE_H

#include "hey/types.h"

struct double_mode_chiller_event_invalid_alarm {
    char __place_holder__; // make compiler happy
};

enum DOUBLE_MODE_CHILLER_PROPERTY {
    DOUBLE_MODE_CHILLER_PROPERTY_GGOPENING1 = 1,
    DOUBLE_MODE_CHILLER_PROPERTY_GGOPENING1PEER = 2,
    DOUBLE_MODE_CHILLER_PROPERTY_GGOPENING2 = 3,
    DOUBLE_MODE_CHILLER_PROPERTY_GGOPENING2PEER = 4,
    DOUBLE_MODE_CHILLER_PROPERTY_MOTORCOILTEMP1 = 5,
    DOUBLE_MODE_CHILLER_PROPERTY_MOTORCOILTEMP1PEER = 6,
    DOUBLE_MODE_CHILLER_PROPERTY_CONAPPTEMP = 7,
    DOUBLE_MODE_CHILLER_PROPERTY_CONAPPTEMPPEER = 8,
    DOUBLE_MODE_CHILLER_PROPERTY_EATEMP = 9,
    DOUBLE_MODE_CHILLER_PROPERTY_EATEMPPEER = 10,
    DOUBLE_MODE_CHILLER_PROPERTY_AVERAGECURRENT = 11,
    DOUBLE_MODE_CHILLER_PROPERTY_AVERAGECURRENTPEER = 12,
    DOUBLE_MODE_CHILLER_PROPERTY_ACOILPRESSURE = 13,
    DOUBLE_MODE_CHILLER_PROPERTY_ACOILPRESSUREPEER = 14,
    DOUBLE_MODE_CHILLER_PROPERTY_ACRUNNINGTIME = 15,
    DOUBLE_MODE_CHILLER_PROPERTY_ACRUNNINGTIMEPEER = 16,
    DOUBLE_MODE_CHILLER_PROPERTY_OILTEMP = 17,
    DOUBLE_MODE_CHILLER_PROPERTY_OILTEMPPEER = 18,
    DOUBLE_MODE_CHILLER_PROPERTY_EVAAPPTEMP = 19,
    DOUBLE_MODE_CHILLER_PROPERTY_EVAAPPTEMPPEER = 20,
    DOUBLE_MODE_CHILLER_PROPERTY_ACSTARTUPNUM = 21,
    DOUBLE_MODE_CHILLER_PROPERTY_ACSTARTUPNUMPEER = 22,
    DOUBLE_MODE_CHILLER_PROPERTY_CHWSUPPLYWATERTEMP = 23,
    DOUBLE_MODE_CHILLER_PROPERTY_CHWRETURNWATERTEMP = 24,
    DOUBLE_MODE_CHILLER_PROPERTY_CONSATTEMP = 25,
    DOUBLE_MODE_CHILLER_PROPERTY_CONSATTEMPPEER = 26,
    DOUBLE_MODE_CHILLER_PROPERTY_CONSATPRES = 27,
    DOUBLE_MODE_CHILLER_PROPERTY_CONSATPRESPEER = 28,
    DOUBLE_MODE_CHILLER_PROPERTY_CWSUPPLYWATERTEMP = 29,
    DOUBLE_MODE_CHILLER_PROPERTY_CWRETURNWATERTEMP = 30,
    DOUBLE_MODE_CHILLER_PROPERTY_RUNNINGLOAD = 31,
    DOUBLE_MODE_CHILLER_PROPERTY_RUNNINGLOADPEER = 32,
    DOUBLE_MODE_CHILLER_PROPERTY_EVASATTEMP = 33,
    DOUBLE_MODE_CHILLER_PROPERTY_EVASATTEMPPEER = 34,
    DOUBLE_MODE_CHILLER_PROPERTY_EVASATPRES = 35,
    DOUBLE_MODE_CHILLER_PROPERTY_EVASATPRESPEER = 36,
    DOUBLE_MODE_CHILLER_PROPERTY_L1CURRENT = 37,
    DOUBLE_MODE_CHILLER_PROPERTY_L1CURRENTPEER = 38,
    DOUBLE_MODE_CHILLER_PROPERTY_L2CURRENT = 39,
    DOUBLE_MODE_CHILLER_PROPERTY_L2CURRENTPEER = 40,
    DOUBLE_MODE_CHILLER_PROPERTY_L3CURRENT = 41,
    DOUBLE_MODE_CHILLER_PROPERTY_L3CURRENTPEER = 42,
    DOUBLE_MODE_CHILLER_PROPERTY_CONFLOWSTA = 43,
    DOUBLE_MODE_CHILLER_PROPERTY_CONFLOWSTAPEER = 44,
    DOUBLE_MODE_CHILLER_PROPERTY_EVAFLOWSTA = 45,
    DOUBLE_MODE_CHILLER_PROPERTY_EVAFLOWSTAPEER = 46,
    DOUBLE_MODE_CHILLER_PROPERTY_AUTOTURNONTEMP = 47,
    DOUBLE_MODE_CHILLER_PROPERTY_AUTOTURNOFFTEMP = 48,
    DOUBLE_MODE_CHILLER_PROPERTY_COOLINGCAPACITY = 49,
    DOUBLE_MODE_CHILLER_PROPERTY_COP = 50,
    DOUBLE_MODE_CHILLER_PROPERTY_CWTARGETRETURNTEMP = 51,
    DOUBLE_MODE_CHILLER_PROPERTY_SUPPLYWATERRATE = 52,
    DOUBLE_MODE_CHILLER_PROPERTY_RUNNINGPOWER = 53,
    DOUBLE_MODE_CHILLER_PROPERTY_RUNNINGPOWERPEER = 54,
    DOUBLE_MODE_CHILLER_PROPERTY_MANNULAUTOSTA = 55,
    DOUBLE_MODE_CHILLER_PROPERTY_CHWTARGETSUPPLYTEMP = 56,
    DOUBLE_MODE_CHILLER_PROPERTY_CHWTARGETSUPPLYTEMPPEER = 57,
    DOUBLE_MODE_CHILLER_PROPERTY_ABVOLTAGE = 58,
    DOUBLE_MODE_CHILLER_PROPERTY_ABVOLTAGEPEER = 59,
    DOUBLE_MODE_CHILLER_PROPERTY_BCVOLTAGE = 60,
    DOUBLE_MODE_CHILLER_PROPERTY_BCVOLTAGEPEER = 61,
    DOUBLE_MODE_CHILLER_PROPERTY_CAVOLTAGE = 62,
    DOUBLE_MODE_CHILLER_PROPERTY_CAVOLTAGEPEER = 63,
    DOUBLE_MODE_CHILLER_PROPERTY_MAXRUNNINGLOAD = 64,
    DOUBLE_MODE_CHILLER_PROPERTY_MAXRUNNINGLOADPEER = 65,
    DOUBLE_MODE_CHILLER_PROPERTY_OILPUMPPRES = 66,
    DOUBLE_MODE_CHILLER_PROPERTY_OILPUMPPRESPEER = 67,
    DOUBLE_MODE_CHILLER_PROPERTY_OILTANKPRES = 68,
    DOUBLE_MODE_CHILLER_PROPERTY_OILTANKPRESPEER = 69,
    DOUBLE_MODE_CHILLER_PROPERTY_HVIBRATIONVALUE = 70,
    DOUBLE_MODE_CHILLER_PROPERTY_VVIBRATIONVALUE = 71,
    DOUBLE_MODE_CHILLER_PROPERTY_POWER = 73,
    DOUBLE_MODE_CHILLER_PROPERTY_FAULTSTA = 74
};

enum DOUBLE_MODE_CHILLER_EVENT {
    DOUBLE_MODE_CHILLER_EVENT_INVALID_ALARM = 72
};

struct double_mode_chiller_properties {
    uint32_t ggopening1;
    uint32_t ggopening1peer;
    uint32_t ggopening2;
    uint32_t ggopening2peer;
    uint32_t motorcoiltemp1;
    uint32_t motorcoiltemp1peer;
    uint32_t conapptemp;
    uint32_t conapptemppeer;
    uint32_t eatemp;
    uint32_t eatemppeer;
    uint32_t averagecurrent;
    uint32_t averagecurrentpeer;
    uint32_t acoilpressure;
    uint32_t acoilpressurepeer;
    uint32_t acrunningtime;
    uint32_t acrunningtimepeer;
    uint32_t oiltemp;
    uint32_t oiltemppeer;
    uint32_t evaapptemp;
    uint32_t evaapptemppeer;
    uint32_t acstartupnum;
    uint32_t acstartupnumpeer;
    uint32_t chwsupplywatertemp;
    uint32_t chwreturnwatertemp;
    uint32_t consattemp;
    uint32_t consattemppeer;
    uint32_t consatpres;
    uint32_t consatprespeer;
    uint32_t cwsupplywatertemp;
    uint32_t cwreturnwatertemp;
    uint32_t runningload;
    uint32_t runningloadpeer;
    uint32_t evasattemp;
    uint32_t evasattemppeer;
    uint32_t evasatpres;
    uint32_t evasatprespeer;
    uint32_t l1current;
    uint32_t l1currentpeer;
    uint32_t l2current;
    uint32_t l2currentpeer;
    uint32_t l3current;
    uint32_t l3currentpeer;
    bool conflowsta;
    bool conflowstapeer;
    bool evaflowsta;
    bool evaflowstapeer;
    uint32_t autoturnontemp;
    uint32_t autoturnofftemp;
    uint32_t coolingcapacity;
    uint32_t cop;
    uint32_t cwtargetreturntemp;
    uint32_t supplywaterrate;
    uint32_t runningpower;
    uint32_t runningpowerpeer;
    bool mannulautosta;
    uint32_t chwtargetsupplytemp;
    uint32_t chwtargetsupplytemppeer;
    uint32_t abvoltage;
    uint32_t abvoltagepeer;
    uint32_t bcvoltage;
    uint32_t bcvoltagepeer;
    uint32_t cavoltage;
    uint32_t cavoltagepeer;
    uint32_t maxrunningload;
    uint32_t maxrunningloadpeer;
    uint32_t oilpumppres;
    uint32_t oilpumpprespeer;
    uint32_t oiltankpres;
    uint32_t oiltankprespeer;
    uint32_t hvibrationvalue;
    uint32_t vvibrationvalue;
    bool power;
    bool faultsta;
};

/**
 * @brief double mode chiller service initialization
 * @param properties [double mode chiller service properties]
 * @return int32_t   [initialize result]
*/
int32_t double_mode_chiller_service_init(const struct double_mode_chiller_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of double mode chiller service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t double_mode_chiller_properties_write_cb(size_t count, uint32_t *enumerate, struct double_mode_chiller_properties *properties);

/**
 * @brief update properties of double mode chiller service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t double_mode_chiller_properties_update(size_t count, uint32_t *enumerate, struct double_mode_chiller_properties *properties);

/**
 * @brief invalid alarm notify of double mode chiller service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t double_mode_chiller_invalid_alarm_notify(struct double_mode_chiller_event_invalid_alarm *event, struct hey_event_notify_attr *attr);

/**
 * @brief invalid alarm notify result callback of double mode chiller service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void double_mode_chiller_invalid_alarm_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* DOUBLE_MODE_CHILLER_SERVICE_H */
