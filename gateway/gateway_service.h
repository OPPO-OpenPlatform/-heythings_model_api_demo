/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: gateway.proto */

#ifndef GATEWAY_SERVICE_H
#define GATEWAY_SERVICE_H

#include "hey/types.h"

enum gateway_action_out_setup_sub_device_progress {
  /*
   * 无法确定当前进度或不支持通知进度
   */
    GATEWAY_ACTION_OUT_SETUP_SUB_DEVICE_PROGRESS_SubUnkonw = 0,
  /*
   * 设备已收到配置
   */
    GATEWAY_ACTION_OUT_SETUP_SUB_DEVICE_PROGRESS_SubSetupReceived = 1,
  /*
   * 等待用户交互
   */
    GATEWAY_ACTION_OUT_SETUP_SUB_DEVICE_PROGRESS_SubWaitingUserInteractive = 32,
  /*
   * 准备初始化设备
   */
    GATEWAY_ACTION_OUT_SETUP_SUB_DEVICE_PROGRESS_SubDeviceInit = 64
};

enum gateway_action_out_setup_sub_device_result {
    GATEWAY_ACTION_OUT_SETUP_SUB_DEVICE_RESULT_SubSuccess = 0
};

enum dev_list_capability {
  /*
   * 默认是0，无任何能力
   */
    DEV_LIST_CAPABILITY_DEFAULT = 0,
  /*
   * bit0:有二层配网能力 （使用ECDH交换密钥）
   */
    DEV_LIST_CAPABILITY_SUPPORT_L2SETUP_ECDH = 1,
  /*
   * bit1:有PMK连接wifi能力
   */
    DEV_LIST_CAPABILITY_SUPPORT_PMK = 2,
  /*
   * bit2:有二层配网能力 （使用EC-JPAKE交换密钥）
   */
    DEV_LIST_CAPABILITY_SUPPORT_L2SETUP_ECJPAKE = 4,
  /*
   * bit3:需要进行路由器配置，后面对应绑定请求应答的TYPE分别为0x07和0x08
   */
    DEV_LIST_CAPABILITY_SUPPORT_ROUTER_SETUP = 8
};

enum dev_list_status {
  /*
   * 已配网或正在处理配网
   */
    DEV_LIST_STATUS_ALREADY_BIND = 0,
  /*
   * 待配网
   */
    DEV_LIST_STATUS_NEED_BIND = 1
};

enum gateway_action_out_setup_device_status {
  /*
   * 等待接收设备配置
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_STATUS_DeviceSetupWaiting = 0,
  /*
   * 已收到配置状态
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_STATUS_DeviceSetupReceived = 1,
  /*
   * 等待用户交互
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_STATUS_DeviceWaitingForUserInteractive = 1024,
  /*
   * 设备正在准备联网组件
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_STATUS_NetworkPreparing = 4096,
  /*
   * 正在搜索、连接网络
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_STATUS_NetworkAssosciating = 5120,
  /*
   * 正在网络认证
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_STATUS_NetworkAuthencating = 6144,
  /*
   * 正在获取网络地址
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_STATUS_NetworkRequestingAddress = 7168,
  /*
   * 准备连接到服务器
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_STATUS_ServerPreparing = 8192,
  /*
   * 正在连接到服务器
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_STATUS_ServerConnecting = 9216,
  /*
   * 正在认证身份
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_STATUS_ServerAuthencating = 10240,
  /*
   * 正在绑定设备到用户
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_STATUS_ServerBindingUser = 11264,
  /*
   * 设备连上云后准备初始化设备
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_STATUS_DevicePreparingInitialization = 12288,
  /*
   * 由设备自己定义的初始化进度代码
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_STATUS_DeviceSpecifiedInitializationProgressStart = 13312
};

enum gateway_action_out_setup_device_result {
    GATEWAY_ACTION_OUT_SETUP_DEVICE_RESULT_OK = 0,
  /*
   * EC-JPAKE 继续
   * detail应填写ecjpakeCountinue字段
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_RESULT_ECJPAKE_CONTINUE = 1,
  /*
   * 被用户主动拒绝
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_RESULT_USER_INTERACTIVE_REJECT = 2,
  /*
   * 超过最大配置次数
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_RESULT_MAX_SETUP_EXCESSED = 3,
  /*
   * 加密方式不支持
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_RESULT_ENCRYPTION_NOT_SUPPORTED = 4,
  /*
   * WIFI热点探测失败
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_RESULT_WIFI_PROBE_FAILED = 5,
  /*
   * WIFI认证失败
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_RESULT_WIFI_AUTH_FAILED = 6,
  /*
   * WIFI 其它连接错误
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_RESULT_WIFI_OTHER_ERROR = 7,
  /*
   * 获取网络地址失败
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_RESULT_REQUEST_NETWORK_ADDRESS_FAILED = 8,
  /*
   * 服务器全地址不可达（路由错误、DNS解析失败或连接失败）
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_RESULT_SERVER_UNREACHABLE = 9,
  /*
   * 安全连接握手失败
   * 一次服务器TLS连接失败并不终止整个连接服务器过程，当所有服务器地址尝试均失败时，若
   * 存在TLS连接错误，则使用SERVER_TLS_HANDSHAKE_FAILED。
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_RESULT_SERVER_TLS_HANDSHAKE_FAILED = 10,
  /*
   * 设备绑定被服务器明确拒绝。
   * detail应填写serverRejectedCode
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_RESULT_SERVER_REJECTED = 11,
  /*
   * 服务器响应超时
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_RESULT_SERVER_TIMEOUT = 12,
  /*
   * 配置失败，由于设备从收到了意料之外的数据
   */
    GATEWAY_ACTION_OUT_SETUP_DEVICE_RESULT_UNEXPECTED_SETUP_DATA = 13
};

enum gateway_discovery_type {
  /*
   * WiFi二层
   */
    GATEWAY_DISCOVERY_TYPE_WIFI_TWO = 0,
  /*
   * WiFi AP
   */
    GATEWAY_DISCOVERY_TYPE_WIFI_AP = 1,
  /*
   * BLE
   */
    GATEWAY_DISCOVERY_TYPE_BLE = 2,
  /*
   * 局域网DNS-SD
   */
    GATEWAY_DISCOVERY_TYPE_LAN = 3
};

struct gateway_scan_sub_device_in {
    char *pid;
    char *devid;
    uint32_t scantime;
};

struct gateway_scan_sub_device_sub_device_out {
    char *pid;
    char *devid;
    int32_t rssi;
};

struct gateway_scan_sub_device_out {
    size_t n_subdevice;
    struct gateway_scan_sub_device_sub_device_out **subdevice;
};

struct gateway_setup_sub_device_in {
    struct hey_binary_data bindkey;
    char *pid;
    char *devid;
    struct hey_binary_data pin;
    struct hey_binary_data ecdhpubkey;
};

enum gateway_setup_sub_device_resp_out {
    GATEWAY_SETUP_SUB_DEVICE_RESP_OUT_NOT_SET = 0,
    GATEWAY_SETUP_SUB_DEVICE_RESP_OUT_PROGRESS = 1,
    GATEWAY_SETUP_SUB_DEVICE_RESP_OUT_RESULT = 2
};

struct gateway_setup_sub_device_out {
    struct hey_binary_data vendordiagnosis;
    enum gateway_setup_sub_device_resp_out resp_case;
    union {
        enum gateway_action_out_setup_sub_device_progress progress;
        enum gateway_action_out_setup_sub_device_result result;
    };
};

struct gateway_neighbor_table {
    uint32_t devaddress;
};

struct event_dev_discovered_dev_list {
    uint32_t capability;
    char *pid;
    enum dev_list_status status;
    struct hey_binary_data vendordata;
    struct hey_binary_data random;
    struct hey_binary_data vendorpid;
    char *devid;
    int32_t rssi;
    enum gateway_discovery_type type;
};

struct gateway_event_dev_discovered {
    size_t n_list;
    struct event_dev_discovered_dev_list **list;
};

struct gateway_setup_device_in {
    struct hey_binary_data bindkey;
    char *pid;
    char *devid;
    struct hey_binary_data pin;
    struct hey_binary_data ecdhpubkey;
    enum gateway_discovery_type type;
};

enum gateway_setup_device_code_out {
    GATEWAY_SETUP_DEVICE_CODE_OUT_NOT_SET = 0,
    GATEWAY_SETUP_DEVICE_CODE_OUT_STATUS = 1,
    GATEWAY_SETUP_DEVICE_CODE_OUT_RESULT = 2
};

enum gateway_setup_device_detail_out {
    GATEWAY_SETUP_DEVICE_DETAIL_OUT_NOT_SET = 0,
    GATEWAY_SETUP_DEVICE_DETAIL_OUT_SERVERREJECTEDCODE = 3
};

struct gateway_setup_device_out {
    enum gateway_setup_device_code_out code_case;
    union {
        enum gateway_action_out_setup_device_status status;
        enum gateway_action_out_setup_device_result result;
    };
    enum gateway_setup_device_detail_out detail_case;
    union {
        uint32_t serverrejectedcode;
    };
};

enum GATEWAY_PROPERTY {
    GATEWAY_PROPERTY_NEIGHBORTABLE = 3
};

enum GATEWAY_ACTION {
    GATEWAY_ACTION_SCAN_SUB_DEVICE = 1,
    GATEWAY_ACTION_SETUP_SUB_DEVICE = 2,
    GATEWAY_ACTION_SETUP_DEVICE = 5
};

enum GATEWAY_EVENT {
    GATEWAY_EVENT_DEV_DISCOVERED = 4
};

struct gateway_properties {
    size_t n_neighbortable;
    struct hey_array_node **neighbortable;
};

/**
 * @brief gateway service initialization
 * @param properties [gateway service properties]
 * @return int32_t   [initialize result]
*/
int32_t gateway_service_init(const struct gateway_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
struct gateway_neighbor_table *gateway_neighbor_table_unpack(const uint8_t *data, size_t len);
void gateway_neighbor_table_free_unpacked(struct gateway_neighbor_table *data);
// less than 0 means failure
int32_t gateway_neighbor_table_get_packed_size(const struct gateway_neighbor_table *data);
// less than 0 means failure
int32_t gateway_neighbor_table_pack(const struct gateway_neighbor_table *data, uint8_t *out);

/**
 * @brief properties write callback of gateway service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t gateway_properties_write_cb(size_t count, uint32_t *enumerate, struct gateway_properties *properties);

/**
 * @brief arrayNode properties add callback of gateway service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t gateway_neighbortable_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of gateway service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t gateway_neighbortable_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of gateway service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t gateway_neighbortable_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief update properties of gateway service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t gateway_properties_update(size_t count, uint32_t *enumerate, struct gateway_properties *properties);

/**
 * @brief scan sub device action start callback of gateway service
 * @param ctx          [action context]
 * @param action       [scan sub device action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t gateway_scan_sub_device_start_cb(struct hey_action_ctx *ctx, struct gateway_scan_sub_device_in *action, void **user_context);

/**
 * @brief scan sub device action send message of gateway service
 * @param ctx      [action context]
 * @param action   [scan sub device action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t gateway_scan_sub_device_send(struct hey_action_ctx *ctx, struct gateway_scan_sub_device_out *action);

/**
 * @brief scan sub device action stop of gateway service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t gateway_scan_sub_device_stop(struct hey_action_ctx *ctx);

/**
 * @brief scan sub device action stop callback of gateway service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void gateway_scan_sub_device_stop_cb(void *user_context);

/**
 * @brief setup sub device action start callback of gateway service
 * @param ctx          [action context]
 * @param action       [setup sub device action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t gateway_setup_sub_device_start_cb(struct hey_action_ctx *ctx, struct gateway_setup_sub_device_in *action, void **user_context);

/**
 * @brief setup sub device action send message of gateway service
 * @param ctx      [action context]
 * @param action   [setup sub device action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t gateway_setup_sub_device_send(struct hey_action_ctx *ctx, struct gateway_setup_sub_device_out *action);

/**
 * @brief setup sub device action stop of gateway service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t gateway_setup_sub_device_stop(struct hey_action_ctx *ctx);

/**
 * @brief setup sub device action stop callback of gateway service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void gateway_setup_sub_device_stop_cb(void *user_context);

/**
 * @brief setup device action start callback of gateway service
 * @param ctx          [action context]
 * @param action       [setup device action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t gateway_setup_device_start_cb(struct hey_action_ctx *ctx, struct gateway_setup_device_in *action, void **user_context);

/**
 * @brief setup device action send message of gateway service
 * @param ctx      [action context]
 * @param action   [setup device action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t gateway_setup_device_send(struct hey_action_ctx *ctx, struct gateway_setup_device_out *action);

/**
 * @brief setup device action stop of gateway service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t gateway_setup_device_stop(struct hey_action_ctx *ctx);

/**
 * @brief setup device action stop callback of gateway service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void gateway_setup_device_stop_cb(void *user_context);

/**
 * @brief dev discovered notify of gateway service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t gateway_dev_discovered_notify(struct gateway_event_dev_discovered *event, struct hey_event_notify_attr *attr);

/**
 * @brief dev discovered notify result callback of gateway service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void gateway_dev_discovered_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* GATEWAY_SERVICE_H */
