/**
 * Copyright (c) 2008-2019, OPPO Mobile Comm Corp., Ltd
 * VENDOR_EDIT
 * @file gateway.proto
 * @brief gateway service proto
 * @version 0.3
 * @date 2022-8-23
 * @author Frank
 */

 syntax = "proto3";

 import "common.proto";

 package iot.service.gateway;
option objc_class_prefix = "Iot_Service_Gateway_";
 
message ActionInScanSubDevice{
  string pid = 1;

  //蓝牙设备为mac的最后4个16进制数字，小写
  //蓝牙mesh设备为uuid
  string devId = 2;

  //扫描时长，单位：毫秒
  //0-网关自己决定扫描时长，并一次返回扫描结果
  uint32 scanTime = 3;
}

message ActionOutScanSubDevice{
  message SubDevice{
    string pid = 1;

    //蓝牙设备为mac的最后4个16进制数字，小写
    //蓝牙mesh设备为uuid
    string devId = 2;

    int32 rssi = 3;
  }

  repeated SubDevice subDevice = 1;
}

message ActionInSetupSubDevice{
  bytes bindKey = 1;
  string pid = 2;

  //蓝牙设备为mac的最后4个16进制数字，小写
  //蓝牙mesh设备为uuid
  string devId = 3;

  bytes pin = 4;  //蓝牙mesh设备为static oob，不是基于pin方式添加时值为空

  bytes ecdhPubKey = 5; //不是基于ecdh方式添加时值为空
}

message ActionOutSetupSubDevice{
  enum Progress {
    // 无法确定当前进度或不支持通知进度
    SubUnkonw = 0;

    // 设备已收到配置
    SubSetupReceived = 1;

    // 等待用户交互
    SubWaitingUserInteractive = 32;

    // 准备初始化设备
    SubDeviceInit = 64;

    // 由设备自己定义的初始化进度代码
    reserved 512 to 1023;
  }
  enum Result {
    SubSuccess = 0;
  }
  oneof resp{
    Progress progress = 1;
    Result result = 2;
    
  }
  bytes vendorDiagnosis = 3;  // 厂商数据
}

message NeighborTable{
  uint32 devAddress = 1; //dev Address assigned by misc.
}

enum DiscoveryType {
  WIFI_TWO = 0; // WiFi二层
  WIFI_AP = 1;  // WiFi AP
  BLE = 2;      // BLE
  LAN = 3;      // 局域网DNS-SD
}

message EventDevDiscovered{
  message DevList{
	  enum Capability {
        DEFAULT = 0x00;   // 默认是0，无任何能力
        SUPPORT_L2SETUP_ECDH = 0x01; // bit0:有二层配网能力 （使用ECDH交换密钥）
        SUPPORT_PMK = 0x02; // bit1:有PMK连接wifi能力
        SUPPORT_L2SETUP_ECJPAKE = 0x04; // bit2:有二层配网能力 （使用EC-JPAKE交换密钥）
		    SUPPORT_ROUTER_SETUP = 0x08; // bit3:需要进行路由器配置，后面对应绑定请求应答的TYPE分别为0x07和0x08
    }
    enum Status {
        ALREADY_BIND = 0;   // 已配网或正在处理配网
        NEED_BIND = 1; // 待配网
    }

    uint32 capability = 1; // 按以上Capability枚举值进行或运算得到最终的值
    string pid = 2;        // 产品型号ID，pid为空则表示该设备为云云设备
    Status status = 3;
    bytes vendorData = 4;  // 厂商自定义数据，如果发现的为云云等三方厂商设备，将设备广播的数据完整放这个字段
    // 随机生成16字节数，用于配网时对称密钥生成的salt
    // 待配网且有二层配网能力时带此字段，否则填空
    // 每次进入配网或配网失败后需要重新生成
    // 如果手机配网后收到新random的设备广播，且没有收到设备的配网错误应答，则表示设备上次配网解密失败
    bytes random = 5;
    // 对于云云对接产品，当上面pid不能表示具体产品型号只能表示厂商时，
    // 通过此字段来表示厂商自定义产品型号标识，并通过在云端配置识别具体型号
    // 格式为“品类&型号”，美的的设备此字段由“品类&SN8&A0”组成
	  // 此处设备发出的SN8和A0值必须与开放平台保持一致，当SN8或A0值没有时全填0
    bytes vendorPid = 6;
	  //普通设备为完整mac或mac的最后4个16进制数字，小写
    //蓝牙mesh设备为uuid
    string devId = 7;
    int32 rssi = 8;
	  // 发现方式
    DiscoveryType type = 9;
  }

  repeated DevList list = 1;
}

message ActionInSetupDevice{
  bytes bindKey = 1;
  string pid = 2;
  //普通设备为完整mac或mac的最后4个16进制数字，小写
  //蓝牙mesh设备为uuid
  string devId = 3;
  bytes pin = 4;  // 不是基于pin方式添加时值为空
  bytes ecdhPubKey = 5; // 不是基于ecdh方式添加时值为空
  DiscoveryType type = 6;
}

message ActionOutSetupDevice{
  enum Status {
        // 等待接收设备配置
        DeviceSetupWaiting = 0;
        // 已收到配置状态
        DeviceSetupReceived = 1;
        // 等待用户交互
        DeviceWaitingForUserInteractive = 1024;
        // 设备正在准备联网组件
        NetworkPreparing = 4096;
        // 正在搜索、连接网络
        NetworkAssosciating = 5120;
        // 正在网络认证
        NetworkAuthencating = 6144;
        // 正在获取网络地址
        NetworkRequestingAddress = 7168;
        // 准备连接到服务器
        ServerPreparing = 8192;
        // 正在连接到服务器
        ServerConnecting = 9216;
        // 正在认证身份
        ServerAuthencating = 10240;
        // 正在绑定设备到用户
        ServerBindingUser = 11264;
        // 设备连上云后准备初始化设备
        DevicePreparingInitialization = 12288;
        // 由设备自己定义的初始化进度代码
        DeviceSpecifiedInitializationProgressStart = 13312;
        reserved 13313 to 16383;
    }

    enum Result {
        OK = 0;
        // EC-JPAKE 继续
        // detail应填写ecjpakeCountinue字段
        ECJPAKE_CONTINUE = 1;
        // 被用户主动拒绝
        USER_INTERACTIVE_REJECT = 2;
        // 超过最大配置次数
        MAX_SETUP_EXCESSED = 3;
        // 加密方式不支持
        ENCRYPTION_NOT_SUPPORTED = 4;
        // WIFI热点探测失败
        WIFI_PROBE_FAILED = 5;
        // WIFI认证失败
        WIFI_AUTH_FAILED = 6;
        // WIFI 其它连接错误
        WIFI_OTHER_ERROR = 7;
        // 获取网络地址失败
        REQUEST_NETWORK_ADDRESS_FAILED = 8;
        // 服务器全地址不可达（路由错误、DNS解析失败或连接失败）
        SERVER_UNREACHABLE = 9;
        // 安全连接握手失败
        // 一次服务器TLS连接失败并不终止整个连接服务器过程，当所有服务器地址尝试均失败时，若
        // 存在TLS连接错误，则使用SERVER_TLS_HANDSHAKE_FAILED。
        SERVER_TLS_HANDSHAKE_FAILED = 10;
        // 设备绑定被服务器明确拒绝。
        // detail应填写serverRejectedCode
        SERVER_REJECTED = 11;
        // 服务器响应超时
        SERVER_TIMEOUT = 12;
        // 配置失败，由于设备从收到了意料之外的数据
        UNEXPECTED_SETUP_DATA = 13;
    }

    oneof code {
        Status status = 1;  // 配置过程
        Result result = 2;  // 配置结果
    }

    oneof detail {
      uint32 serverRejectedCode = 3; // 被服务器拒绝的错误码
  }
}


message Properties{
  // action scanSubDevice(ActionInScanSubDevice) returns (stream ActionOutScanSubDevice) = 1;  //由主动端发起正常结束事务
  // action setupSubDevice(ActionInSetupSubDevice) returns (stream ActionOutSetupSubDevice) = 2;  //由被动端发起正常结束事务
  repeated ArrayNode neighborTable = 3;
  // event devDiscovered(EventDevDiscovered) = 4;
  // action setupDevice(ActionInSetupDevice) returns (stream ActionOutSetupDevice) = 5;  //由被动端发起正常结束事务
}


