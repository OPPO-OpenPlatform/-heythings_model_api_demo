/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: fileTransport.proto */

#ifndef FILE_TRANSPORT_SERVICE_H
#define FILE_TRANSPORT_SERVICE_H

#include "hey/types.h"

struct file_transport_file_upload_file_info_in {
    char *name;
    int64_t size;
};

struct file_transport_file_upload_final_in {
    char __place_holder__; // make compiler happy
};

enum file_transport_file_upload_send_type_in {
    FILE_TRANSPORT_FILE_UPLOAD_SEND_TYPE_IN_NOT_SET = 0,
    FILE_TRANSPORT_FILE_UPLOAD_SEND_TYPE_IN_FILE = 1,
    FILE_TRANSPORT_FILE_UPLOAD_SEND_TYPE_IN_CHUNK = 2,
    FILE_TRANSPORT_FILE_UPLOAD_SEND_TYPE_IN_FINAL = 3
};

struct file_transport_file_upload_in {
    enum file_transport_file_upload_send_type_in send_type_case;
    union {
        struct file_transport_file_upload_file_info_in *file;
        struct hey_binary_data chunk;
        struct file_transport_file_upload_final_in *final;
    };
};

struct file_transport_file_upload_out {
    uint32_t code;
};

struct file_transport_file_download_req_file_info_in {
    char *name;
};

enum file_transport_file_download_message_in {
    FILE_TRANSPORT_FILE_DOWNLOAD_MESSAGE_IN_NOT_SET = 0,
    FILE_TRANSPORT_FILE_DOWNLOAD_MESSAGE_IN_REQFILE = 1,
    FILE_TRANSPORT_FILE_DOWNLOAD_MESSAGE_IN_CODE = 2
};

struct file_transport_file_download_in {
    enum file_transport_file_download_message_in message_case;
    union {
        struct file_transport_file_download_req_file_info_in *reqfile;
        uint32_t code;
    };
};

struct file_transport_file_download_file_info_out {
    char *name;
    int64_t size;
};

struct file_transport_file_download_final_out {
    char __place_holder__; // make compiler happy
};

enum file_transport_file_download_message_out {
    FILE_TRANSPORT_FILE_DOWNLOAD_MESSAGE_OUT_NOT_SET = 0,
    FILE_TRANSPORT_FILE_DOWNLOAD_MESSAGE_OUT_FILE = 1,
    FILE_TRANSPORT_FILE_DOWNLOAD_MESSAGE_OUT_CHUNK = 2,
    FILE_TRANSPORT_FILE_DOWNLOAD_MESSAGE_OUT_FINAL = 3
};

struct file_transport_file_download_out {
    enum file_transport_file_download_message_out message_case;
    union {
        struct file_transport_file_download_file_info_out *file;
        struct hey_binary_data chunk;
        struct file_transport_file_download_final_out *final;
    };
};

enum FILE_TRANSPORT_ACTION {
    FILE_TRANSPORT_ACTION_FILE_UPLOAD = 1,
    FILE_TRANSPORT_ACTION_FILE_DOWNLOAD = 2
};

struct file_transport_properties {
    char __place_holder__; // make compiler happy
};

/**
 * @brief file transport service initialization
 * @param properties [file transport service properties]
 * @return int32_t   [initialize result]
*/
int32_t file_transport_service_init(const struct file_transport_properties *properties);

/**
 * @brief file upload action start callback of file transport service
 * @param ctx          [action context]
 * @param action       [file upload action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t file_transport_file_upload_start_cb(struct hey_action_ctx *ctx, struct file_transport_file_upload_in *action, void **user_context);

/**
 * @brief file upload action message receive callback of file transport service
 * @param user_context [callback data which form action start callback function]
 * @param action       [file upload action in]
 * @return int32_t     [action message callback handle result, 0 means success]
 */
int32_t file_transport_file_upload_message_cb(void *user_context, struct file_transport_file_upload_in *action);

/**
 * @brief file upload action send message of file transport service
 * @param ctx      [action context]
 * @param action   [file upload action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t file_transport_file_upload_send(struct hey_action_ctx *ctx, struct file_transport_file_upload_out *action);

/**
 * @brief file upload action stop of file transport service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t file_transport_file_upload_stop(struct hey_action_ctx *ctx);

/**
 * @brief file upload action stop callback of file transport service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void file_transport_file_upload_stop_cb(void *user_context);

/**
 * @brief file download action start callback of file transport service
 * @param ctx          [action context]
 * @param action       [file download action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t file_transport_file_download_start_cb(struct hey_action_ctx *ctx, struct file_transport_file_download_in *action, void **user_context);

/**
 * @brief file download action send message of file transport service
 * @param ctx      [action context]
 * @param action   [file download action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t file_transport_file_download_send(struct hey_action_ctx *ctx, struct file_transport_file_download_out *action);

/**
 * @brief file download action stop of file transport service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t file_transport_file_download_stop(struct hey_action_ctx *ctx);

/**
 * @brief file download action stop callback of file transport service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void file_transport_file_download_stop_cb(void *user_context);

#endif /* FILE_TRANSPORT_SERVICE_H */
