/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: catLitterBox.proto */

#ifndef CAT_LITTER_BOX_SERVICE_H
#define CAT_LITTER_BOX_SERVICE_H

#include "hey/types.h"

enum cat_toilet_fault_code_code {
    CAT_TOILET_FAULT_CODE_CODE_WEIGHING_FAULT = 0,
    CAT_TOILET_FAULT_CODE_CODE_MOTOR_FAULT = 1,
    CAT_TOILET_FAULT_CODE_CODE_HALL_FAULT = 2,
    CAT_TOILET_FAULT_CODE_CODE_RADAR_FAULT = 3,
    CAT_TOILET_FAULT_CODE_CODE_ROLLER_NOT_IN_PLACE = 4,
    CAT_TOILET_FAULT_CODE_CODE_COVER_NOT_IN_PLACE = 5,
    CAT_TOILET_FAULT_CODE_CODE_TOO_HEAVY = 6
};

enum cat_litter_box_job_status {
    CAT_LITTER_BOX_JOB_STATUS_STANDBY_STATUS = 0,
    CAT_LITTER_BOX_JOB_STATUS_PREACTIVE_STATUS = 1,
    CAT_LITTER_BOX_JOB_STATUS_WORK_STATUS = 2,
    CAT_LITTER_BOX_JOB_STATUS_PAUSE_STATUS = 3,
    CAT_LITTER_BOX_JOB_STATUS_CANCEL_STATUS = 4,
    CAT_LITTER_BOX_JOB_STATUS_COMPLETE_STATUS = 5
};

enum cat_litter_box_cat_toilet_mode {
    CAT_LITTER_BOX_CAT_TOILET_MODE_IDLE = 0,
    CAT_LITTER_BOX_CAT_TOILET_MODE_RESET = 1,
    CAT_LITTER_BOX_CAT_TOILET_MODE_CLEAN_UP = 2,
    CAT_LITTER_BOX_CAT_TOILET_MODE_SAND_CHANGE = 3,
    CAT_LITTER_BOX_CAT_TOILET_MODE_SAND_SMOOTH = 4
};

enum cat_litter_box_cat_toilet_cat_status {
    CAT_LITTER_BOX_CAT_TOILET_CAT_STATUS_CAT_IS_AWAY = 0,
    CAT_LITTER_BOX_CAT_TOILET_CAT_STATUS_CAT_IS_APPROACHING = 1,
    CAT_LITTER_BOX_CAT_TOILET_CAT_STATUS_CAT_IN = 2,
    CAT_LITTER_BOX_CAT_TOILET_CAT_STATUS_CAT_IS_LEAVING = 3
};

enum cat_litter_box_operation {
    CAT_LITTER_BOX_OPERATION_START = 0,
    CAT_LITTER_BOX_OPERATION_PAUSE = 1,
    CAT_LITTER_BOX_OPERATION_RESUME = 2,
    CAT_LITTER_BOX_OPERATION_STOP = 3
};

enum cat_litter_box_operation_return {
    CAT_LITTER_BOX_OPERATION_RETURN_SUCCESS = 0,
    CAT_LITTER_BOX_OPERATION_RETURN_BUSY = 1,
    CAT_LITTER_BOX_OPERATION_RETURN_FAULT = 2
};

struct cat_litter_box_cat_toilet_fault_code {
    size_t n_code;
    enum cat_toilet_fault_code_code *code;
};

struct cat_litter_box_auto_cleanup {
    bool enabled;
    uint32_t delaytostart;
};

struct cat_litter_box_cat_info {
    uint32_t catid;
    uint32_t weight;
    uint64_t lasttoilettime;
};

struct cat_litter_box_no_disturbing_period {
    bool status;
    uint32_t week;
    uint32_t fromhour;
    uint32_t fromminute;
    uint32_t fromsec;
    uint32_t tohour;
    uint32_t tominute;
    uint32_t tosec;
};

struct cat_litter_box_device_factory_restore_in {
    char __place_holder__; // make compiler happy
};

struct cat_litter_box_device_factory_restore_out {
    char __place_holder__; // make compiler happy
};

struct cat_litter_box_clean_up_in {
    enum cat_litter_box_operation mode;
};

struct cat_litter_box_clean_up_out {
    enum cat_litter_box_operation_return code;
};

struct cat_litter_box_cat_toilet_sand_change_in {
    enum cat_litter_box_operation mode;
};

struct cat_litter_box_cat_toilet_sand_change_out {
    enum cat_litter_box_operation_return code;
};

struct cat_litter_box_cat_sand_smoothing_in {
    enum cat_litter_box_operation mode;
};

struct cat_litter_box_cat_sand_smoothing_out {
    enum cat_litter_box_operation_return code;
};

struct cat_litter_box_event_after_using_the_toilet {
    uint32_t id;
    uint32_t weight;
    uint32_t duration;
};

struct cat_litter_box_event_auto_cleanup_start {
    char __place_holder__; // make compiler happy
};

struct cat_litter_box_event_auto_cleanup_end {
    char __place_holder__; // make compiler happy
};

struct cat_litter_box_event_start_regular_cleaning {
    char __place_holder__; // make compiler happy
};

struct cat_litter_box_event_end_regular_cleaning {
    char __place_holder__; // make compiler happy
};

struct cat_litter_box_event_cat_near {
    char __place_holder__; // make compiler happy
};

struct cat_litter_box_event_cat_leaves {
    char __place_holder__; // make compiler happy
};

struct cat_litter_box_event_manual_cleanup_end {
    char __place_holder__; // make compiler happy
};

struct cat_litter_box_event_sand_change_end {
    char __place_holder__; // make compiler happy
};

struct cat_litter_box_event_smoothing_end {
    char __place_holder__; // make compiler happy
};

struct cat_litter_box_event_weight_sensor_fault {
    char __place_holder__; // make compiler happy
};

struct cat_litter_box_event_motor_fault {
    char __place_holder__; // make compiler happy
};

struct cat_litter_box_event_cover_open {
    char __place_holder__; // make compiler happy
};

struct cat_litter_box_event_roller_not_in_place {
    char __place_holder__; // make compiler happy
};

enum CAT_LITTER_BOX_PROPERTY {
    CAT_LITTER_BOX_PROPERTY_JOBSTATUS = 1,
    CAT_LITTER_BOX_PROPERTY_CATTOILETMODE = 2,
    CAT_LITTER_BOX_PROPERTY_CATTOILETFAULTCODE = 3,
    CAT_LITTER_BOX_PROPERTY_AUTOCLEANUP = 4,
    CAT_LITTER_BOX_PROPERTY_WEIGHT = 5,
    CAT_LITTER_BOX_PROPERTY_CATTOILETCATSTATUS = 6,
    CAT_LITTER_BOX_PROPERTY_CATINFO = 7,
    CAT_LITTER_BOX_PROPERTY_THENUMBEROFTOILETVISITSTODAY = 8,
    CAT_LITTER_BOX_PROPERTY_CHILDLOCKENABLED = 9,
    CAT_LITTER_BOX_PROPERTY_NODISTURBINGPERIOD = 10,
    CAT_LITTER_BOX_PROPERTY_WEIGHTISSENSED = 25,
    CAT_LITTER_BOX_PROPERTY_INDICATORLIGHTOFFPERIOD = 30,
    CAT_LITTER_BOX_PROPERTY_INDICATORLIGHTENABLED = 31
};

enum CAT_LITTER_BOX_ACTION {
    CAT_LITTER_BOX_ACTION_DEVICE_FACTORY_RESTORE = 11,
    CAT_LITTER_BOX_ACTION_CLEAN_UP = 12,
    CAT_LITTER_BOX_ACTION_CAT_TOILET_SAND_CHANGE = 13,
    CAT_LITTER_BOX_ACTION_CAT_SAND_SMOOTHING = 14
};

enum CAT_LITTER_BOX_EVENT {
    CAT_LITTER_BOX_EVENT_AFTER_USING_THE_TOILET = 15,
    CAT_LITTER_BOX_EVENT_AUTO_CLEANUP_START = 16,
    CAT_LITTER_BOX_EVENT_AUTO_CLEANUP_END = 17,
    CAT_LITTER_BOX_EVENT_START_REGULAR_CLEANING = 18,
    CAT_LITTER_BOX_EVENT_END_REGULAR_CLEANING = 19,
    CAT_LITTER_BOX_EVENT_CAT_NEAR = 20,
    CAT_LITTER_BOX_EVENT_CAT_LEAVES = 21,
    CAT_LITTER_BOX_EVENT_MANUAL_CLEANUP_END = 22,
    CAT_LITTER_BOX_EVENT_SAND_CHANGE_END = 23,
    CAT_LITTER_BOX_EVENT_SMOOTHING_END = 24,
    CAT_LITTER_BOX_EVENT_WEIGHT_SENSOR_FAULT = 26,
    CAT_LITTER_BOX_EVENT_MOTOR_FAULT = 27,
    CAT_LITTER_BOX_EVENT_COVER_OPEN = 28,
    CAT_LITTER_BOX_EVENT_ROLLER_NOT_IN_PLACE = 29
};

struct cat_litter_box_properties {
    enum cat_litter_box_job_status jobstatus;
    enum cat_litter_box_cat_toilet_mode cattoiletmode;
    struct cat_litter_box_cat_toilet_fault_code *cattoiletfaultcode;
    struct cat_litter_box_auto_cleanup *autocleanup;
    uint32_t weight;
    enum cat_litter_box_cat_toilet_cat_status cattoiletcatstatus;
    size_t n_catinfo;
    struct hey_array_node **catinfo;
    uint32_t thenumberoftoiletvisitstoday;
    bool childlockenabled;
    struct cat_litter_box_no_disturbing_period *nodisturbingperiod;
    bool weightissensed;
    struct cat_litter_box_no_disturbing_period *indicatorlightoffperiod;
    bool indicatorlightenabled;
};

/**
 * @brief cat litter box service initialization
 * @param properties [cat litter box service properties]
 * @return int32_t   [initialize result]
*/
int32_t cat_litter_box_service_init(const struct cat_litter_box_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
struct cat_litter_box_cat_info *cat_litter_box_cat_info_unpack(const uint8_t *data, size_t len);
void cat_litter_box_cat_info_free_unpacked(struct cat_litter_box_cat_info *data);
// less than 0 means failure
int32_t cat_litter_box_cat_info_get_packed_size(const struct cat_litter_box_cat_info *data);
// less than 0 means failure
int32_t cat_litter_box_cat_info_pack(const struct cat_litter_box_cat_info *data, uint8_t *out);

/**
 * @brief properties write callback of cat litter box service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t cat_litter_box_properties_write_cb(size_t count, uint32_t *enumerate, struct cat_litter_box_properties *properties);

/**
 * @brief arrayNode properties add callback of cat litter box service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t cat_litter_box_catinfo_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of cat litter box service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t cat_litter_box_catinfo_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of cat litter box service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t cat_litter_box_catinfo_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief update properties of cat litter box service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t cat_litter_box_properties_update(size_t count, uint32_t *enumerate, struct cat_litter_box_properties *properties);

/**
 * @brief device factory restore action start callback of cat litter box service
 * @param ctx          [action context]
 * @param action       [device factory restore action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t cat_litter_box_device_factory_restore_start_cb(struct hey_action_ctx *ctx, struct cat_litter_box_device_factory_restore_in *action, void **user_context);

/**
 * @brief device factory restore action send message of cat litter box service
 * @param ctx      [action context]
 * @param action   [device factory restore action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t cat_litter_box_device_factory_restore_send(struct hey_action_ctx *ctx, struct cat_litter_box_device_factory_restore_out *action);

/**
 * @brief device factory restore action stop of cat litter box service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t cat_litter_box_device_factory_restore_stop(struct hey_action_ctx *ctx);

/**
 * @brief device factory restore action stop callback of cat litter box service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void cat_litter_box_device_factory_restore_stop_cb(void *user_context);

/**
 * @brief clean up action start callback of cat litter box service
 * @param ctx          [action context]
 * @param action       [clean up action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t cat_litter_box_clean_up_start_cb(struct hey_action_ctx *ctx, struct cat_litter_box_clean_up_in *action, void **user_context);

/**
 * @brief clean up action send message of cat litter box service
 * @param ctx      [action context]
 * @param action   [clean up action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t cat_litter_box_clean_up_send(struct hey_action_ctx *ctx, struct cat_litter_box_clean_up_out *action);

/**
 * @brief clean up action stop of cat litter box service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t cat_litter_box_clean_up_stop(struct hey_action_ctx *ctx);

/**
 * @brief clean up action stop callback of cat litter box service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void cat_litter_box_clean_up_stop_cb(void *user_context);

/**
 * @brief cat toilet sand change action start callback of cat litter box service
 * @param ctx          [action context]
 * @param action       [cat toilet sand change action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t cat_litter_box_cat_toilet_sand_change_start_cb(struct hey_action_ctx *ctx, struct cat_litter_box_cat_toilet_sand_change_in *action, void **user_context);

/**
 * @brief cat toilet sand change action send message of cat litter box service
 * @param ctx      [action context]
 * @param action   [cat toilet sand change action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t cat_litter_box_cat_toilet_sand_change_send(struct hey_action_ctx *ctx, struct cat_litter_box_cat_toilet_sand_change_out *action);

/**
 * @brief cat toilet sand change action stop of cat litter box service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t cat_litter_box_cat_toilet_sand_change_stop(struct hey_action_ctx *ctx);

/**
 * @brief cat toilet sand change action stop callback of cat litter box service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void cat_litter_box_cat_toilet_sand_change_stop_cb(void *user_context);

/**
 * @brief cat sand smoothing action start callback of cat litter box service
 * @param ctx          [action context]
 * @param action       [cat sand smoothing action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t cat_litter_box_cat_sand_smoothing_start_cb(struct hey_action_ctx *ctx, struct cat_litter_box_cat_sand_smoothing_in *action, void **user_context);

/**
 * @brief cat sand smoothing action send message of cat litter box service
 * @param ctx      [action context]
 * @param action   [cat sand smoothing action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t cat_litter_box_cat_sand_smoothing_send(struct hey_action_ctx *ctx, struct cat_litter_box_cat_sand_smoothing_out *action);

/**
 * @brief cat sand smoothing action stop of cat litter box service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t cat_litter_box_cat_sand_smoothing_stop(struct hey_action_ctx *ctx);

/**
 * @brief cat sand smoothing action stop callback of cat litter box service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void cat_litter_box_cat_sand_smoothing_stop_cb(void *user_context);

/**
 * @brief after using the toilet notify of cat litter box service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t cat_litter_box_after_using_the_toilet_notify(struct cat_litter_box_event_after_using_the_toilet *event, struct hey_event_notify_attr *attr);

/**
 * @brief after using the toilet notify result callback of cat litter box service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void cat_litter_box_after_using_the_toilet_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief auto cleanup start notify of cat litter box service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t cat_litter_box_auto_cleanup_start_notify(struct cat_litter_box_event_auto_cleanup_start *event, struct hey_event_notify_attr *attr);

/**
 * @brief auto cleanup start notify result callback of cat litter box service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void cat_litter_box_auto_cleanup_start_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief auto cleanup end notify of cat litter box service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t cat_litter_box_auto_cleanup_end_notify(struct cat_litter_box_event_auto_cleanup_end *event, struct hey_event_notify_attr *attr);

/**
 * @brief auto cleanup end notify result callback of cat litter box service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void cat_litter_box_auto_cleanup_end_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief start regular cleaning notify of cat litter box service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t cat_litter_box_start_regular_cleaning_notify(struct cat_litter_box_event_start_regular_cleaning *event, struct hey_event_notify_attr *attr);

/**
 * @brief start regular cleaning notify result callback of cat litter box service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void cat_litter_box_start_regular_cleaning_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief end regular cleaning notify of cat litter box service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t cat_litter_box_end_regular_cleaning_notify(struct cat_litter_box_event_end_regular_cleaning *event, struct hey_event_notify_attr *attr);

/**
 * @brief end regular cleaning notify result callback of cat litter box service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void cat_litter_box_end_regular_cleaning_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief cat near notify of cat litter box service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t cat_litter_box_cat_near_notify(struct cat_litter_box_event_cat_near *event, struct hey_event_notify_attr *attr);

/**
 * @brief cat near notify result callback of cat litter box service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void cat_litter_box_cat_near_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief cat leaves notify of cat litter box service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t cat_litter_box_cat_leaves_notify(struct cat_litter_box_event_cat_leaves *event, struct hey_event_notify_attr *attr);

/**
 * @brief cat leaves notify result callback of cat litter box service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void cat_litter_box_cat_leaves_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief manual cleanup end notify of cat litter box service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t cat_litter_box_manual_cleanup_end_notify(struct cat_litter_box_event_manual_cleanup_end *event, struct hey_event_notify_attr *attr);

/**
 * @brief manual cleanup end notify result callback of cat litter box service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void cat_litter_box_manual_cleanup_end_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief sand change end notify of cat litter box service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t cat_litter_box_sand_change_end_notify(struct cat_litter_box_event_sand_change_end *event, struct hey_event_notify_attr *attr);

/**
 * @brief sand change end notify result callback of cat litter box service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void cat_litter_box_sand_change_end_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief smoothing end notify of cat litter box service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t cat_litter_box_smoothing_end_notify(struct cat_litter_box_event_smoothing_end *event, struct hey_event_notify_attr *attr);

/**
 * @brief smoothing end notify result callback of cat litter box service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void cat_litter_box_smoothing_end_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief weight sensor fault notify of cat litter box service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t cat_litter_box_weight_sensor_fault_notify(struct cat_litter_box_event_weight_sensor_fault *event, struct hey_event_notify_attr *attr);

/**
 * @brief weight sensor fault notify result callback of cat litter box service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void cat_litter_box_weight_sensor_fault_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief motor fault notify of cat litter box service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t cat_litter_box_motor_fault_notify(struct cat_litter_box_event_motor_fault *event, struct hey_event_notify_attr *attr);

/**
 * @brief motor fault notify result callback of cat litter box service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void cat_litter_box_motor_fault_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief cover open notify of cat litter box service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t cat_litter_box_cover_open_notify(struct cat_litter_box_event_cover_open *event, struct hey_event_notify_attr *attr);

/**
 * @brief cover open notify result callback of cat litter box service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void cat_litter_box_cover_open_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

/**
 * @brief roller not in place notify of cat litter box service
 * @param event    [event content]
 * @param attr     [event details]
 * @return int64_t [event uuid, get error code from errno when return negative value]
*/
int64_t cat_litter_box_roller_not_in_place_notify(struct cat_litter_box_event_roller_not_in_place *event, struct hey_event_notify_attr *attr);

/**
 * @brief roller not in place notify result callback of cat litter box service
 * @param ctx    [registered callback context by user]
 * @param result [the result of notify, 0 means success]
 * @return none
*/
void cat_litter_box_roller_not_in_place_notify_result_cb(struct hey_job_ctx *ctx, int32_t result);

#endif /* CAT_LITTER_BOX_SERVICE_H */
