/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: subDeviceSetup.proto */

#ifndef SUB_DEVICE_SETUP_SERVICE_H
#define SUB_DEVICE_SETUP_SERVICE_H

#include "hey/types.h"

enum sub_device_setup_action_out_sub_device_setup_code {
    SUB_DEVICE_SETUP_ACTION_OUT_SUB_DEVICE_SETUP_CODE_Success = 0
};

struct sub_device_setup_sub_device_setup_in {
    uint32_t devaddress;
    uint64_t domainid;
    struct hey_binary_data domaincert;
    struct hey_binary_data domainkeypub;
    struct hey_binary_data domaindevbeaconkey;
    struct hey_binary_data domaindevbeaconiv;
};

struct sub_device_setup_sub_device_setup_out {
    enum sub_device_setup_action_out_sub_device_setup_code code;
};

enum SUB_DEVICE_SETUP_ACTION {
    SUB_DEVICE_SETUP_ACTION_SUB_DEVICE_SETUP = 1
};

struct sub_device_setup_properties {
    char __place_holder__; // make compiler happy
};

/**
 * @brief sub device setup service initialization
 * @param properties [sub device setup service properties]
 * @return int32_t   [initialize result]
*/
int32_t sub_device_setup_service_init(const struct sub_device_setup_properties *properties);

/**
 * @brief sub device setup action start callback of sub device setup service
 * @param ctx          [action context]
 * @param action       [sub device setup action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t sub_device_setup_sub_device_setup_start_cb(struct hey_action_ctx *ctx, struct sub_device_setup_sub_device_setup_in *action, void **user_context);

/**
 * @brief sub device setup action send message of sub device setup service
 * @param ctx      [action context]
 * @param action   [sub device setup action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t sub_device_setup_sub_device_setup_send(struct hey_action_ctx *ctx, struct sub_device_setup_sub_device_setup_out *action);

/**
 * @brief sub device setup action stop of sub device setup service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t sub_device_setup_sub_device_setup_stop(struct hey_action_ctx *ctx);

/**
 * @brief sub device setup action stop callback of sub device setup service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void sub_device_setup_sub_device_setup_stop_cb(void *user_context);

#endif /* SUB_DEVICE_SETUP_SERVICE_H */
