/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: mobileNetwork.proto */

#ifndef MOBILE_NETWORK_SERVICE_H
#define MOBILE_NETWORK_SERVICE_H

#include "hey/types.h"

enum network_info_link_status {
    NETWORK_INFO_LINK_STATUS_NO_SIM = 0,
    NETWORK_INFO_LINK_STATUS_UNCONNECTED = 1,
    NETWORK_INFO_LINK_STATUS_CONNECTING = 2,
    NETWORK_INFO_LINK_STATUS_CONNECTED = 3
};

enum network_info_signal_strength {
    NETWORK_INFO_SIGNAL_STRENGTH_ONE_STRENGTH = 0,
    NETWORK_INFO_SIGNAL_STRENGTH_TWO_STRENGTH = 1,
    NETWORK_INFO_SIGNAL_STRENGTH_THREE_STRENGTH = 2,
    NETWORK_INFO_SIGNAL_STRENGTH_FOUR_STRENGTH = 3,
    NETWORK_INFO_SIGNAL_STRENGTH_FIVE_STRENGTH = 4
};

enum apn_certification {
    APN_CERTIFICATION_AUTO = 0,
    APN_CERTIFICATION_PAP = 1,
    APN_CERTIFICATION_CHAP = 2
};

enum mobile_network_mobile_network_mode {
    MOBILE_NETWORK_MOBILE_NETWORK_MODE_MODE_AUTO = 0,
    MOBILE_NETWORK_MOBILE_NETWORK_MODE_ONLY_4G = 1,
    MOBILE_NETWORK_MOBILE_NETWORK_MODE_ONLY_5G = 2
};

struct mobile_network_signal_test_in {
    char __place_holder__; // make compiler happy
};

struct mobile_network_signal_test_out {
    uint32_t signalscore;
};

struct mobile_network_network_info {
    enum network_info_link_status linkstatus;
    char *operatorname;
    enum network_info_signal_strength signalstrength;
    uint32_t uploadrate;
    uint32_t downloadrate;
};

struct mobile_network_modify_pin_in {
    char *oldpin;
    char *newpin;
};

struct mobile_network_modify_pin_out {
    char __place_holder__; // make compiler happy
};

struct mobile_network_apn {
    char *username;
    char *password;
    enum apn_certification certification;
    char *apn;
};

enum MOBILE_NETWORK_PROPERTY {
    MOBILE_NETWORK_PROPERTY_NETWORKINFO = 1,
    MOBILE_NETWORK_PROPERTY_MOBILENETWORKIPV4 = 2,
    MOBILE_NETWORK_PROPERTY_MOBILENETWORKIPV6 = 3,
    MOBILE_NETWORK_PROPERTY_CELLID = 4,
    MOBILE_NETWORK_PROPERTY_RSRP = 5,
    MOBILE_NETWORK_PROPERTY_PLMN = 6,
    MOBILE_NETWORK_PROPERTY_IMEI = 7,
    MOBILE_NETWORK_PROPERTY_IMSI = 8,
    MOBILE_NETWORK_PROPERTY_MOBILENETWORKENABLED = 10,
    MOBILE_NETWORK_PROPERTY_MOBILENETWORKROMINGENABLED = 11,
    MOBILE_NETWORK_PROPERTY_MOBILENETWORKMODE = 12,
    MOBILE_NETWORK_PROPERTY_SIMPIN = 13,
    MOBILE_NETWORK_PROPERTY_APN = 15,
    MOBILE_NETWORK_PROPERTY_MOBILEGATEWAY = 16,
    MOBILE_NETWORK_PROPERTY_MOBILEDNS = 17
};

enum MOBILE_NETWORK_ACTION {
    MOBILE_NETWORK_ACTION_SIGNAL_TEST = 9,
    MOBILE_NETWORK_ACTION_MODIFY_PIN = 14
};

struct mobile_network_properties {
    size_t n_networkinfo;
    struct hey_array_node **networkinfo;
    char *mobilenetworkipv4;
    char *mobilenetworkipv6;
    char *cellid;
    char *rsrp;
    char *plmn;
    char *imei;
    char *imsi;
    bool mobilenetworkenabled;
    bool mobilenetworkromingenabled;
    enum mobile_network_mobile_network_mode mobilenetworkmode;
    char *simpin;
    size_t n_apn;
    struct hey_array_node **apn;
    char *mobilegateway;
    char *mobiledns;
};

/**
 * @brief mobile network service initialization
 * @param properties [mobile network service properties]
 * @return int32_t   [initialize result]
*/
int32_t mobile_network_service_init(const struct mobile_network_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
struct mobile_network_network_info *mobile_network_network_info_unpack(const uint8_t *data, size_t len);
void mobile_network_network_info_free_unpacked(struct mobile_network_network_info *data);
// less than 0 means failure
int32_t mobile_network_network_info_get_packed_size(const struct mobile_network_network_info *data);
// less than 0 means failure
int32_t mobile_network_network_info_pack(const struct mobile_network_network_info *data, uint8_t *out);

struct mobile_network_apn *mobile_network_apn_unpack(const uint8_t *data, size_t len);
void mobile_network_apn_free_unpacked(struct mobile_network_apn *data);
// less than 0 means failure
int32_t mobile_network_apn_get_packed_size(const struct mobile_network_apn *data);
// less than 0 means failure
int32_t mobile_network_apn_pack(const struct mobile_network_apn *data, uint8_t *out);

/**
 * @brief properties write callback of mobile network service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t mobile_network_properties_write_cb(size_t count, uint32_t *enumerate, struct mobile_network_properties *properties);

/**
 * @brief arrayNode properties add callback of mobile network service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t mobile_network_networkinfo_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of mobile network service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t mobile_network_networkinfo_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of mobile network service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t mobile_network_networkinfo_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief arrayNode properties add callback of mobile network service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t mobile_network_apn_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of mobile network service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t mobile_network_apn_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of mobile network service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t mobile_network_apn_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief update properties of mobile network service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t mobile_network_properties_update(size_t count, uint32_t *enumerate, struct mobile_network_properties *properties);

/**
 * @brief signal test action start callback of mobile network service
 * @param ctx          [action context]
 * @param action       [signal test action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t mobile_network_signal_test_start_cb(struct hey_action_ctx *ctx, struct mobile_network_signal_test_in *action, void **user_context);

/**
 * @brief signal test action send message of mobile network service
 * @param ctx      [action context]
 * @param action   [signal test action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t mobile_network_signal_test_send(struct hey_action_ctx *ctx, struct mobile_network_signal_test_out *action);

/**
 * @brief signal test action stop of mobile network service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t mobile_network_signal_test_stop(struct hey_action_ctx *ctx);

/**
 * @brief signal test action stop callback of mobile network service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void mobile_network_signal_test_stop_cb(void *user_context);

/**
 * @brief modify pin action start callback of mobile network service
 * @param ctx          [action context]
 * @param action       [modify pin action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t mobile_network_modify_pin_start_cb(struct hey_action_ctx *ctx, struct mobile_network_modify_pin_in *action, void **user_context);

/**
 * @brief modify pin action send message of mobile network service
 * @param ctx      [action context]
 * @param action   [modify pin action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t mobile_network_modify_pin_send(struct hey_action_ctx *ctx, struct mobile_network_modify_pin_out *action);

/**
 * @brief modify pin action stop of mobile network service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t mobile_network_modify_pin_stop(struct hey_action_ctx *ctx);

/**
 * @brief modify pin action stop callback of mobile network service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void mobile_network_modify_pin_stop_cb(void *user_context);

#endif /* MOBILE_NETWORK_SERVICE_H */
