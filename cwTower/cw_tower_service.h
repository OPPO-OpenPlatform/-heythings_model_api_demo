/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: cwTower.proto */

#ifndef CW_TOWER_SERVICE_H
#define CW_TOWER_SERVICE_H

#include "hey/types.h"

enum CW_TOWER_PROPERTY {
    CW_TOWER_PROPERTY_POWER = 1,
    CW_TOWER_PROPERTY_MANNULAUTOSTA = 2,
    CW_TOWER_PROPERTY_FAULTSTA = 3,
    CW_TOWER_PROPERTY_HLSTA = 4,
    CW_TOWER_PROPERTY_LLSTA = 5,
    CW_TOWER_PROPERTY_WINDSPEED = 6,
    CW_TOWER_PROPERTY_FREQSETTING = 7,
    CW_TOWER_PROPERTY_FREQFEEDBACK = 8,
    CW_TOWER_PROPERTY_VIBRATIONSTA = 9
};

struct cw_tower_properties {
    bool power;
    bool mannulautosta;
    bool faultsta;
    bool hlsta;
    bool llsta;
    uint32_t windspeed;
    uint32_t freqsetting;
    uint32_t freqfeedback;
    bool vibrationsta;
};

/**
 * @brief cw tower service initialization
 * @param properties [cw tower service properties]
 * @return int32_t   [initialize result]
*/
int32_t cw_tower_service_init(const struct cw_tower_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of cw tower service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t cw_tower_properties_write_cb(size_t count, uint32_t *enumerate, struct cw_tower_properties *properties);

/**
 * @brief update properties of cw tower service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t cw_tower_properties_update(size_t count, uint32_t *enumerate, struct cw_tower_properties *properties);

#endif /* CW_TOWER_SERVICE_H */
