/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: acAssistant.proto */

#ifndef AC_ASSISTANT_SERVICE_H
#define AC_ASSISTANT_SERVICE_H

#include "hey/types.h"

enum ac_assistant_ac_mode {
    AC_ASSISTANT_AC_MODE_MODE_AUTO = 0,
    AC_ASSISTANT_AC_MODE_MODE_COOL = 1,
    AC_ASSISTANT_AC_MODE_MODE_HEAT = 2,
    AC_ASSISTANT_AC_MODE_MODE_DRY = 3,
    AC_ASSISTANT_AC_MODE_MODE_FAN = 4
};

enum ac_assistant_displaying_temp_unit {
    AC_ASSISTANT_DISPLAYING_TEMP_UNIT_UNIT_K = 0,
    AC_ASSISTANT_DISPLAYING_TEMP_UNIT_UNIT_F = 1,
    AC_ASSISTANT_DISPLAYING_TEMP_UNIT_UNIT_C = 2
};

enum ac_assistant_fan_mode {
    AC_ASSISTANT_FAN_MODE_FAN_NORMAL = 0,
    AC_ASSISTANT_FAN_MODE_FAN_NATURAL = 1,
    AC_ASSISTANT_FAN_MODE_FAN_SLEEP = 2,
    AC_ASSISTANT_FAN_MODE_FAN_COMFORTABLE = 3,
    AC_ASSISTANT_FAN_MODE_FAN_HUMAN_FEELING = 4,
    AC_ASSISTANT_FAN_MODE_FAN_QUIET = 5
};

enum ac_assistant_wind_speed {
    AC_ASSISTANT_WIND_SPEED_SPEED_AUTO = 0,
    AC_ASSISTANT_WIND_SPEED_SPEED_ONE = 1,
    AC_ASSISTANT_WIND_SPEED_SPEED_TWO = 2,
    AC_ASSISTANT_WIND_SPEED_SPEED_THREE = 3,
    AC_ASSISTANT_WIND_SPEED_SPEED_FOUR = 4
};

enum ac_assistant_horizontal_direction {
    AC_ASSISTANT_HORIZONTAL_DIRECTION_HL_STOP = 0,
    AC_ASSISTANT_HORIZONTAL_DIRECTION_HL_AUTO = 1,
    AC_ASSISTANT_HORIZONTAL_DIRECTION_HL_ONE = 2,
    AC_ASSISTANT_HORIZONTAL_DIRECTION_HL_TWO = 3,
    AC_ASSISTANT_HORIZONTAL_DIRECTION_HL_THREE = 4,
    AC_ASSISTANT_HORIZONTAL_DIRECTION_HL_FOUR = 5,
    AC_ASSISTANT_HORIZONTAL_DIRECTION_HL_FIVE = 6
};

enum ac_assistant_vertical_direction {
    AC_ASSISTANT_VERTICAL_DIRECTION_VL_STOP = 0,
    AC_ASSISTANT_VERTICAL_DIRECTION_VL_AUTO = 1,
    AC_ASSISTANT_VERTICAL_DIRECTION_VL_ONE = 2,
    AC_ASSISTANT_VERTICAL_DIRECTION_VL_TWO = 3,
    AC_ASSISTANT_VERTICAL_DIRECTION_VL_THREE = 4,
    AC_ASSISTANT_VERTICAL_DIRECTION_VL_FOUR = 5,
    AC_ASSISTANT_VERTICAL_DIRECTION_VL_FIVE = 6
};

enum ac_assistant_sleep_curve_mode {
    AC_ASSISTANT_SLEEP_CURVE_MODE_CURVE_OLD_MAN = 0,
    AC_ASSISTANT_SLEEP_CURVE_MODE_CURVE_CHILD = 1,
    AC_ASSISTANT_SLEEP_CURVE_MODE_CURVE_CONSERVATION = 2
};

enum ac_assistant_sleep {
    AC_ASSISTANT_SLEEP_S_OFF = 0,
    AC_ASSISTANT_SLEEP_S_ON = 1
};

struct ac_assistant_issuing_ir_command_in {
    struct hey_binary_data ircode;
};

struct ac_assistant_issuing_ir_command_out {
    char __place_holder__; // make compiler happy
};

struct mode_definition_config {
    uint32_t siid;
    size_t n_iid;
    uint32_t *iid;
    struct hey_binary_data data;
};

struct sleep_curve_mode_definition_mode_definition {
    uint32_t hour;
    uint32_t min;
    size_t n_config;
    struct mode_definition_config **config;
};

struct ac_assistant_sleep_curve_mode_definition {
    uint32_t mode;
    char *modename;
    size_t n_modedefinition;
    struct sleep_curve_mode_definition_mode_definition **modedefinition;
};

enum AC_ASSISTANT_PROPERTY {
    AC_ASSISTANT_PROPERTY_POWER = 1,
    AC_ASSISTANT_PROPERTY_ACMODE = 2,
    AC_ASSISTANT_PROPERTY_ECO = 3,
    AC_ASSISTANT_PROPERTY_SLEEP = 4,
    AC_ASSISTANT_PROPERTY_RAPIDMODE = 5,
    AC_ASSISTANT_PROPERTY_ELECTRICHEATING = 6,
    AC_ASSISTANT_PROPERTY_TARGETTEMPERATURE = 7,
    AC_ASSISTANT_PROPERTY_DISPLAYINGTEMPUNIT = 8,
    AC_ASSISTANT_PROPERTY_FANMODE = 9,
    AC_ASSISTANT_PROPERTY_WINDSPEED = 10,
    AC_ASSISTANT_PROPERTY_HORIZONTALDIRECTION = 11,
    AC_ASSISTANT_PROPERTY_VERTICALDIRECTION = 12,
    AC_ASSISTANT_PROPERTY_SLEEPCURVEENABLED = 13,
    AC_ASSISTANT_PROPERTY_SLEEPCURVEMODE = 14,
    AC_ASSISTANT_PROPERTY_SLEEPCURVEMODEDEFINITION = 15
};

enum AC_ASSISTANT_ACTION {
    AC_ASSISTANT_ACTION_ISSUING_IR_COMMAND = 16
};

struct ac_assistant_properties {
    bool power;
    enum ac_assistant_ac_mode acmode;
    bool eco;
    enum ac_assistant_sleep sleep;
    bool rapidmode;
    bool electricheating;
    int32_t targettemperature;
    enum ac_assistant_displaying_temp_unit displayingtempunit;
    enum ac_assistant_fan_mode fanmode;
    enum ac_assistant_wind_speed windspeed;
    enum ac_assistant_horizontal_direction horizontaldirection;
    enum ac_assistant_vertical_direction verticaldirection;
    bool sleepcurveenabled;
    enum ac_assistant_sleep_curve_mode sleepcurvemode;
    size_t n_sleepcurvemodedefinition;
    struct hey_array_node **sleepcurvemodedefinition;
};

/**
 * @brief ac assistant service initialization
 * @param properties [ac assistant service properties]
 * @return int32_t   [initialize result]
*/
int32_t ac_assistant_service_init(const struct ac_assistant_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
struct ac_assistant_sleep_curve_mode_definition *ac_assistant_sleep_curve_mode_definition_unpack(const uint8_t *data, size_t len);
void ac_assistant_sleep_curve_mode_definition_free_unpacked(struct ac_assistant_sleep_curve_mode_definition *data);
// less than 0 means failure
int32_t ac_assistant_sleep_curve_mode_definition_get_packed_size(const struct ac_assistant_sleep_curve_mode_definition *data);
// less than 0 means failure
int32_t ac_assistant_sleep_curve_mode_definition_pack(const struct ac_assistant_sleep_curve_mode_definition *data, uint8_t *out);

/**
 * @brief properties write callback of ac assistant service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t ac_assistant_properties_write_cb(size_t count, uint32_t *enumerate, struct ac_assistant_properties *properties);

/**
 * @brief arrayNode properties add callback of ac assistant service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t ac_assistant_sleepcurvemodedefinition_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of ac assistant service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t ac_assistant_sleepcurvemodedefinition_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of ac assistant service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t ac_assistant_sleepcurvemodedefinition_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief update properties of ac assistant service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t ac_assistant_properties_update(size_t count, uint32_t *enumerate, struct ac_assistant_properties *properties);

/**
 * @brief issuing ir command action start callback of ac assistant service
 * @param ctx          [action context]
 * @param action       [issuing ir command action in]
 * @param user_context [user context record in SDK as needed, otherwise set it NULL]
 * @return int32_t     [action start handle result, 0 means success]
 */
int32_t ac_assistant_issuing_ir_command_start_cb(struct hey_action_ctx *ctx, struct ac_assistant_issuing_ir_command_in *action, void **user_context);

/**
 * @brief issuing ir command action send message of ac assistant service
 * @param ctx      [action context]
 * @param action   [issuing ir command action out]
 * @return int32_t [action send result, 0 means success]
 */
int32_t ac_assistant_issuing_ir_command_send(struct hey_action_ctx *ctx, struct ac_assistant_issuing_ir_command_out *action);

/**
 * @brief issuing ir command action stop of ac assistant service
 * @param ctx      [action context]
 * @return int32_t [action stop result, 0 means success]
 */
int32_t ac_assistant_issuing_ir_command_stop(struct hey_action_ctx *ctx);

/**
 * @brief issuing ir command action stop callback of ac assistant service
 *        closed by the peer, user must to call action stop function
 * @param user_context [callback data which form action start callback function]
 * @return none
 */
void ac_assistant_issuing_ir_command_stop_cb(void *user_context);

#endif /* AC_ASSISTANT_SERVICE_H */
