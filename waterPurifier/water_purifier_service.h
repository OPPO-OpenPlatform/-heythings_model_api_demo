/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: waterPurifier.proto */

#ifndef WATER_PURIFIER_SERVICE_H
#define WATER_PURIFIER_SERVICE_H

#include "hey/types.h"

enum water_purifier_water_additive_type {
    WATER_PURIFIER_WATER_ADDITIVE_TYPE_NONE_TYPE = 0,
    WATER_PURIFIER_WATER_ADDITIVE_TYPE_SODA = 1,
    WATER_PURIFIER_WATER_ADDITIVE_TYPE_MINERAL = 2
};

enum water_purifier_operation_mode {
    WATER_PURIFIER_OPERATION_MODE_STOP = 0,
    WATER_PURIFIER_OPERATION_MODE_PAUSE = 1,
    WATER_PURIFIER_OPERATION_MODE_RESUME = 2,
    WATER_PURIFIER_OPERATION_MODE_CANCEL = 3,
    WATER_PURIFIER_OPERATION_MODE_START = 4
};

enum water_purifier_machine_status {
    WATER_PURIFIER_MACHINE_STATUS_IDLE = 0,
    WATER_PURIFIER_MACHINE_STATUS_PREACTIVE = 1,
    WATER_PURIFIER_MACHINE_STATUS_ACTIVE = 2,
    WATER_PURIFIER_MACHINE_STATUS_STOPED = 3,
    WATER_PURIFIER_MACHINE_STATUS_ERROR = 4
};

enum water_purifier_bubble_mode {
    WATER_PURIFIER_BUBBLE_MODE_CLOSE = 0,
    WATER_PURIFIER_BUBBLE_MODE_OPEN = 1,
    WATER_PURIFIER_BUBBLE_MODE_HOT_BUBBLE = 2,
    WATER_PURIFIER_BUBBLE_MODE_CLOD_BUBBLE = 3
};

enum water_purifier_sterilization_period {
    WATER_PURIFIER_STERILIZATION_PERIOD_PERIOD_NONE = 0,
    WATER_PURIFIER_STERILIZATION_PERIOD_PERIOD_1 = 1,
    WATER_PURIFIER_STERILIZATION_PERIOD_PERIOD_2 = 2,
    WATER_PURIFIER_STERILIZATION_PERIOD_PERIOD_3 = 3
};

struct water_purifier_water_quantity {
    uint32_t quantity;
};

enum WATER_PURIFIER_PROPERTY {
    WATER_PURIFIER_PROPERTY_POWER = 1,
    WATER_PURIFIER_PROPERTY_WASTEWATER = 2,
    WATER_PURIFIER_PROPERTY_WATERADDITIVETYPE = 3,
    WATER_PURIFIER_PROPERTY_OPERATIONMODE = 4,
    WATER_PURIFIER_PROPERTY_MACHINESTATUS = 5,
    WATER_PURIFIER_PROPERTY_REMAINTIME = 6,
    WATER_PURIFIER_PROPERTY_PROCESSINGPERCENTAGE = 7,
    WATER_PURIFIER_PROPERTY_WASHENABLED = 8,
    WATER_PURIFIER_PROPERTY_BUBBLEMODE = 9,
    WATER_PURIFIER_PROPERTY_INFLOWTDS = 10,
    WATER_PURIFIER_PROPERTY_OUTFLOWTDS = 11,
    WATER_PURIFIER_PROPERTY_SCREENDISPLAYENABLED = 12,
    WATER_PURIFIER_PROPERTY_CHILDLOCKENABLED = 13,
    WATER_PURIFIER_PROPERTY_DRAINAGE = 14,
    WATER_PURIFIER_PROPERTY_VACATIONMODEENABLED = 15,
    WATER_PURIFIER_PROPERTY_WATERQUANTITY = 16,
    WATER_PURIFIER_PROPERTY_STERILIZATIONENABLED = 17,
    WATER_PURIFIER_PROPERTY_STERILIZATIONLEFTDAYS = 18,
    WATER_PURIFIER_PROPERTY_STERILIZATIONPERIOD = 19,
    WATER_PURIFIER_PROPERTY_STERILIZATIONPERCENT = 20,
    WATER_PURIFIER_PROPERTY_WATERFLOWSTATUS = 21
};

struct water_purifier_properties {
    bool power;
    bool wastewater;
    enum water_purifier_water_additive_type wateradditivetype;
    enum water_purifier_operation_mode operationmode;
    enum water_purifier_machine_status machinestatus;
    uint32_t remaintime;
    uint32_t processingpercentage;
    bool washenabled;
    enum water_purifier_bubble_mode bubblemode;
    uint32_t inflowtds;
    uint32_t outflowtds;
    bool screendisplayenabled;
    bool childlockenabled;
    bool drainage;
    bool vacationmodeenabled;
    size_t n_waterquantity;
    struct hey_array_node **waterquantity;
    bool sterilizationenabled;
    uint32_t sterilizationleftdays;
    enum water_purifier_sterilization_period sterilizationperiod;
    uint32_t sterilizationpercent;
    bool waterflowstatus;
};

/**
 * @brief water purifier service initialization
 * @param properties [water purifier service properties]
 * @return int32_t   [initialize result]
*/
int32_t water_purifier_service_init(const struct water_purifier_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
struct water_purifier_water_quantity *water_purifier_water_quantity_unpack(const uint8_t *data, size_t len);
void water_purifier_water_quantity_free_unpacked(struct water_purifier_water_quantity *data);
// less than 0 means failure
int32_t water_purifier_water_quantity_get_packed_size(const struct water_purifier_water_quantity *data);
// less than 0 means failure
int32_t water_purifier_water_quantity_pack(const struct water_purifier_water_quantity *data, uint8_t *out);

/**
 * @brief properties write callback of water purifier service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t water_purifier_properties_write_cb(size_t count, uint32_t *enumerate, struct water_purifier_properties *properties);

/**
 * @brief arrayNode properties add callback of water purifier service
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [return array id, 0 or more than 0 means success]
*/
int32_t water_purifier_waterquantity_array_add_cb(size_t len, uint8_t *value);

/**
 * @brief arrayNode properties delete callback of water purifier service
 * @param n_id     [nums of id that will be removed]
 * @param ids      [list of ids that will be removed]
 * @return int32_t [0 means success]
*/
int32_t water_purifier_waterquantity_array_del_cb(size_t n_id, uint32_t *ids);

/**
 * @brief arrayNode properties replace callback of water purifier service
 * @param id       [array id that will be replaced]
 * @param len      [array data length]
 * @param value    [array data]
 * @return int32_t [0 means success]
*/
int32_t water_purifier_waterquantity_array_replace_cb(uint32_t id, size_t len, uint8_t *value);

/**
 * @brief update properties of water purifier service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t water_purifier_properties_update(size_t count, uint32_t *enumerate, struct water_purifier_properties *properties);

#endif /* WATER_PURIFIER_SERVICE_H */
