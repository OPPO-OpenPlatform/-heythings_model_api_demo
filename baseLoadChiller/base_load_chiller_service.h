/* Generated by the heythings model compiler.  DO NOT EDIT! */
/* Generated from: baseLoadChiller.proto */

#ifndef BASE_LOAD_CHILLER_SERVICE_H
#define BASE_LOAD_CHILLER_SERVICE_H

#include "hey/types.h"

enum BASE_LOAD_CHILLER_PROPERTY {
    BASE_LOAD_CHILLER_PROPERTY_POWER = 1,
    BASE_LOAD_CHILLER_PROPERTY_MANNULAUTOSTA = 2,
    BASE_LOAD_CHILLER_PROPERTY_FAULTSTA = 3,
    BASE_LOAD_CHILLER_PROPERTY_SUPPLYWATERRATE = 4,
    BASE_LOAD_CHILLER_PROPERTY_CHWSUPPLYWATERTEMP = 5,
    BASE_LOAD_CHILLER_PROPERTY_CHWRETURNWATERTEMP = 6,
    BASE_LOAD_CHILLER_PROPERTY_CWSUPPLYWATERTEMP = 7,
    BASE_LOAD_CHILLER_PROPERTY_CWRETURNWATERTEMP = 8,
    BASE_LOAD_CHILLER_PROPERTY_CHWTARGETSUPPLYWATERTEMP = 9,
    BASE_LOAD_CHILLER_PROPERTY_EVASATPRES = 10,
    BASE_LOAD_CHILLER_PROPERTY_EVASATTEMP = 11,
    BASE_LOAD_CHILLER_PROPERTY_CONSATPRES = 12,
    BASE_LOAD_CHILLER_PROPERTY_CONSATTEMP = 13,
    BASE_LOAD_CHILLER_PROPERTY_EVAAPPTEMP = 14,
    BASE_LOAD_CHILLER_PROPERTY_CONAPPTEMP = 15,
    BASE_LOAD_CHILLER_PROPERTY_EVAFLOWSTA = 16,
    BASE_LOAD_CHILLER_PROPERTY_CONFLOWSTA = 17,
    BASE_LOAD_CHILLER_PROPERTY_COP = 18,
    BASE_LOAD_CHILLER_PROPERTY_RUNNINGLOAD = 19,
    BASE_LOAD_CHILLER_PROPERTY_RUNNINGTIME = 20,
    BASE_LOAD_CHILLER_PROPERTY_GGOPENING1 = 21,
    BASE_LOAD_CHILLER_PROPERTY_GGOPENING2 = 22,
    BASE_LOAD_CHILLER_PROPERTY_GGOPENING3 = 23,
    BASE_LOAD_CHILLER_PROPERTY_MOTORCOILTEMP1 = 24,
    BASE_LOAD_CHILLER_PROPERTY_MOTORCOILTEMP2 = 25,
    BASE_LOAD_CHILLER_PROPERTY_MOTORCOILTEMP3 = 26,
    BASE_LOAD_CHILLER_PROPERTY_HVIBRATIONVALUE = 27,
    BASE_LOAD_CHILLER_PROPERTY_VVIBRATIONVALUE = 28
};

struct base_load_chiller_properties {
    bool power;
    bool mannulautosta;
    bool faultsta;
    uint32_t supplywaterrate;
    uint32_t chwsupplywatertemp;
    uint32_t chwreturnwatertemp;
    uint32_t cwsupplywatertemp;
    uint32_t cwreturnwatertemp;
    uint32_t chwtargetsupplywatertemp;
    uint32_t evasatpres;
    uint32_t evasattemp;
    uint32_t consatpres;
    uint32_t consattemp;
    uint32_t evaapptemp;
    uint32_t conapptemp;
    bool evaflowsta;
    bool conflowsta;
    bool cop;
    uint32_t runningload;
    uint32_t runningtime;
    uint32_t ggopening1;
    uint32_t ggopening2;
    uint32_t ggopening3;
    uint32_t motorcoiltemp1;
    uint32_t motorcoiltemp2;
    uint32_t motorcoiltemp3;
    uint32_t hvibrationvalue;
    uint32_t vvibrationvalue;
};

/**
 * @brief base load chiller service initialization
 * @param properties [base load chiller service properties]
 * @return int32_t   [initialize result]
*/
int32_t base_load_chiller_service_init(const struct base_load_chiller_properties *properties);

/**
 * @brief data at "struct hey_array_node" pack and unpack
*/
/**
 * @brief properties write callback of base load chiller service
 * @param count      [the number of properties will be written]
 * @param enumerate  [the iid enumeration of properties will be written]
 * @param properties [properties structure with written content]
 * @return int32_t   [be writed result, 0 means success]
*/
int32_t base_load_chiller_properties_write_cb(size_t count, uint32_t *enumerate, struct base_load_chiller_properties *properties);

/**
 * @brief update properties of base load chiller service
 * @param count      [the number of properties to be updated]
 * @param enumerate  [the iid enumeration of properties to be updated]
 * @param properties [properties structure with updated content]
 * @return int32_t   [update result]
 */
int32_t base_load_chiller_properties_update(size_t count, uint32_t *enumerate, struct base_load_chiller_properties *properties);

#endif /* BASE_LOAD_CHILLER_SERVICE_H */
